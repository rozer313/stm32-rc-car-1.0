
projekt_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004cdc  08004cdc  00005cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d44  08004d44  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004d44  08004d44  00005d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d4c  08004d4c  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00005d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d50  08004d50  00005d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004d54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000060  08004db4  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004db4  0000637c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7bb  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b88  00000000  00000000  0001284b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000143d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098d  00000000  00000000  00015000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a02  00000000  00000000  0001598d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d582  00000000  00000000  0002b38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c97d  00000000  00000000  00038911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c528e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  000c52d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c8b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cc4 	.word	0x08004cc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004cc4 	.word	0x08004cc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <convert_to_cm>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t convert_to_cm(uint32_t distance_us)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	return (distance_us / 58);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <convert_to_cm+0x20>)
 800057c:	fba2 2303 	umull	r2, r3, r2, r3
 8000580:	095b      	lsrs	r3, r3, #5
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	8d3dcb09 	.word	0x8d3dcb09

08000594 <median_filter>:

/* HC-SR-04 AND SERVO */
uint32_t median_filter(uint32_t *array) {
 8000594:	b480      	push	{r7}
 8000596:	b087      	sub	sp, #28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	for (int i=0; i<2; i++) {
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	e02e      	b.n	8000600 <median_filter+0x6c>
		for (int j=i+1; j<3; j++) {
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	e024      	b.n	80005f4 <median_filter+0x60>
			if (array[j] < array[i])
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	440b      	add	r3, r1
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d215      	bcs.n	80005ee <median_filter+0x5a>
			{
				temp = array[j];
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	60fb      	str	r3, [r7, #12]
				array[j] = array[i];
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	441a      	add	r2, r3
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	440b      	add	r3, r1
 80005de:	6812      	ldr	r2, [r2, #0]
 80005e0:	601a      	str	r2, [r3, #0]
				array[i] = temp;
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	601a      	str	r2, [r3, #0]
		for (int j=i+1; j<3; j++) {
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	3301      	adds	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	ddd7      	ble.n	80005aa <median_filter+0x16>
	for (int i=0; i<2; i++) {
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	2b01      	cmp	r3, #1
 8000604:	ddcd      	ble.n	80005a2 <median_filter+0xe>
			}
		}
	}
	return array[2];
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
}
 800060a:	4618      	mov	r0, r3
 800060c:	371c      	adds	r7, #28
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <servo_scan_left>:



void servo_scan_left() {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	servo_angle_ms += 10;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <servo_scan_left+0x24>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	330a      	adds	r3, #10
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <servo_scan_left+0x24>)
 8000626:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, servo_angle_ms);
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <servo_scan_left+0x24>)
 800062a:	881a      	ldrh	r2, [r3, #0]
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <servo_scan_left+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(20);
 8000632:	2014      	movs	r0, #20
 8000634:	f001 f8c2 	bl	80017bc <HAL_Delay>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000002 	.word	0x20000002
 8000640:	2000010c 	.word	0x2000010c

08000644 <servo_scan_right>:

void servo_scan_right() {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	servo_angle_ms -= 10;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <servo_scan_right+0x24>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3b0a      	subs	r3, #10
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <servo_scan_right+0x24>)
 8000652:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, servo_angle_ms);
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <servo_scan_right+0x24>)
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <servo_scan_right+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(20);
 800065e:	2014      	movs	r0, #20
 8000660:	f001 f8ac 	bl	80017bc <HAL_Delay>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000002 	.word	0x20000002
 800066c:	2000010c 	.word	0x2000010c

08000670 <servo_center>:

void servo_center() {
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	servo_angle_ms = 1500;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <servo_center+0x20>)
 8000676:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800067a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, servo_angle_ms);
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <servo_center+0x20>)
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <servo_center+0x24>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000002 	.word	0x20000002
 8000694:	2000010c 	.word	0x2000010c

08000698 <move>:
		HAL_Delay(30);
	}
	current_power = speed;
}

void move(uint16_t speed) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	//if (current_power < speed)
	//	accelerate(speed);

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speed);
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <move+0x3c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, speed);
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <move+0x3c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, speed);
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <move+0x3c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	88fa      	ldrh	r2, [r7, #6]
 80006b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, speed);
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <move+0x3c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	641a      	str	r2, [r3, #64]	@ 0x40
	current_power = speed;
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <move+0x40>)
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	8013      	strh	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	20000154 	.word	0x20000154
 80006d8:	200001e4 	.word	0x200001e4

080006dc <stop>:

void stop() {
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <stop+0x34>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <stop+0x34>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <stop+0x34>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <stop+0x34>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	@ 0x40
	current_power = 0;
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <stop+0x38>)
 8000702:	2200      	movs	r2, #0
 8000704:	801a      	strh	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000154 	.word	0x20000154
 8000714:	200001e4 	.word	0x200001e4

08000718 <turn_forward>:

void turn_forward() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	4813      	ldr	r0, [pc, #76]	@ (8000770 <turn_forward+0x58>)
 8000722:	f001 fb1d 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4811      	ldr	r0, [pc, #68]	@ (8000770 <turn_forward+0x58>)
 800072c:	f001 fb18 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	480f      	ldr	r0, [pc, #60]	@ (8000774 <turn_forward+0x5c>)
 8000736:	f001 fb13 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 1);
 800073a:	2201      	movs	r2, #1
 800073c:	2102      	movs	r1, #2
 800073e:	480e      	ldr	r0, [pc, #56]	@ (8000778 <turn_forward+0x60>)
 8000740:	f001 fb0e 	bl	8001d60 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	2101      	movs	r1, #1
 8000748:	480b      	ldr	r0, [pc, #44]	@ (8000778 <turn_forward+0x60>)
 800074a:	f001 fb09 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4808      	ldr	r0, [pc, #32]	@ (8000774 <turn_forward+0x5c>)
 8000754:	f001 fb04 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <turn_forward+0x5c>)
 800075e:	f001 faff 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2180      	movs	r1, #128	@ 0x80
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <turn_forward+0x60>)
 8000768:	f001 fafa 	bl	8001d60 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40020000 	.word	0x40020000
 8000774:	40020400 	.word	0x40020400
 8000778:	40020800 	.word	0x40020800

0800077c <turn_backwards>:

void turn_backwards() {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2102      	movs	r1, #2
 8000784:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <turn_backwards+0x58>)
 8000786:	f001 faeb 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	2110      	movs	r1, #16
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <turn_backwards+0x58>)
 8000790:	f001 fae6 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <turn_backwards+0x5c>)
 800079a:	f001 fae1 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2102      	movs	r1, #2
 80007a2:	480e      	ldr	r0, [pc, #56]	@ (80007dc <turn_backwards+0x60>)
 80007a4:	f001 fadc 	bl	8001d60 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2101      	movs	r1, #1
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <turn_backwards+0x60>)
 80007ae:	f001 fad7 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <turn_backwards+0x5c>)
 80007b8:	f001 fad2 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <turn_backwards+0x5c>)
 80007c2:	f001 facd 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2180      	movs	r1, #128	@ 0x80
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <turn_backwards+0x60>)
 80007cc:	f001 fac8 	bl	8001d60 <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020800 	.word	0x40020800

080007e0 <turn_left>:

void turn_left() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	4813      	ldr	r0, [pc, #76]	@ (8000838 <turn_left+0x58>)
 80007ea:	f001 fab9 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 1);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2110      	movs	r1, #16
 80007f2:	4811      	ldr	r0, [pc, #68]	@ (8000838 <turn_left+0x58>)
 80007f4:	f001 fab4 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2101      	movs	r1, #1
 80007fc:	480f      	ldr	r0, [pc, #60]	@ (800083c <turn_left+0x5c>)
 80007fe:	f001 faaf 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	480e      	ldr	r0, [pc, #56]	@ (8000840 <turn_left+0x60>)
 8000808:	f001 faaa 	bl	8001d60 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <turn_left+0x60>)
 8000812:	f001 faa5 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 8000816:	2201      	movs	r2, #1
 8000818:	2120      	movs	r1, #32
 800081a:	4808      	ldr	r0, [pc, #32]	@ (800083c <turn_left+0x5c>)
 800081c:	f001 faa0 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <turn_left+0x5c>)
 8000826:	f001 fa9b 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	4804      	ldr	r0, [pc, #16]	@ (8000840 <turn_left+0x60>)
 8000830:	f001 fa96 	bl	8001d60 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400
 8000840:	40020800 	.word	0x40020800

08000844 <turn_right>:

void turn_right() {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	2102      	movs	r1, #2
 800084c:	4813      	ldr	r0, [pc, #76]	@ (800089c <turn_right+0x58>)
 800084e:	f001 fa87 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2110      	movs	r1, #16
 8000856:	4811      	ldr	r0, [pc, #68]	@ (800089c <turn_right+0x58>)
 8000858:	f001 fa82 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	480f      	ldr	r0, [pc, #60]	@ (80008a0 <turn_right+0x5c>)
 8000862:	f001 fa7d 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2102      	movs	r1, #2
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <turn_right+0x60>)
 800086c:	f001 fa78 	bl	8001d60 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	2101      	movs	r1, #1
 8000874:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <turn_right+0x60>)
 8000876:	f001 fa73 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <turn_right+0x5c>)
 8000880:	f001 fa6e 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <turn_right+0x5c>)
 800088a:	f001 fa69 	bl	8001d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <turn_right+0x60>)
 8000894:	f001 fa64 	bl	8001d60 <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800

080008a8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a37      	ldr	r2, [pc, #220]	@ (8000994 <HAL_TIM_IC_CaptureCallback+0xec>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d168      	bne.n	800098c <HAL_TIM_IC_CaptureCallback+0xe4>
	{

		uint32_t echo_value;
		echo_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80008ba:	2104      	movs	r1, #4
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f002 fbfb 	bl	80030b8 <HAL_TIM_ReadCapturedValue>
 80008c2:	60f8      	str	r0, [r7, #12]
		echo_value = convert_to_cm(echo_value);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fe53 	bl	8000570 <convert_to_cm>
 80008ca:	60f8      	str	r0, [r7, #12]

		captured_distances[number_of_measurements++] = echo_value;
 80008cc:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	b2d1      	uxtb	r1, r2
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80008d6:	7011      	strb	r1, [r2, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4a30      	ldr	r2, [pc, #192]	@ (800099c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if(number_of_measurements > 2 && continue_measuring) {
 80008e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d950      	bls.n	800098c <HAL_TIM_IC_CaptureCallback+0xe4>
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d04c      	beq.n	800098c <HAL_TIM_IC_CaptureCallback+0xe4>
			distance_cm = median_filter(captured_distances);
 80008f2:	482a      	ldr	r0, [pc, #168]	@ (800099c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80008f4:	f7ff fe4e 	bl	8000594 <median_filter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a2a      	ldr	r2, [pc, #168]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80008fc:	6013      	str	r3, [r2, #0]
			number_of_measurements = 0;
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
			size = sprintf(buffer, "value=%lu\n\r", distance_cm);
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4927      	ldr	r1, [pc, #156]	@ (80009a8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800090c:	4827      	ldr	r0, [pc, #156]	@ (80009ac <HAL_TIM_IC_CaptureCallback+0x104>)
 800090e:	f003 fd39 	bl	8004384 <siprintf>
 8000912:	4603      	mov	r3, r0
 8000914:	4a26      	ldr	r2, [pc, #152]	@ (80009b0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000916:	6013      	str	r3, [r2, #0]

			if (abs(last_distance - distance_cm) <= 25 && signal_start == 1) {
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	f113 0f19 	cmn.w	r3, #25
 8000926:	db18      	blt.n	800095a <HAL_TIM_IC_CaptureCallback+0xb2>
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	2b19      	cmp	r3, #25
 8000934:	dc11      	bgt.n	800095a <HAL_TIM_IC_CaptureCallback+0xb2>
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d10d      	bne.n	800095a <HAL_TIM_IC_CaptureCallback+0xb2>
				no_same_distances++;
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <HAL_TIM_IC_CaptureCallback+0x114>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <HAL_TIM_IC_CaptureCallback+0x114>)
 8000948:	801a      	strh	r2, [r3, #0]
				if(no_same_distances >= 10) {
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <HAL_TIM_IC_CaptureCallback+0x114>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	2b09      	cmp	r3, #9
 8000950:	d906      	bls.n	8000960 <HAL_TIM_IC_CaptureCallback+0xb8>
					signal_stop = 1;
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
				if(no_same_distances >= 10) {
 8000958:	e002      	b.n	8000960 <HAL_TIM_IC_CaptureCallback+0xb8>
				}

			}
			else {
				no_same_distances = 0;
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_TIM_IC_CaptureCallback+0x114>)
 800095c:	2200      	movs	r2, #0
 800095e:	801a      	strh	r2, [r3, #0]
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)&buffer, size, 500);
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	b29a      	uxth	r2, r3
 8000966:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800096a:	4910      	ldr	r1, [pc, #64]	@ (80009ac <HAL_TIM_IC_CaptureCallback+0x104>)
 800096c:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800096e:	f003 f94d 	bl	8003c0c <HAL_UART_Transmit>
			if (distance_cm <= 30) {
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b1e      	cmp	r3, #30
 8000978:	d804      	bhi.n	8000984 <HAL_TIM_IC_CaptureCallback+0xdc>
				//continue_measuring = 0;
				signal_stop = 1;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
				stop();
 8000980:	f7ff feac 	bl	80006dc <stop>
				//HAL_UART_Transmit(&huart2, "STOP\n\r", 6, 500);
			}
			last_distance = distance_cm;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800098a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010000 	.word	0x40010000
 8000998:	200001f8 	.word	0x200001f8
 800099c:	200001ec 	.word	0x200001ec
 80009a0:	20000000 	.word	0x20000000
 80009a4:	200001e8 	.word	0x200001e8
 80009a8:	08004cdc 	.word	0x08004cdc
 80009ac:	20000204 	.word	0x20000204
 80009b0:	20000224 	.word	0x20000224
 80009b4:	200001fc 	.word	0x200001fc
 80009b8:	20000228 	.word	0x20000228
 80009bc:	20000200 	.word	0x20000200
 80009c0:	200001f9 	.word	0x200001f9
 80009c4:	2000019c 	.word	0x2000019c

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 fe83 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f963 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fba3 	bl	8001120 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009da:	f000 fb77 	bl	80010cc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80009de:	f000 fafb 	bl	8000fd8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80009e2:	f000 f9c3 	bl	8000d6c <MX_TIM1_Init>
  MX_TIM2_Init();
 80009e6:	f000 fa45 	bl	8000e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009ea:	f000 fa9b 	bl	8000f24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80009ee:	2100      	movs	r1, #0
 80009f0:	489d      	ldr	r0, [pc, #628]	@ (8000c68 <main+0x2a0>)
 80009f2:	f001 feb7 	bl	8002764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80009f6:	2104      	movs	r1, #4
 80009f8:	489b      	ldr	r0, [pc, #620]	@ (8000c68 <main+0x2a0>)
 80009fa:	f001 feb3 	bl	8002764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80009fe:	2108      	movs	r1, #8
 8000a00:	4899      	ldr	r0, [pc, #612]	@ (8000c68 <main+0x2a0>)
 8000a02:	f001 feaf 	bl	8002764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a06:	210c      	movs	r1, #12
 8000a08:	4897      	ldr	r0, [pc, #604]	@ (8000c68 <main+0x2a0>)
 8000a0a:	f001 feab 	bl	8002764 <HAL_TIM_PWM_Start>
  uint16_t time = 1500;
 8000a0e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a12:	813b      	strh	r3, [r7, #8]
  uint16_t power = 300;
 8000a14:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a18:	80fb      	strh	r3, [r7, #6]

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4893      	ldr	r0, [pc, #588]	@ (8000c6c <main+0x2a4>)
 8000a1e:	f001 ffa1 	bl	8002964 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a22:	2108      	movs	r1, #8
 8000a24:	4892      	ldr	r0, [pc, #584]	@ (8000c70 <main+0x2a8>)
 8000a26:	f001 fe9d 	bl	8002764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4891      	ldr	r0, [pc, #580]	@ (8000c74 <main+0x2ac>)
 8000a2e:	f001 fe99 	bl	8002764 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a36:	f000 fec1 	bl	80017bc <HAL_Delay>
  uint8_t check_left = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t mean_value_left = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  uint32_t mean_value_right = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  uint32_t last_measured_value = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  uint16_t measures_while_scanning = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	81fb      	strh	r3, [r7, #14]
  uint16_t max_left_value = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	81bb      	strh	r3, [r7, #12]
  uint16_t max_right_value = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	817b      	strh	r3, [r7, #10]
  uint16_t servo_left_max = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	80bb      	strh	r3, [r7, #4]
  uint16_t servo_right_max = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	807b      	strh	r3, [r7, #2]
  //servo_scan_left();
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 1500);
 8000a5e:	4b85      	ldr	r3, [pc, #532]	@ (8000c74 <main+0x2ac>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000a66:	639a      	str	r2, [r3, #56]	@ 0x38
  //turn_right();
  //move(450);
  HAL_Delay(1250);
 8000a68:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8000a6c:	f000 fea6 	bl	80017bc <HAL_Delay>
  //stop();


  HAL_UART_Transmit(&huart2, "LEFT\n\r", 6, 500); //go left
 8000a70:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a74:	2206      	movs	r2, #6
 8000a76:	4980      	ldr	r1, [pc, #512]	@ (8000c78 <main+0x2b0>)
 8000a78:	4880      	ldr	r0, [pc, #512]	@ (8000c7c <main+0x2b4>)
 8000a7a:	f003 f8c7 	bl	8003c0c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a82:	487f      	ldr	r0, [pc, #508]	@ (8000c80 <main+0x2b8>)
 8000a84:	f001 f954 	bl	8001d30 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d107      	bne.n	8000a9e <main+0xd6>
		  signal_start = 1;
 8000a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8000c84 <main+0x2bc>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2120      	movs	r1, #32
 8000a98:	487b      	ldr	r0, [pc, #492]	@ (8000c88 <main+0x2c0>)
 8000a9a:	f001 f961 	bl	8001d60 <HAL_GPIO_WritePin>
	  }


	  if (signal_stop && signal_start) {
 8000a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8000c8c <main+0x2c4>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80c5 	beq.w	8000c32 <main+0x26a>
 8000aa8:	4b76      	ldr	r3, [pc, #472]	@ (8000c84 <main+0x2bc>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f000 80c0 	beq.w	8000c32 <main+0x26a>
		  stop();
 8000ab2:	f7ff fe13 	bl	80006dc <stop>
		  if (check_left == 1) {
 8000ab6:	7ffb      	ldrb	r3, [r7, #31]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d130      	bne.n	8000b1e <main+0x156>
			  if (servo_angle_ms < 2500) {
 8000abc:	4b74      	ldr	r3, [pc, #464]	@ (8000c90 <main+0x2c8>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d81c      	bhi.n	8000b02 <main+0x13a>
				  servo_scan_left();
 8000ac8:	f7ff fda6 	bl	8000618 <servo_scan_left>
				  if (last_measured_value != distance_cm)
 8000acc:	4b71      	ldr	r3, [pc, #452]	@ (8000c94 <main+0x2cc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	f000 80c5 	beq.w	8000c62 <main+0x29a>
				  {
					  last_measured_value = distance_cm;
 8000ad8:	4b6e      	ldr	r3, [pc, #440]	@ (8000c94 <main+0x2cc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	613b      	str	r3, [r7, #16]
					  if (last_measured_value > max_left_value) {
 8000ade:	89bb      	ldrh	r3, [r7, #12]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d904      	bls.n	8000af0 <main+0x128>
						  max_left_value = last_measured_value;
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	81bb      	strh	r3, [r7, #12]
						  servo_left_max = servo_angle_ms;
 8000aea:	4b69      	ldr	r3, [pc, #420]	@ (8000c90 <main+0x2c8>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	80bb      	strh	r3, [r7, #4]
					  }
					  mean_value_left += distance_cm;
 8000af0:	4b68      	ldr	r3, [pc, #416]	@ (8000c94 <main+0x2cc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4413      	add	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
					  measures_while_scanning++;
 8000afa:	89fb      	ldrh	r3, [r7, #14]
 8000afc:	3301      	adds	r3, #1
 8000afe:	81fb      	strh	r3, [r7, #14]
		  if (check_left == 1) {
 8000b00:	e0af      	b.n	8000c62 <main+0x29a>
				  }
			  }
			  else {
				  mean_value_left = mean_value_left / measures_while_scanning;
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	61bb      	str	r3, [r7, #24]
				  measures_while_scanning = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	81fb      	strh	r3, [r7, #14]
				  last_measured_value = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
				  check_left = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	77fb      	strb	r3, [r7, #31]
				  servo_center();
 8000b18:	f7ff fdaa 	bl	8000670 <servo_center>
		  if (check_left == 1) {
 8000b1c:	e0a1      	b.n	8000c62 <main+0x29a>
			  }
		  }

		  else if (check_left == 0) {
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d12f      	bne.n	8000b84 <main+0x1bc>

			  if (servo_angle_ms > 500) {
 8000b24:	4b5a      	ldr	r3, [pc, #360]	@ (8000c90 <main+0x2c8>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b2c:	d91c      	bls.n	8000b68 <main+0x1a0>
				  servo_scan_right();
 8000b2e:	f7ff fd89 	bl	8000644 <servo_scan_right>
				  if (last_measured_value != distance_cm)
 8000b32:	4b58      	ldr	r3, [pc, #352]	@ (8000c94 <main+0x2cc>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f000 8092 	beq.w	8000c62 <main+0x29a>
				  {
					  last_measured_value = distance_cm;
 8000b3e:	4b55      	ldr	r3, [pc, #340]	@ (8000c94 <main+0x2cc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
					  if (last_measured_value > max_right_value) {
 8000b44:	897b      	ldrh	r3, [r7, #10]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d904      	bls.n	8000b56 <main+0x18e>
						  max_right_value = last_measured_value;
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	817b      	strh	r3, [r7, #10]
						  servo_right_max = servo_angle_ms;
 8000b50:	4b4f      	ldr	r3, [pc, #316]	@ (8000c90 <main+0x2c8>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	807b      	strh	r3, [r7, #2]
					  }
					  mean_value_right += distance_cm;
 8000b56:	4b4f      	ldr	r3, [pc, #316]	@ (8000c94 <main+0x2cc>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	617b      	str	r3, [r7, #20]
					  measures_while_scanning++;
 8000b60:	89fb      	ldrh	r3, [r7, #14]
 8000b62:	3301      	adds	r3, #1
 8000b64:	81fb      	strh	r3, [r7, #14]
		  if (check_left == 1) {
 8000b66:	e07c      	b.n	8000c62 <main+0x29a>
				  }
			  }
			  else {
				  mean_value_right = mean_value_right / measures_while_scanning;
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b70:	617b      	str	r3, [r7, #20]
				  measures_while_scanning = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	81fb      	strh	r3, [r7, #14]
				  last_measured_value = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
				  check_left = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	77fb      	strb	r3, [r7, #31]
				  servo_center();
 8000b7e:	f7ff fd77 	bl	8000670 <servo_center>
		  if (check_left == 1) {
 8000b82:	e06e      	b.n	8000c62 <main+0x29a>
			  }
		  }

		  else {
			  turn_backwards();
 8000b84:	f7ff fdfa 	bl	800077c <turn_backwards>
			  move(300);
 8000b88:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b8c:	f7ff fd84 	bl	8000698 <move>
			  HAL_Delay(400);
 8000b90:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000b94:	f000 fe12 	bl	80017bc <HAL_Delay>
			  if (mean_value_left > mean_value_right) {
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d917      	bls.n	8000bd0 <main+0x208>
				  HAL_UART_Transmit(&huart2, "LEFT\n\r", 6, 500); //go left
 8000ba0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ba4:	2206      	movs	r2, #6
 8000ba6:	4934      	ldr	r1, [pc, #208]	@ (8000c78 <main+0x2b0>)
 8000ba8:	4834      	ldr	r0, [pc, #208]	@ (8000c7c <main+0x2b4>)
 8000baa:	f003 f82f 	bl	8003c0c <HAL_UART_Transmit>
				  turn_left();
 8000bae:	f7ff fe17 	bl	80007e0 <turn_left>
				  while (distance_cm < max_left_value && distance_cm < 40) {
 8000bb2:	e003      	b.n	8000bbc <main+0x1f4>
					  move(450);
 8000bb4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000bb8:	f7ff fd6e 	bl	8000698 <move>
				  while (distance_cm < max_left_value && distance_cm < 40) {
 8000bbc:	89ba      	ldrh	r2, [r7, #12]
 8000bbe:	4b35      	ldr	r3, [pc, #212]	@ (8000c94 <main+0x2cc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d91b      	bls.n	8000bfe <main+0x236>
 8000bc6:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <main+0x2cc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b27      	cmp	r3, #39	@ 0x27
 8000bcc:	d9f2      	bls.n	8000bb4 <main+0x1ec>
 8000bce:	e016      	b.n	8000bfe <main+0x236>
				  }
			  }

			  else {
				  HAL_UART_Transmit(&huart2, "RIGHT\n\r", 7, 500); //go right
 8000bd0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	4930      	ldr	r1, [pc, #192]	@ (8000c98 <main+0x2d0>)
 8000bd8:	4828      	ldr	r0, [pc, #160]	@ (8000c7c <main+0x2b4>)
 8000bda:	f003 f817 	bl	8003c0c <HAL_UART_Transmit>
				  turn_right();
 8000bde:	f7ff fe31 	bl	8000844 <turn_right>
				  while (distance_cm < max_right_value && distance_cm < 40) {
 8000be2:	e003      	b.n	8000bec <main+0x224>
					  move(450);
 8000be4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000be8:	f7ff fd56 	bl	8000698 <move>
				  while (distance_cm < max_right_value && distance_cm < 40) {
 8000bec:	897a      	ldrh	r2, [r7, #10]
 8000bee:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <main+0x2cc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d903      	bls.n	8000bfe <main+0x236>
 8000bf6:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <main+0x2cc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b27      	cmp	r3, #39	@ 0x27
 8000bfc:	d9f2      	bls.n	8000be4 <main+0x21c>
				  }
			  }
			  stop();
 8000bfe:	f7ff fd6d 	bl	80006dc <stop>

			  turn_forward();
 8000c02:	f7ff fd89 	bl	8000718 <turn_forward>

			  mean_value_right = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
			  mean_value_left = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
			  measures_while_scanning = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	81fb      	strh	r3, [r7, #14]
			  last_measured_value = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
			  check_left = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	77fb      	strb	r3, [r7, #31]
			  max_left_value = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	81bb      	strh	r3, [r7, #12]
			  max_right_value = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	817b      	strh	r3, [r7, #10]
			  servo_left_max = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	80bb      	strh	r3, [r7, #4]
			  servo_right_max = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	807b      	strh	r3, [r7, #2]
			  signal_stop = 0;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <main+0x2c4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
		  if (check_left == 1) {
 8000c30:	e017      	b.n	8000c62 <main+0x29a>

		  }

	  }

	  else if (signal_start){
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <main+0x2bc>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f43f af21 	beq.w	8000a7e <main+0xb6>
		  turn_forward();
 8000c3c:	f7ff fd6c 	bl	8000718 <turn_forward>
		  if (distance_cm < 40 && distance_cm > 25)
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <main+0x2cc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b27      	cmp	r3, #39	@ 0x27
 8000c46:	d807      	bhi.n	8000c58 <main+0x290>
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <main+0x2cc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b19      	cmp	r3, #25
 8000c4e:	d903      	bls.n	8000c58 <main+0x290>
			  move(200);
 8000c50:	20c8      	movs	r0, #200	@ 0xc8
 8000c52:	f7ff fd21 	bl	8000698 <move>
 8000c56:	e005      	b.n	8000c64 <main+0x29c>
		  else
			  move(power);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd1c 	bl	8000698 <move>
 8000c60:	e70d      	b.n	8000a7e <main+0xb6>
		  if (check_left == 1) {
 8000c62:	bf00      	nop
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000c64:	e70b      	b.n	8000a7e <main+0xb6>
 8000c66:	bf00      	nop
 8000c68:	20000154 	.word	0x20000154
 8000c6c:	2000007c 	.word	0x2000007c
 8000c70:	200000c4 	.word	0x200000c4
 8000c74:	2000010c 	.word	0x2000010c
 8000c78:	08004ce8 	.word	0x08004ce8
 8000c7c:	2000019c 	.word	0x2000019c
 8000c80:	40020800 	.word	0x40020800
 8000c84:	20000228 	.word	0x20000228
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	200001f9 	.word	0x200001f9
 8000c90:	20000002 	.word	0x20000002
 8000c94:	200001e8 	.word	0x200001e8
 8000c98:	08004cf0 	.word	0x08004cf0

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	@ 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	@ 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fb8a 	bl	80043c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <SystemClock_Config+0xc8>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	4a26      	ldr	r2, [pc, #152]	@ (8000d64 <SystemClock_Config+0xc8>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd0:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <SystemClock_Config+0xc8>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <SystemClock_Config+0xcc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a20      	ldr	r2, [pc, #128]	@ (8000d68 <SystemClock_Config+0xcc>)
 8000ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <SystemClock_Config+0xcc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2310      	movs	r3, #16
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000d10:	2350      	movs	r3, #80	@ 0x50
 8000d12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 f837 	bl	8001d94 <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d2c:	f000 fa8e 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	230f      	movs	r3, #15
 8000d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d34:	2302      	movs	r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fa99 	bl	8002284 <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d58:	f000 fa78 	bl	800124c <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3750      	adds	r7, #80	@ 0x50
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000

08000d6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d98:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000d9a:	4a35      	ldr	r2, [pc, #212]	@ (8000e70 <MX_TIM1_Init+0x104>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000d9e:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000da0:	224f      	movs	r2, #79	@ 0x4f
 8000da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000daa:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000dac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dc4:	4829      	ldr	r0, [pc, #164]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000dc6:	f001 fd7d 	bl	80028c4 <HAL_TIM_IC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000dd0:	f000 fa3c 	bl	800124c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000dd8:	2350      	movs	r3, #80	@ 0x50
 8000dda:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	481f      	ldr	r0, [pc, #124]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000df0:	f002 f920 	bl	8003034 <HAL_TIM_SlaveConfigSynchro>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dfa:	f000 fa27 	bl	800124c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2200      	movs	r2, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	4815      	ldr	r0, [pc, #84]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000e18:	f001 ffae 	bl	8002d78 <HAL_TIM_IC_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000e22:	f000 fa13 	bl	800124c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e26:	2302      	movs	r3, #2
 8000e28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2204      	movs	r2, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000e38:	f001 ff9e 	bl	8002d78 <HAL_TIM_IC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000e42:	f000 fa03 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <MX_TIM1_Init+0x100>)
 8000e54:	f002 fe08 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e5e:	f000 f9f5 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	@ 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000007c 	.word	0x2000007c
 8000e70:	40010000 	.word	0x40010000

08000e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e96:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000e98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000ea0:	224f      	movs	r2, #79	@ 0x4f
 8000ea2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000eac:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ebe:	4818      	ldr	r0, [pc, #96]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000ec0:	f001 fc00 	bl	80026c4 <HAL_TIM_PWM_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eca:	f000 f9bf 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	4619      	mov	r1, r3
 8000edc:	4810      	ldr	r0, [pc, #64]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000ede:	f002 fdc3 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ee8:	f000 f9b0 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eec:	2360      	movs	r3, #96	@ 0x60
 8000eee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2208      	movs	r2, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000f04:	f001 ffd4 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f0e:	f000 f99d 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <MX_TIM2_Init+0xac>)
 8000f14:	f000 fa64 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	@ 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200000c4 	.word	0x200000c4

08000f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f46:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f48:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <MX_TIM3_Init+0xb0>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f4e:	224f      	movs	r2, #79	@ 0x4f
 8000f50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f5a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f6c:	4818      	ldr	r0, [pc, #96]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f6e:	f001 fba9 	bl	80026c4 <HAL_TIM_PWM_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f78:	f000 f968 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000f8c:	f002 fd6c 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f96:	f000 f959 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9a:	2360      	movs	r3, #96	@ 0x60
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2204      	movs	r2, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000fb2:	f001 ff7d 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000fbc:	f000 f946 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fc0:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <MX_TIM3_Init+0xac>)
 8000fc2:	f000 fa0d 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	@ 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000010c 	.word	0x2000010c
 8000fd4:	40000400 	.word	0x40000400

08000fd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ffa:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8000ffc:	4a32      	ldr	r2, [pc, #200]	@ (80010c8 <MX_TIM4_Init+0xf0>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001000:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8001002:	2253      	movs	r2, #83	@ 0x53
 8001004:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <MX_TIM4_Init+0xec>)
 800100e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001012:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <MX_TIM4_Init+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001020:	4828      	ldr	r0, [pc, #160]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8001022:	f001 fb4f 	bl	80026c4 <HAL_TIM_PWM_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800102c:	f000 f90e 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4619      	mov	r1, r3
 800103e:	4821      	ldr	r0, [pc, #132]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8001040:	f002 fd12 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800104a:	f000 f8ff 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104e:	2360      	movs	r3, #96	@ 0x60
 8001050:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	4817      	ldr	r0, [pc, #92]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8001066:	f001 ff23 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001070:	f000 f8ec 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2204      	movs	r2, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <MX_TIM4_Init+0xec>)
 800107c:	f001 ff18 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001086:	f000 f8e1 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2208      	movs	r2, #8
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <MX_TIM4_Init+0xec>)
 8001092:	f001 ff0d 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800109c:	f000 f8d6 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	220c      	movs	r2, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <MX_TIM4_Init+0xec>)
 80010a8:	f001 ff02 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80010b2:	f000 f8cb 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010b6:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <MX_TIM4_Init+0xec>)
 80010b8:	f000 f992 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000154 	.word	0x20000154
 80010c8:	40000800 	.word	0x40000800

080010cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <MX_USART2_UART_Init+0x50>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_USART2_UART_Init+0x4c>)
 8001104:	f002 fd32 	bl	8003b6c <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800110e:	f000 f89d 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000019c 	.word	0x2000019c
 800111c:	40004400 	.word	0x40004400

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b40      	ldr	r3, [pc, #256]	@ (800123c <MX_GPIO_Init+0x11c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a3f      	ldr	r2, [pc, #252]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b39      	ldr	r3, [pc, #228]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a38      	ldr	r2, [pc, #224]	@ (800123c <MX_GPIO_Init+0x11c>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b36      	ldr	r3, [pc, #216]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b32      	ldr	r3, [pc, #200]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a31      	ldr	r2, [pc, #196]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a2a      	ldr	r2, [pc, #168]	@ (800123c <MX_GPIO_Init+0x11c>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <MX_GPIO_Init+0x11c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_IN1_Pin|F_IN4_Pin|R_IN4_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2183      	movs	r1, #131	@ 0x83
 80011aa:	4825      	ldr	r0, [pc, #148]	@ (8001240 <MX_GPIO_Init+0x120>)
 80011ac:	f000 fdd8 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, F_IN1_Pin|F_IN2_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2132      	movs	r1, #50	@ 0x32
 80011b4:	4823      	ldr	r0, [pc, #140]	@ (8001244 <MX_GPIO_Init+0x124>)
 80011b6:	f000 fdd3 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_IN3_Pin|R_IN3_Pin|R_IN2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2131      	movs	r1, #49	@ 0x31
 80011be:	4822      	ldr	r0, [pc, #136]	@ (8001248 <MX_GPIO_Init+0x128>)
 80011c0:	f000 fdce 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4819      	ldr	r0, [pc, #100]	@ (8001240 <MX_GPIO_Init+0x120>)
 80011da:	f000 fc25 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_IN1_Pin F_IN4_Pin R_IN4_Pin */
  GPIO_InitStruct.Pin = R_IN1_Pin|F_IN4_Pin|R_IN4_Pin;
 80011de:	2383      	movs	r3, #131	@ 0x83
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4812      	ldr	r0, [pc, #72]	@ (8001240 <MX_GPIO_Init+0x120>)
 80011f6:	f000 fc17 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_IN1_Pin F_IN2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = F_IN1_Pin|F_IN2_Pin|LD2_Pin;
 80011fa:	2332      	movs	r3, #50	@ 0x32
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <MX_GPIO_Init+0x124>)
 8001212:	f000 fc09 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_IN3_Pin R_IN3_Pin R_IN2_Pin */
  GPIO_InitStruct.Pin = F_IN3_Pin|R_IN3_Pin|R_IN2_Pin;
 8001216:	2331      	movs	r3, #49	@ 0x31
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4806      	ldr	r0, [pc, #24]	@ (8001248 <MX_GPIO_Init+0x128>)
 800122e:	f000 fbfb 	bl	8001a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40020800 	.word	0x40020800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <Error_Handler+0x8>

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f000 fb84 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	@ (800133c <HAL_TIM_IC_MspInit+0x94>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d134      	bne.n	8001334 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HAL_TIM_IC_MspInit+0x98>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <HAL_TIM_IC_MspInit+0x98>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_TIM_IC_MspInit+0x98>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_TIM_IC_MspInit+0x98>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <HAL_TIM_IC_MspInit+0x98>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_TIM_IC_MspInit+0x98>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001314:	2301      	movs	r3, #1
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4809      	ldr	r0, [pc, #36]	@ (8001344 <HAL_TIM_IC_MspInit+0x9c>)
 8001320:	f000 fb82 	bl	8001a28 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	201b      	movs	r0, #27
 800132a:	f000 fb46 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800132e:	201b      	movs	r0, #27
 8001330:	f000 fb5f 	bl	80019f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40010000 	.word	0x40010000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001358:	d10e      	bne.n	8001378 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001376:	e026      	b.n	80013c6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x90>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10e      	bne.n	80013a0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
}
 800139e:	e012      	b.n	80013c6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <HAL_TIM_PWM_MspInit+0x94>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10d      	bne.n	80013c6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x8c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40000400 	.word	0x40000400
 80013dc:	40000800 	.word	0x40000800

080013e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001400:	d11f      	bne.n	8001442 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a34      	ldr	r2, [pc, #208]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 800141e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4829      	ldr	r0, [pc, #164]	@ (80014e0 <HAL_TIM_MspPostInit+0x100>)
 800143c:	f000 faf4 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001440:	e047      	b.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a27      	ldr	r2, [pc, #156]	@ (80014e4 <HAL_TIM_MspPostInit+0x104>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d11e      	bne.n	800148a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6313      	str	r3, [r2, #48]	@ 0x30
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERWO_Pin;
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001478:	2302      	movs	r3, #2
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERWO_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4819      	ldr	r0, [pc, #100]	@ (80014e8 <HAL_TIM_MspPostInit+0x108>)
 8001484:	f000 fad0 	bl	8001a28 <HAL_GPIO_Init>
}
 8001488:	e023      	b.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <HAL_TIM_MspPostInit+0x10c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d11e      	bne.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a4:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_TIM_MspPostInit+0xfc>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = F_ENA_Pin|F_ENB_Pin|R_ENA_Pin|R_ENB_Pin;
 80014b0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014c2:	2302      	movs	r3, #2
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <HAL_TIM_MspPostInit+0x100>)
 80014ce:	f000 faab 	bl	8001a28 <HAL_GPIO_Init>
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	@ 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40000400 	.word	0x40000400
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40000800 	.word	0x40000800

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <HAL_UART_MspInit+0x84>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12b      	bne.n	800156a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <HAL_UART_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <HAL_UART_MspInit+0x88>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_UART_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_UART_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a10      	ldr	r2, [pc, #64]	@ (8001578 <HAL_UART_MspInit+0x88>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <HAL_UART_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155a:	2307      	movs	r3, #7
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <HAL_UART_MspInit+0x8c>)
 8001566:	f000 fa5f 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	@ 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40004400 	.word	0x40004400
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <NMI_Handler+0x4>

08001588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f8d1 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <TIM1_CC_IRQHandler+0x10>)
 80015e6:	f001 fad7 	bl	8002b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000007c 	.word	0x2000007c

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	@ (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f002 fed6 	bl	80043d4 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20020000 	.word	0x20020000
 8001654:	00000400 	.word	0x00000400
 8001658:	2000022c 	.word	0x2000022c
 800165c:	20000380 	.word	0x20000380

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001688:	f7ff ffea 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168e:	490d      	ldr	r1, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a4:	4c0a      	ldr	r4, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b2:	f002 fe95 	bl	80043e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7ff f987 	bl	80009c8 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016c8:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 80016cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80016d0:	2000037c 	.word	0x2000037c

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f94f 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fda4 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f967 	bl	8001a0e <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f92f 	bl	80019ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000004 	.word	0x20000004
 8001774:	2000000c 	.word	0x2000000c
 8001778:	20000008 	.word	0x20000008

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000230 	.word	0x20000230

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000230 	.word	0x20000230

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000000c 	.word	0x2000000c

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	@ (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	@ (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e159      	b.n	8001cf8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8148 	bne.w	8001cf2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a2 	beq.w	8001cf2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b54      	ldr	r3, [pc, #336]	@ (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a52      	ldr	r2, [pc, #328]	@ (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	@ (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x202>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	@ (8001d1c <HAL_GPIO_Init+0x2f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x1fe>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a47      	ldr	r2, [pc, #284]	@ (8001d20 <HAL_GPIO_Init+0x2f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a46      	ldr	r2, [pc, #280]	@ (8001d24 <HAL_GPIO_Init+0x2fc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x1f6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a45      	ldr	r2, [pc, #276]	@ (8001d28 <HAL_GPIO_Init+0x300>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x1f2>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	@ (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a24      	ldr	r2, [pc, #144]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f aea2 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e001      	b.n	8001d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	619a      	str	r2, [r3, #24]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e267      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d075      	beq.n	8001e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db2:	4b88      	ldr	r3, [pc, #544]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbe:	4b85      	ldr	r3, [pc, #532]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d112      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b82      	ldr	r3, [pc, #520]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05b      	beq.n	8001e9c <HAL_RCC_OscConfig+0x108>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d157      	bne.n	8001e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e242      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x74>
 8001dfa:	4b76      	ldr	r3, [pc, #472]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a75      	ldr	r2, [pc, #468]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x98>
 8001e12:	4b70      	ldr	r3, [pc, #448]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6f      	ldr	r2, [pc, #444]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6c      	ldr	r2, [pc, #432]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e2c:	4b69      	ldr	r3, [pc, #420]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a68      	ldr	r2, [pc, #416]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b66      	ldr	r3, [pc, #408]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a65      	ldr	r2, [pc, #404]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fcaa 	bl	80017a4 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fca6 	bl	80017a4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e207      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b5b      	ldr	r3, [pc, #364]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xc0>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc96 	bl	80017a4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff fc92 	bl	80017a4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	@ 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1f3      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	4b51      	ldr	r3, [pc, #324]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0xe8>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d063      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d11c      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b44      	ldr	r3, [pc, #272]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1c7      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4937      	ldr	r1, [pc, #220]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e03a      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <HAL_RCC_OscConfig+0x244>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fc4b 	bl	80017a4 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff fc47 	bl	80017a4 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1a8      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4925      	ldr	r1, [pc, #148]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <HAL_RCC_OscConfig+0x244>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fc2a 	bl	80017a4 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff fc26 	bl	80017a4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e187      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d036      	beq.n	8001fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_RCC_OscConfig+0x248>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fc0a 	bl	80017a4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff fc06 	bl	80017a4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e167      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x200>
 8001fb2:	e01b      	b.n	8001fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_RCC_OscConfig+0x248>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fbf3 	bl	80017a4 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	e00e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fbef 	bl	80017a4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d907      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e150      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	42470000 	.word	0x42470000
 8001fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b88      	ldr	r3, [pc, #544]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ea      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8097 	beq.w	8002128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b81      	ldr	r3, [pc, #516]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b7d      	ldr	r3, [pc, #500]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a7c      	ldr	r2, [pc, #496]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b7a      	ldr	r3, [pc, #488]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b77      	ldr	r3, [pc, #476]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d118      	bne.n	8002068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b74      	ldr	r3, [pc, #464]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a73      	ldr	r2, [pc, #460]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7ff fbaf 	bl	80017a4 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7ff fbab 	bl	80017a4 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e10c      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b6a      	ldr	r3, [pc, #424]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x2ea>
 8002070:	4b64      	ldr	r3, [pc, #400]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	4a63      	ldr	r2, [pc, #396]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	@ 0x70
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x324>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x30c>
 8002086:	4b5f      	ldr	r3, [pc, #380]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	4a5e      	ldr	r2, [pc, #376]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6713      	str	r3, [r2, #112]	@ 0x70
 8002092:	4b5c      	ldr	r3, [pc, #368]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002096:	4a5b      	ldr	r2, [pc, #364]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6713      	str	r3, [r2, #112]	@ 0x70
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x324>
 80020a0:	4b58      	ldr	r3, [pc, #352]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	4a57      	ldr	r2, [pc, #348]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ac:	4b55      	ldr	r3, [pc, #340]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b0:	4a54      	ldr	r2, [pc, #336]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7ff fb70 	bl	80017a4 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7ff fb6c 	bl	80017a4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0cb      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	4b49      	ldr	r3, [pc, #292]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ee      	beq.n	80020c8 <HAL_RCC_OscConfig+0x334>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fb5a 	bl	80017a4 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7ff fb56 	bl	80017a4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0b5      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	4b3e      	ldr	r3, [pc, #248]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ee      	bne.n	80020f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	4a38      	ldr	r2, [pc, #224]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a1 	beq.w	8002274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002132:	4b34      	ldr	r3, [pc, #208]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b08      	cmp	r3, #8
 800213c:	d05c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d141      	bne.n	80021ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b31      	ldr	r3, [pc, #196]	@ (800220c <HAL_RCC_OscConfig+0x478>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fb2a 	bl	80017a4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff fb26 	bl	80017a4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e087      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	491b      	ldr	r1, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x478>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff faff 	bl	80017a4 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff fafb 	bl	80017a4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e05c      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x416>
 80021c8:	e054      	b.n	8002274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <HAL_RCC_OscConfig+0x478>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fae8 	bl	80017a4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff fae4 	bl	80017a4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e045      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x444>
 80021f6:	e03d      	b.n	8002274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e038      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
 8002204:	40023800 	.word	0x40023800
 8002208:	40007000 	.word	0x40007000
 800220c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x4ec>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d028      	beq.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d121      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d11a      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002248:	4293      	cmp	r3, r2
 800224a:	d111      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0cc      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b68      	ldr	r3, [pc, #416]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d90c      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b65      	ldr	r3, [pc, #404]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a58      	ldr	r2, [pc, #352]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a52      	ldr	r2, [pc, #328]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d044      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d119      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d003      	beq.n	8002342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233e:	2b03      	cmp	r3, #3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e067      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002362:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 0203 	bic.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4934      	ldr	r1, [pc, #208]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002374:	f7ff fa16 	bl	80017a4 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	e00a      	b.n	8002392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237c:	f7ff fa12 	bl	80017a4 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e04f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 020c 	and.w	r2, r3, #12
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1eb      	bne.n	800237c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d20c      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b22      	ldr	r3, [pc, #136]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	@ (8002444 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	@ (8002448 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f976 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00
 8002440:	40023800 	.word	0x40023800
 8002444:	08004cf8 	.word	0x08004cf8
 8002448:	20000004 	.word	0x20000004
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002454:	b094      	sub	sp, #80	@ 0x50
 8002456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	647b      	str	r3, [r7, #68]	@ 0x44
 800245c:	2300      	movs	r3, #0
 800245e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002460:	2300      	movs	r3, #0
 8002462:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002468:	4b79      	ldr	r3, [pc, #484]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d00d      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 8002474:	2b08      	cmp	r3, #8
 8002476:	f200 80e1 	bhi.w	800263c <HAL_RCC_GetSysClockFreq+0x1ec>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x34>
 800247e:	2b04      	cmp	r3, #4
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x3a>
 8002482:	e0db      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b73      	ldr	r3, [pc, #460]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x204>)
 8002486:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002488:	e0db      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800248a:	4b73      	ldr	r3, [pc, #460]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x208>)
 800248c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800248e:	e0d8      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002490:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002498:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249a:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d063      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	2200      	movs	r2, #0
 80024ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80024be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	f04f 0000 	mov.w	r0, #0
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	0159      	lsls	r1, r3, #5
 80024d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d4:	0150      	lsls	r0, r2, #5
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4621      	mov	r1, r4
 80024dc:	1a51      	subs	r1, r2, r1
 80024de:	6139      	str	r1, [r7, #16]
 80024e0:	4629      	mov	r1, r5
 80024e2:	eb63 0301 	sbc.w	r3, r3, r1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024f4:	4659      	mov	r1, fp
 80024f6:	018b      	lsls	r3, r1, #6
 80024f8:	4651      	mov	r1, sl
 80024fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024fe:	4651      	mov	r1, sl
 8002500:	018a      	lsls	r2, r1, #6
 8002502:	4651      	mov	r1, sl
 8002504:	ebb2 0801 	subs.w	r8, r2, r1
 8002508:	4659      	mov	r1, fp
 800250a:	eb63 0901 	sbc.w	r9, r3, r1
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800251a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800251e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002522:	4690      	mov	r8, r2
 8002524:	4699      	mov	r9, r3
 8002526:	4623      	mov	r3, r4
 8002528:	eb18 0303 	adds.w	r3, r8, r3
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	462b      	mov	r3, r5
 8002530:	eb49 0303 	adc.w	r3, r9, r3
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002542:	4629      	mov	r1, r5
 8002544:	024b      	lsls	r3, r1, #9
 8002546:	4621      	mov	r1, r4
 8002548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800254c:	4621      	mov	r1, r4
 800254e:	024a      	lsls	r2, r1, #9
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002556:	2200      	movs	r2, #0
 8002558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800255a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800255c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002560:	f7fd fe8e 	bl	8000280 <__aeabi_uldivmod>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4613      	mov	r3, r2
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800256c:	e058      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256e:	4b38      	ldr	r3, [pc, #224]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	2200      	movs	r2, #0
 8002576:	4618      	mov	r0, r3
 8002578:	4611      	mov	r1, r2
 800257a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
 8002584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002588:	4642      	mov	r2, r8
 800258a:	464b      	mov	r3, r9
 800258c:	f04f 0000 	mov.w	r0, #0
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	0159      	lsls	r1, r3, #5
 8002596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259a:	0150      	lsls	r0, r2, #5
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4641      	mov	r1, r8
 80025a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025a6:	4649      	mov	r1, r9
 80025a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c0:	ebb2 040a 	subs.w	r4, r2, sl
 80025c4:	eb63 050b 	sbc.w	r5, r3, fp
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	00eb      	lsls	r3, r5, #3
 80025d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d6:	00e2      	lsls	r2, r4, #3
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	4643      	mov	r3, r8
 80025de:	18e3      	adds	r3, r4, r3
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	464b      	mov	r3, r9
 80025e4:	eb45 0303 	adc.w	r3, r5, r3
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025f6:	4629      	mov	r1, r5
 80025f8:	028b      	lsls	r3, r1, #10
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002600:	4621      	mov	r1, r4
 8002602:	028a      	lsls	r2, r1, #10
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800260a:	2200      	movs	r2, #0
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	61fa      	str	r2, [r7, #28]
 8002610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002614:	f7fd fe34 	bl	8000280 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x204>)
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002644:	4618      	mov	r0, r3
 8002646:	3750      	adds	r7, #80	@ 0x50
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	00f42400 	.word	0x00f42400
 8002658:	007a1200 	.word	0x007a1200

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b03      	ldr	r3, [pc, #12]	@ (8002670 <HAL_RCC_GetHCLKFreq+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff0 	bl	800265c <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	@ (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	08004d08 	.word	0x08004d08

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026a0:	f7ff ffdc 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0b5b      	lsrs	r3, r3, #13
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4903      	ldr	r1, [pc, #12]	@ (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08004d08 	.word	0x08004d08

080026c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e041      	b.n	800275a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fe2c 	bl	8001348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f000 fd44 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_TIM_PWM_Start+0x24>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	e022      	b.n	80027ce <HAL_TIM_PWM_Start+0x6a>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d109      	bne.n	80027a2 <HAL_TIM_PWM_Start+0x3e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	e015      	b.n	80027ce <HAL_TIM_PWM_Start+0x6a>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d109      	bne.n	80027bc <HAL_TIM_PWM_Start+0x58>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e008      	b.n	80027ce <HAL_TIM_PWM_Start+0x6a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e068      	b.n	80028a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_PWM_Start+0x82>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027e4:	e013      	b.n	800280e <HAL_TIM_PWM_Start+0xaa>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_PWM_Start+0x92>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027f4:	e00b      	b.n	800280e <HAL_TIM_PWM_Start+0xaa>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_PWM_Start+0xa2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002804:	e003      	b.n	800280e <HAL_TIM_PWM_Start+0xaa>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f001 f901 	bl	8003a1e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a23      	ldr	r2, [pc, #140]	@ (80028b0 <HAL_TIM_PWM_Start+0x14c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d107      	bne.n	8002836 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_TIM_PWM_Start+0x14c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_TIM_PWM_Start+0x10e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002848:	d013      	beq.n	8002872 <HAL_TIM_PWM_Start+0x10e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_TIM_PWM_Start+0x150>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIM_PWM_Start+0x10e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_TIM_PWM_Start+0x154>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_TIM_PWM_Start+0x10e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_TIM_PWM_Start+0x158>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIM_PWM_Start+0x10e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <HAL_TIM_PWM_Start+0x15c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d010      	beq.n	80028a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	e007      	b.n	80028a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800
 80028bc:	40000c00 	.word	0x40000c00
 80028c0:	40014000 	.word	0x40014000

080028c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e041      	b.n	800295a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fcdc 	bl	80012a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f000 fc44 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <HAL_TIM_IC_Start_IT+0x1e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800297e:	b2db      	uxtb	r3, r3
 8002980:	e013      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x46>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d104      	bne.n	8002992 <HAL_TIM_IC_Start_IT+0x2e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e00b      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x46>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_IC_Start_IT+0x3e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e003      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x46>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <HAL_TIM_IC_Start_IT+0x58>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e013      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0x80>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d104      	bne.n	80029cc <HAL_TIM_IC_Start_IT+0x68>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e00b      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0x80>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d104      	bne.n	80029dc <HAL_TIM_IC_Start_IT+0x78>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e003      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0x80>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80029e6:	7bbb      	ldrb	r3, [r7, #14]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0c2      	b.n	8002b7c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_IC_Start_IT+0xa2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a04:	e013      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0xca>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_IC_Start_IT+0xb2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a14:	e00b      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0xca>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_IC_Start_IT+0xc2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a24:	e003      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0xca>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_IC_Start_IT+0xda>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a3c:	e013      	b.n	8002a66 <HAL_TIM_IC_Start_IT+0x102>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_IC_Start_IT+0xea>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a4c:	e00b      	b.n	8002a66 <HAL_TIM_IC_Start_IT+0x102>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_IC_Start_IT+0xfa>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a5c:	e003      	b.n	8002a66 <HAL_TIM_IC_Start_IT+0x102>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	d841      	bhi.n	8002af0 <HAL_TIM_IC_Start_IT+0x18c>
 8002a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <HAL_TIM_IC_Start_IT+0x110>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002af1 	.word	0x08002af1
 8002a7c:	08002af1 	.word	0x08002af1
 8002a80:	08002af1 	.word	0x08002af1
 8002a84:	08002abb 	.word	0x08002abb
 8002a88:	08002af1 	.word	0x08002af1
 8002a8c:	08002af1 	.word	0x08002af1
 8002a90:	08002af1 	.word	0x08002af1
 8002a94:	08002acd 	.word	0x08002acd
 8002a98:	08002af1 	.word	0x08002af1
 8002a9c:	08002af1 	.word	0x08002af1
 8002aa0:	08002af1 	.word	0x08002af1
 8002aa4:	08002adf 	.word	0x08002adf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0202 	orr.w	r2, r2, #2
 8002ab6:	60da      	str	r2, [r3, #12]
      break;
 8002ab8:	e01d      	b.n	8002af6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0204 	orr.w	r2, r2, #4
 8002ac8:	60da      	str	r2, [r3, #12]
      break;
 8002aca:	e014      	b.n	8002af6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	60da      	str	r2, [r3, #12]
      break;
 8002adc:	e00b      	b.n	8002af6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0210 	orr.w	r2, r2, #16
 8002aec:	60da      	str	r2, [r3, #12]
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13e      	bne.n	8002b7a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 ff8a 	bl	8003a1e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <HAL_TIM_IC_Start_IT+0x220>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d018      	beq.n	8002b46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1c:	d013      	beq.n	8002b46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a19      	ldr	r2, [pc, #100]	@ (8002b88 <HAL_TIM_IC_Start_IT+0x224>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <HAL_TIM_IC_Start_IT+0x228>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a16      	ldr	r2, [pc, #88]	@ (8002b90 <HAL_TIM_IC_Start_IT+0x22c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <HAL_TIM_IC_Start_IT+0x230>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d111      	bne.n	8002b6a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b06      	cmp	r3, #6
 8002b56:	d010      	beq.n	8002b7a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	e007      	b.n	8002b7a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40014000 	.word	0x40014000

08002b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d020      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0202 	mvn.w	r2, #2
 8002bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fe60 	bl	80008a8 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fab2 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fab9 	bl	8003168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d020      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0204 	mvn.w	r2, #4
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd fe3a 	bl	80008a8 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa8c 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa93 	bl	8003168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d020      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0208 	mvn.w	r2, #8
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd fe14 	bl	80008a8 <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa66 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fa6d 	bl	8003168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d020      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0210 	mvn.w	r2, #16
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fdee 	bl	80008a8 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa40 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa47 	bl	8003168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0201 	mvn.w	r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa1e 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 ff18 	bl	8003b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa18 	bl	800317c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0220 	mvn.w	r2, #32
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 feea 	bl	8003b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e088      	b.n	8002ea8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11b      	bne.n	8002ddc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002db4:	f000 fc96 	bl	80036e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 020c 	bic.w	r2, r2, #12
 8002dc6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6999      	ldr	r1, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	619a      	str	r2, [r3, #24]
 8002dda:	e060      	b.n	8002e9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d11c      	bne.n	8002e1c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002df2:	f000 fd0e 	bl	8003812 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e04:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6999      	ldr	r1, [r3, #24]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	021a      	lsls	r2, r3, #8
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	e040      	b.n	8002e9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d11b      	bne.n	8002e5a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002e32:	f000 fd5b 	bl	80038ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020c 	bic.w	r2, r2, #12
 8002e44:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	61da      	str	r2, [r3, #28]
 8002e58:	e021      	b.n	8002e9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d11c      	bne.n	8002e9a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002e70:	f000 fd78 	bl	8003964 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e82:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69d9      	ldr	r1, [r3, #28]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
 8002e98:	e001      	b.n	8002e9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0ae      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	f200 809f 	bhi.w	800301c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ede:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	0800301d 	.word	0x0800301d
 8002eec:	0800301d 	.word	0x0800301d
 8002ef0:	0800301d 	.word	0x0800301d
 8002ef4:	08002f59 	.word	0x08002f59
 8002ef8:	0800301d 	.word	0x0800301d
 8002efc:	0800301d 	.word	0x0800301d
 8002f00:	0800301d 	.word	0x0800301d
 8002f04:	08002f9b 	.word	0x08002f9b
 8002f08:	0800301d 	.word	0x0800301d
 8002f0c:	0800301d 	.word	0x0800301d
 8002f10:	0800301d 	.word	0x0800301d
 8002f14:	08002fdb 	.word	0x08002fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f9c2 	bl	80032a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	619a      	str	r2, [r3, #24]
      break;
 8002f56:	e064      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa08 	bl	8003374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]
      break;
 8002f98:	e043      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa53 	bl	800344c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0208 	orr.w	r2, r2, #8
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0204 	bic.w	r2, r2, #4
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	61da      	str	r2, [r3, #28]
      break;
 8002fd8:	e023      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fa9d 	bl	8003520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69d9      	ldr	r1, [r3, #28]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	61da      	str	r2, [r3, #28]
      break;
 800301a:	e002      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
      break;
 8003020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003048:	2302      	movs	r3, #2
 800304a:	e031      	b.n	80030b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 faae 	bl	80035c0 <TIM_SlaveTimer_SetConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e018      	b.n	80030b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800308c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800309c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d831      	bhi.n	8003130 <HAL_TIM_ReadCapturedValue+0x78>
 80030cc:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003131 	.word	0x08003131
 80030dc:	08003131 	.word	0x08003131
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003113 	.word	0x08003113
 80030e8:	08003131 	.word	0x08003131
 80030ec:	08003131 	.word	0x08003131
 80030f0:	08003131 	.word	0x08003131
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003131 	.word	0x08003131
 8003104:	08003127 	.word	0x08003127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310e:	60fb      	str	r3, [r7, #12]

      break;
 8003110:	e00f      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	60fb      	str	r3, [r7, #12]

      break;
 800311a:	e00a      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	60fb      	str	r3, [r7, #12]

      break;
 8003124:	e005      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	60fb      	str	r3, [r7, #12]

      break;
 800312e:	e000      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003130:	bf00      	nop
  }

  return tmpreg;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3a      	ldr	r2, [pc, #232]	@ (800328c <TIM_Base_SetConfig+0xfc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00f      	beq.n	80031c8 <TIM_Base_SetConfig+0x38>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ae:	d00b      	beq.n	80031c8 <TIM_Base_SetConfig+0x38>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a37      	ldr	r2, [pc, #220]	@ (8003290 <TIM_Base_SetConfig+0x100>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_Base_SetConfig+0x38>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a36      	ldr	r2, [pc, #216]	@ (8003294 <TIM_Base_SetConfig+0x104>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0x38>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a35      	ldr	r2, [pc, #212]	@ (8003298 <TIM_Base_SetConfig+0x108>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	@ (800328c <TIM_Base_SetConfig+0xfc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01b      	beq.n	800321a <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e8:	d017      	beq.n	800321a <TIM_Base_SetConfig+0x8a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <TIM_Base_SetConfig+0x100>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <TIM_Base_SetConfig+0x104>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00f      	beq.n	800321a <TIM_Base_SetConfig+0x8a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a26      	ldr	r2, [pc, #152]	@ (8003298 <TIM_Base_SetConfig+0x108>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00b      	beq.n	800321a <TIM_Base_SetConfig+0x8a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a25      	ldr	r2, [pc, #148]	@ (800329c <TIM_Base_SetConfig+0x10c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <TIM_Base_SetConfig+0x8a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a24      	ldr	r2, [pc, #144]	@ (80032a0 <TIM_Base_SetConfig+0x110>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <TIM_Base_SetConfig+0x8a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <TIM_Base_SetConfig+0x114>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d108      	bne.n	800322c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a0e      	ldr	r2, [pc, #56]	@ (800328c <TIM_Base_SetConfig+0xfc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d103      	bne.n	8003260 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]
  }
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800
 8003298:	40000c00 	.word	0x40000c00
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800

080032a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f023 0201 	bic.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 0302 	bic.w	r3, r3, #2
 80032f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003370 <TIM_OC1_SetConfig+0xc8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10c      	bne.n	800331e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0308 	bic.w	r3, r3, #8
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <TIM_OC1_SetConfig+0xc8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d111      	bne.n	800334a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800332c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40010000 	.word	0x40010000

08003374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f023 0210 	bic.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0320 	bic.w	r3, r3, #32
 80033be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003448 <TIM_OC2_SetConfig+0xd4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10d      	bne.n	80033f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a15      	ldr	r2, [pc, #84]	@ (8003448 <TIM_OC2_SetConfig+0xd4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d113      	bne.n	8003420 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000

0800344c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0303 	bic.w	r3, r3, #3
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a1d      	ldr	r2, [pc, #116]	@ (800351c <TIM_OC3_SetConfig+0xd0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d10d      	bne.n	80034c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a14      	ldr	r2, [pc, #80]	@ (800351c <TIM_OC3_SetConfig+0xd0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d113      	bne.n	80034f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40010000 	.word	0x40010000

08003520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800356a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	031b      	lsls	r3, r3, #12
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a10      	ldr	r2, [pc, #64]	@ (80035bc <TIM_OC4_SetConfig+0x9c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40010000 	.word	0x40010000

080035c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b70      	cmp	r3, #112	@ 0x70
 8003608:	d01a      	beq.n	8003640 <TIM_SlaveTimer_SetConfig+0x80>
 800360a:	2b70      	cmp	r3, #112	@ 0x70
 800360c:	d860      	bhi.n	80036d0 <TIM_SlaveTimer_SetConfig+0x110>
 800360e:	2b60      	cmp	r3, #96	@ 0x60
 8003610:	d054      	beq.n	80036bc <TIM_SlaveTimer_SetConfig+0xfc>
 8003612:	2b60      	cmp	r3, #96	@ 0x60
 8003614:	d85c      	bhi.n	80036d0 <TIM_SlaveTimer_SetConfig+0x110>
 8003616:	2b50      	cmp	r3, #80	@ 0x50
 8003618:	d046      	beq.n	80036a8 <TIM_SlaveTimer_SetConfig+0xe8>
 800361a:	2b50      	cmp	r3, #80	@ 0x50
 800361c:	d858      	bhi.n	80036d0 <TIM_SlaveTimer_SetConfig+0x110>
 800361e:	2b40      	cmp	r3, #64	@ 0x40
 8003620:	d019      	beq.n	8003656 <TIM_SlaveTimer_SetConfig+0x96>
 8003622:	2b40      	cmp	r3, #64	@ 0x40
 8003624:	d854      	bhi.n	80036d0 <TIM_SlaveTimer_SetConfig+0x110>
 8003626:	2b30      	cmp	r3, #48	@ 0x30
 8003628:	d055      	beq.n	80036d6 <TIM_SlaveTimer_SetConfig+0x116>
 800362a:	2b30      	cmp	r3, #48	@ 0x30
 800362c:	d850      	bhi.n	80036d0 <TIM_SlaveTimer_SetConfig+0x110>
 800362e:	2b20      	cmp	r3, #32
 8003630:	d051      	beq.n	80036d6 <TIM_SlaveTimer_SetConfig+0x116>
 8003632:	2b20      	cmp	r3, #32
 8003634:	d84c      	bhi.n	80036d0 <TIM_SlaveTimer_SetConfig+0x110>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d04d      	beq.n	80036d6 <TIM_SlaveTimer_SetConfig+0x116>
 800363a:	2b10      	cmp	r3, #16
 800363c:	d04b      	beq.n	80036d6 <TIM_SlaveTimer_SetConfig+0x116>
 800363e:	e047      	b.n	80036d0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003650:	f000 f9c5 	bl	80039de <TIM_ETR_SetConfig>
      break;
 8003654:	e040      	b.n	80036d8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d101      	bne.n	8003662 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e03b      	b.n	80036da <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003688:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	4313      	orrs	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
      break;
 80036a6:	e017      	b.n	80036d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b4:	461a      	mov	r2, r3
 80036b6:	f000 f87d 	bl	80037b4 <TIM_TI1_ConfigInputStage>
      break;
 80036ba:	e00d      	b.n	80036d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c8:	461a      	mov	r2, r3
 80036ca:	f000 f8df 	bl	800388c <TIM_TI2_ConfigInputStage>
      break;
 80036ce:	e003      	b.n	80036d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
      break;
 80036d4:	e000      	b.n	80036d8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80036d6:	bf00      	nop
  }

  return status;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0201 	bic.w	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a24      	ldr	r2, [pc, #144]	@ (80037a0 <TIM_TI1_SetConfig+0xbc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <TIM_TI1_SetConfig+0x56>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003718:	d00f      	beq.n	800373a <TIM_TI1_SetConfig+0x56>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a21      	ldr	r2, [pc, #132]	@ (80037a4 <TIM_TI1_SetConfig+0xc0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_TI1_SetConfig+0x56>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <TIM_TI1_SetConfig+0xc4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_TI1_SetConfig+0x56>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a1f      	ldr	r2, [pc, #124]	@ (80037ac <TIM_TI1_SetConfig+0xc8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_TI1_SetConfig+0x56>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a1e      	ldr	r2, [pc, #120]	@ (80037b0 <TIM_TI1_SetConfig+0xcc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <TIM_TI1_SetConfig+0x5a>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <TIM_TI1_SetConfig+0x5c>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e003      	b.n	800375e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	b2db      	uxtb	r3, r3
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f023 030a 	bic.w	r3, r3, #10
 8003778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f003 030a 	and.w	r3, r3, #10
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40014000 	.word	0x40014000

080037b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f023 0201 	bic.w	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 030a 	bic.w	r3, r3, #10
 80037f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003812:	b480      	push	{r7}
 8003814:	b087      	sub	sp, #28
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0210 	bic.w	r2, r3, #16
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	031b      	lsls	r3, r3, #12
 8003856:	b29b      	uxth	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0210 	bic.w	r2, r3, #16
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	031b      	lsls	r3, r3, #12
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	621a      	str	r2, [r3, #32]
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f023 0303 	bic.w	r3, r3, #3
 8003918:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003928:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	b2db      	uxtb	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800393c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003990:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	031b      	lsls	r3, r3, #12
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80039b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	031b      	lsls	r3, r3, #12
 80039bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039de:	b480      	push	{r7}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	021a      	lsls	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b087      	sub	sp, #28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2201      	movs	r2, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1a      	ldr	r2, [r3, #32]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	401a      	ands	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e050      	b.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003acc:	d013      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a18      	ldr	r2, [pc, #96]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40014000 	.word	0x40014000

08003b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e042      	b.n	8003c04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fcac 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	@ 0x24
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f973 	bl	8003e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	@ 0x28
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d175      	bne.n	8003d18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Transmit+0x2c>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e06e      	b.n	8003d1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2221      	movs	r2, #33	@ 0x21
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c4a:	f7fd fdab 	bl	80017a4 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c64:	d108      	bne.n	8003c78 <HAL_UART_Transmit+0x6c>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	e003      	b.n	8003c80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c80:	e02e      	b.n	8003ce0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f848 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e03a      	b.n	8003d1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e007      	b.n	8003cd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	781a      	ldrb	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1cb      	bne.n	8003c82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2140      	movs	r1, #64	@ 0x40
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f814 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e006      	b.n	8003d1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d32:	e03b      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d037      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fd fd32 	bl	80017a4 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	6a3a      	ldr	r2, [r7, #32]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e03a      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b80      	cmp	r3, #128	@ 0x80
 8003d68:	d020      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b40      	cmp	r3, #64	@ 0x40
 8003d6e:	d01d      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d116      	bne.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f81d 	bl	8003dd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e00f      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d0b4      	beq.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b095      	sub	sp, #84	@ 0x54
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dfc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e5      	bne.n	8003e10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d119      	bne.n	8003e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0310 	bic.w	r3, r3, #16
 8003e62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e6c:	61ba      	str	r2, [r7, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e8e:	bf00      	nop
 8003e90:	3754      	adds	r7, #84	@ 0x54
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea0:	b0c0      	sub	sp, #256	@ 0x100
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	68d9      	ldr	r1, [r3, #12]
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	ea40 0301 	orr.w	r3, r0, r1
 8003ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ef4:	f021 010c 	bic.w	r1, r1, #12
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f02:	430b      	orrs	r3, r1
 8003f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	6999      	ldr	r1, [r3, #24]
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	ea40 0301 	orr.w	r3, r0, r1
 8003f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b8f      	ldr	r3, [pc, #572]	@ (8004168 <UART_SetConfig+0x2cc>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d005      	beq.n	8003f3c <UART_SetConfig+0xa0>
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b8d      	ldr	r3, [pc, #564]	@ (800416c <UART_SetConfig+0x2d0>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d104      	bne.n	8003f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7fe fbae 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8003f40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f44:	e003      	b.n	8003f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f46:	f7fe fb95 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8003f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f58:	f040 810c 	bne.w	8004174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f76:	415b      	adcs	r3, r3
 8003f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f7e:	4621      	mov	r1, r4
 8003f80:	eb12 0801 	adds.w	r8, r2, r1
 8003f84:	4629      	mov	r1, r5
 8003f86:	eb43 0901 	adc.w	r9, r3, r1
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9e:	4690      	mov	r8, r2
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	eb18 0303 	adds.w	r3, r8, r3
 8003fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fac:	462b      	mov	r3, r5
 8003fae:	eb49 0303 	adc.w	r3, r9, r3
 8003fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fca:	460b      	mov	r3, r1
 8003fcc:	18db      	adds	r3, r3, r3
 8003fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	eb42 0303 	adc.w	r3, r2, r3
 8003fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fe0:	f7fc f94e 	bl	8000280 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b61      	ldr	r3, [pc, #388]	@ (8004170 <UART_SetConfig+0x2d4>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011c      	lsls	r4, r3, #4
 8003ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800400c:	415b      	adcs	r3, r3
 800400e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004014:	4641      	mov	r1, r8
 8004016:	eb12 0a01 	adds.w	sl, r2, r1
 800401a:	4649      	mov	r1, r9
 800401c:	eb43 0b01 	adc.w	fp, r3, r1
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800402c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004034:	4692      	mov	sl, r2
 8004036:	469b      	mov	fp, r3
 8004038:	4643      	mov	r3, r8
 800403a:	eb1a 0303 	adds.w	r3, sl, r3
 800403e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004042:	464b      	mov	r3, r9
 8004044:	eb4b 0303 	adc.w	r3, fp, r3
 8004048:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004058:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800405c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004060:	460b      	mov	r3, r1
 8004062:	18db      	adds	r3, r3, r3
 8004064:	643b      	str	r3, [r7, #64]	@ 0x40
 8004066:	4613      	mov	r3, r2
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	647b      	str	r3, [r7, #68]	@ 0x44
 800406e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004076:	f7fc f903 	bl	8000280 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4611      	mov	r1, r2
 8004080:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <UART_SetConfig+0x2d4>)
 8004082:	fba3 2301 	umull	r2, r3, r3, r1
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2264      	movs	r2, #100	@ 0x64
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	1acb      	subs	r3, r1, r3
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004096:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <UART_SetConfig+0x2d4>)
 8004098:	fba3 2302 	umull	r2, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040a4:	441c      	add	r4, r3
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040c0:	415b      	adcs	r3, r3
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040fc:	464b      	mov	r3, r9
 80040fe:	460a      	mov	r2, r1
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004114:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800411c:	460b      	mov	r3, r1
 800411e:	18db      	adds	r3, r3, r3
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004122:	4613      	mov	r3, r2
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800412a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800412e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004132:	f7fc f8a5 	bl	8000280 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <UART_SetConfig+0x2d4>)
 800413c:	fba3 1302 	umull	r1, r3, r3, r2
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	2164      	movs	r1, #100	@ 0x64
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	3332      	adds	r3, #50	@ 0x32
 800414e:	4a08      	ldr	r2, [pc, #32]	@ (8004170 <UART_SetConfig+0x2d4>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	f003 0207 	and.w	r2, r3, #7
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4422      	add	r2, r4
 8004162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004164:	e106      	b.n	8004374 <UART_SetConfig+0x4d8>
 8004166:	bf00      	nop
 8004168:	40011000 	.word	0x40011000
 800416c:	40011400 	.word	0x40011400
 8004170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800417e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004186:	4642      	mov	r2, r8
 8004188:	464b      	mov	r3, r9
 800418a:	1891      	adds	r1, r2, r2
 800418c:	6239      	str	r1, [r7, #32]
 800418e:	415b      	adcs	r3, r3
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
 8004192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004196:	4641      	mov	r1, r8
 8004198:	1854      	adds	r4, r2, r1
 800419a:	4649      	mov	r1, r9
 800419c:	eb43 0501 	adc.w	r5, r3, r1
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	00eb      	lsls	r3, r5, #3
 80041aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041bc:	464b      	mov	r3, r9
 80041be:	eb45 0303 	adc.w	r3, r5, r3
 80041c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041e2:	4629      	mov	r1, r5
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ec:	4621      	mov	r1, r4
 80041ee:	008a      	lsls	r2, r1, #2
 80041f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041f4:	f7fc f844 	bl	8000280 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b60      	ldr	r3, [pc, #384]	@ (8004380 <UART_SetConfig+0x4e4>)
 80041fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	011c      	lsls	r4, r3, #4
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004210:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	1891      	adds	r1, r2, r2
 800421e:	61b9      	str	r1, [r7, #24]
 8004220:	415b      	adcs	r3, r3
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004228:	4641      	mov	r1, r8
 800422a:	1851      	adds	r1, r2, r1
 800422c:	6139      	str	r1, [r7, #16]
 800422e:	4649      	mov	r1, r9
 8004230:	414b      	adcs	r3, r1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004240:	4659      	mov	r1, fp
 8004242:	00cb      	lsls	r3, r1, #3
 8004244:	4651      	mov	r1, sl
 8004246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800424a:	4651      	mov	r1, sl
 800424c:	00ca      	lsls	r2, r1, #3
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	4603      	mov	r3, r0
 8004254:	4642      	mov	r2, r8
 8004256:	189b      	adds	r3, r3, r2
 8004258:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800425c:	464b      	mov	r3, r9
 800425e:	460a      	mov	r2, r1
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004272:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004280:	4649      	mov	r1, r9
 8004282:	008b      	lsls	r3, r1, #2
 8004284:	4641      	mov	r1, r8
 8004286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428a:	4641      	mov	r1, r8
 800428c:	008a      	lsls	r2, r1, #2
 800428e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004292:	f7fb fff5 	bl	8000280 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4611      	mov	r1, r2
 800429c:	4b38      	ldr	r3, [pc, #224]	@ (8004380 <UART_SetConfig+0x4e4>)
 800429e:	fba3 2301 	umull	r2, r3, r3, r1
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2264      	movs	r2, #100	@ 0x64
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	1acb      	subs	r3, r1, r3
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	3332      	adds	r3, #50	@ 0x32
 80042b0:	4a33      	ldr	r2, [pc, #204]	@ (8004380 <UART_SetConfig+0x4e4>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042bc:	441c      	add	r4, r3
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80042c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80042c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	1891      	adds	r1, r2, r2
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	415b      	adcs	r3, r3
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042dc:	4641      	mov	r1, r8
 80042de:	1851      	adds	r1, r2, r1
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	4649      	mov	r1, r9
 80042e4:	414b      	adcs	r3, r1
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042f4:	4659      	mov	r1, fp
 80042f6:	00cb      	lsls	r3, r1, #3
 80042f8:	4651      	mov	r1, sl
 80042fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fe:	4651      	mov	r1, sl
 8004300:	00ca      	lsls	r2, r1, #3
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	4603      	mov	r3, r0
 8004308:	4642      	mov	r2, r8
 800430a:	189b      	adds	r3, r3, r2
 800430c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800430e:	464b      	mov	r3, r9
 8004310:	460a      	mov	r2, r1
 8004312:	eb42 0303 	adc.w	r3, r2, r3
 8004316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	663b      	str	r3, [r7, #96]	@ 0x60
 8004322:	667a      	str	r2, [r7, #100]	@ 0x64
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004330:	4649      	mov	r1, r9
 8004332:	008b      	lsls	r3, r1, #2
 8004334:	4641      	mov	r1, r8
 8004336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433a:	4641      	mov	r1, r8
 800433c:	008a      	lsls	r2, r1, #2
 800433e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004342:	f7fb ff9d 	bl	8000280 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <UART_SetConfig+0x4e4>)
 800434c:	fba3 1302 	umull	r1, r3, r3, r2
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	2164      	movs	r1, #100	@ 0x64
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	3332      	adds	r3, #50	@ 0x32
 800435e:	4a08      	ldr	r2, [pc, #32]	@ (8004380 <UART_SetConfig+0x4e4>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	f003 020f 	and.w	r2, r3, #15
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4422      	add	r2, r4
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800437a:	46bd      	mov	sp, r7
 800437c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004380:	51eb851f 	.word	0x51eb851f

08004384 <siprintf>:
 8004384:	b40e      	push	{r1, r2, r3}
 8004386:	b500      	push	{lr}
 8004388:	b09c      	sub	sp, #112	@ 0x70
 800438a:	ab1d      	add	r3, sp, #116	@ 0x74
 800438c:	9002      	str	r0, [sp, #8]
 800438e:	9006      	str	r0, [sp, #24]
 8004390:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004394:	4809      	ldr	r0, [pc, #36]	@ (80043bc <siprintf+0x38>)
 8004396:	9107      	str	r1, [sp, #28]
 8004398:	9104      	str	r1, [sp, #16]
 800439a:	4909      	ldr	r1, [pc, #36]	@ (80043c0 <siprintf+0x3c>)
 800439c:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a0:	9105      	str	r1, [sp, #20]
 80043a2:	6800      	ldr	r0, [r0, #0]
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	a902      	add	r1, sp, #8
 80043a8:	f000 f994 	bl	80046d4 <_svfiprintf_r>
 80043ac:	9b02      	ldr	r3, [sp, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	b01c      	add	sp, #112	@ 0x70
 80043b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043b8:	b003      	add	sp, #12
 80043ba:	4770      	bx	lr
 80043bc:	20000010 	.word	0x20000010
 80043c0:	ffff0208 	.word	0xffff0208

080043c4 <memset>:
 80043c4:	4402      	add	r2, r0
 80043c6:	4603      	mov	r3, r0
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d100      	bne.n	80043ce <memset+0xa>
 80043cc:	4770      	bx	lr
 80043ce:	f803 1b01 	strb.w	r1, [r3], #1
 80043d2:	e7f9      	b.n	80043c8 <memset+0x4>

080043d4 <__errno>:
 80043d4:	4b01      	ldr	r3, [pc, #4]	@ (80043dc <__errno+0x8>)
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000010 	.word	0x20000010

080043e0 <__libc_init_array>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004418 <__libc_init_array+0x38>)
 80043e4:	4c0d      	ldr	r4, [pc, #52]	@ (800441c <__libc_init_array+0x3c>)
 80043e6:	1b64      	subs	r4, r4, r5
 80043e8:	10a4      	asrs	r4, r4, #2
 80043ea:	2600      	movs	r6, #0
 80043ec:	42a6      	cmp	r6, r4
 80043ee:	d109      	bne.n	8004404 <__libc_init_array+0x24>
 80043f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004420 <__libc_init_array+0x40>)
 80043f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004424 <__libc_init_array+0x44>)
 80043f4:	f000 fc66 	bl	8004cc4 <_init>
 80043f8:	1b64      	subs	r4, r4, r5
 80043fa:	10a4      	asrs	r4, r4, #2
 80043fc:	2600      	movs	r6, #0
 80043fe:	42a6      	cmp	r6, r4
 8004400:	d105      	bne.n	800440e <__libc_init_array+0x2e>
 8004402:	bd70      	pop	{r4, r5, r6, pc}
 8004404:	f855 3b04 	ldr.w	r3, [r5], #4
 8004408:	4798      	blx	r3
 800440a:	3601      	adds	r6, #1
 800440c:	e7ee      	b.n	80043ec <__libc_init_array+0xc>
 800440e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004412:	4798      	blx	r3
 8004414:	3601      	adds	r6, #1
 8004416:	e7f2      	b.n	80043fe <__libc_init_array+0x1e>
 8004418:	08004d4c 	.word	0x08004d4c
 800441c:	08004d4c 	.word	0x08004d4c
 8004420:	08004d4c 	.word	0x08004d4c
 8004424:	08004d50 	.word	0x08004d50

08004428 <__retarget_lock_acquire_recursive>:
 8004428:	4770      	bx	lr

0800442a <__retarget_lock_release_recursive>:
 800442a:	4770      	bx	lr

0800442c <_free_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4605      	mov	r5, r0
 8004430:	2900      	cmp	r1, #0
 8004432:	d041      	beq.n	80044b8 <_free_r+0x8c>
 8004434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004438:	1f0c      	subs	r4, r1, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	18e4      	addlt	r4, r4, r3
 8004440:	f000 f8e0 	bl	8004604 <__malloc_lock>
 8004444:	4a1d      	ldr	r2, [pc, #116]	@ (80044bc <_free_r+0x90>)
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	b933      	cbnz	r3, 8004458 <_free_r+0x2c>
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	6014      	str	r4, [r2, #0]
 800444e:	4628      	mov	r0, r5
 8004450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004454:	f000 b8dc 	b.w	8004610 <__malloc_unlock>
 8004458:	42a3      	cmp	r3, r4
 800445a:	d908      	bls.n	800446e <_free_r+0x42>
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	1821      	adds	r1, r4, r0
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1809      	addeq	r1, r1, r0
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	e7ed      	b.n	800444a <_free_r+0x1e>
 800446e:	461a      	mov	r2, r3
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b10b      	cbz	r3, 8004478 <_free_r+0x4c>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d9fa      	bls.n	800446e <_free_r+0x42>
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	1850      	adds	r0, r2, r1
 800447c:	42a0      	cmp	r0, r4
 800447e:	d10b      	bne.n	8004498 <_free_r+0x6c>
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	4401      	add	r1, r0
 8004484:	1850      	adds	r0, r2, r1
 8004486:	4283      	cmp	r3, r0
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	d1e0      	bne.n	800444e <_free_r+0x22>
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	4408      	add	r0, r1
 8004494:	6010      	str	r0, [r2, #0]
 8004496:	e7da      	b.n	800444e <_free_r+0x22>
 8004498:	d902      	bls.n	80044a0 <_free_r+0x74>
 800449a:	230c      	movs	r3, #12
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	e7d6      	b.n	800444e <_free_r+0x22>
 80044a0:	6820      	ldr	r0, [r4, #0]
 80044a2:	1821      	adds	r1, r4, r0
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf04      	itt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	bf04      	itt	eq
 80044b0:	1809      	addeq	r1, r1, r0
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6054      	str	r4, [r2, #4]
 80044b6:	e7ca      	b.n	800444e <_free_r+0x22>
 80044b8:	bd38      	pop	{r3, r4, r5, pc}
 80044ba:	bf00      	nop
 80044bc:	20000378 	.word	0x20000378

080044c0 <sbrk_aligned>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0f      	ldr	r6, [pc, #60]	@ (8004500 <sbrk_aligned+0x40>)
 80044c4:	460c      	mov	r4, r1
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	4605      	mov	r5, r0
 80044ca:	b911      	cbnz	r1, 80044d2 <sbrk_aligned+0x12>
 80044cc:	f000 fba6 	bl	8004c1c <_sbrk_r>
 80044d0:	6030      	str	r0, [r6, #0]
 80044d2:	4621      	mov	r1, r4
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 fba1 	bl	8004c1c <_sbrk_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d103      	bne.n	80044e6 <sbrk_aligned+0x26>
 80044de:	f04f 34ff 	mov.w	r4, #4294967295
 80044e2:	4620      	mov	r0, r4
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
 80044e6:	1cc4      	adds	r4, r0, #3
 80044e8:	f024 0403 	bic.w	r4, r4, #3
 80044ec:	42a0      	cmp	r0, r4
 80044ee:	d0f8      	beq.n	80044e2 <sbrk_aligned+0x22>
 80044f0:	1a21      	subs	r1, r4, r0
 80044f2:	4628      	mov	r0, r5
 80044f4:	f000 fb92 	bl	8004c1c <_sbrk_r>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d1f2      	bne.n	80044e2 <sbrk_aligned+0x22>
 80044fc:	e7ef      	b.n	80044de <sbrk_aligned+0x1e>
 80044fe:	bf00      	nop
 8004500:	20000374 	.word	0x20000374

08004504 <_malloc_r>:
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	1ccd      	adds	r5, r1, #3
 800450a:	f025 0503 	bic.w	r5, r5, #3
 800450e:	3508      	adds	r5, #8
 8004510:	2d0c      	cmp	r5, #12
 8004512:	bf38      	it	cc
 8004514:	250c      	movcc	r5, #12
 8004516:	2d00      	cmp	r5, #0
 8004518:	4606      	mov	r6, r0
 800451a:	db01      	blt.n	8004520 <_malloc_r+0x1c>
 800451c:	42a9      	cmp	r1, r5
 800451e:	d904      	bls.n	800452a <_malloc_r+0x26>
 8004520:	230c      	movs	r3, #12
 8004522:	6033      	str	r3, [r6, #0]
 8004524:	2000      	movs	r0, #0
 8004526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800452a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004600 <_malloc_r+0xfc>
 800452e:	f000 f869 	bl	8004604 <__malloc_lock>
 8004532:	f8d8 3000 	ldr.w	r3, [r8]
 8004536:	461c      	mov	r4, r3
 8004538:	bb44      	cbnz	r4, 800458c <_malloc_r+0x88>
 800453a:	4629      	mov	r1, r5
 800453c:	4630      	mov	r0, r6
 800453e:	f7ff ffbf 	bl	80044c0 <sbrk_aligned>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	4604      	mov	r4, r0
 8004546:	d158      	bne.n	80045fa <_malloc_r+0xf6>
 8004548:	f8d8 4000 	ldr.w	r4, [r8]
 800454c:	4627      	mov	r7, r4
 800454e:	2f00      	cmp	r7, #0
 8004550:	d143      	bne.n	80045da <_malloc_r+0xd6>
 8004552:	2c00      	cmp	r4, #0
 8004554:	d04b      	beq.n	80045ee <_malloc_r+0xea>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	4639      	mov	r1, r7
 800455a:	4630      	mov	r0, r6
 800455c:	eb04 0903 	add.w	r9, r4, r3
 8004560:	f000 fb5c 	bl	8004c1c <_sbrk_r>
 8004564:	4581      	cmp	r9, r0
 8004566:	d142      	bne.n	80045ee <_malloc_r+0xea>
 8004568:	6821      	ldr	r1, [r4, #0]
 800456a:	1a6d      	subs	r5, r5, r1
 800456c:	4629      	mov	r1, r5
 800456e:	4630      	mov	r0, r6
 8004570:	f7ff ffa6 	bl	80044c0 <sbrk_aligned>
 8004574:	3001      	adds	r0, #1
 8004576:	d03a      	beq.n	80045ee <_malloc_r+0xea>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	442b      	add	r3, r5
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	f8d8 3000 	ldr.w	r3, [r8]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	bb62      	cbnz	r2, 80045e0 <_malloc_r+0xdc>
 8004586:	f8c8 7000 	str.w	r7, [r8]
 800458a:	e00f      	b.n	80045ac <_malloc_r+0xa8>
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	1b52      	subs	r2, r2, r5
 8004590:	d420      	bmi.n	80045d4 <_malloc_r+0xd0>
 8004592:	2a0b      	cmp	r2, #11
 8004594:	d917      	bls.n	80045c6 <_malloc_r+0xc2>
 8004596:	1961      	adds	r1, r4, r5
 8004598:	42a3      	cmp	r3, r4
 800459a:	6025      	str	r5, [r4, #0]
 800459c:	bf18      	it	ne
 800459e:	6059      	strne	r1, [r3, #4]
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	bf08      	it	eq
 80045a4:	f8c8 1000 	streq.w	r1, [r8]
 80045a8:	5162      	str	r2, [r4, r5]
 80045aa:	604b      	str	r3, [r1, #4]
 80045ac:	4630      	mov	r0, r6
 80045ae:	f000 f82f 	bl	8004610 <__malloc_unlock>
 80045b2:	f104 000b 	add.w	r0, r4, #11
 80045b6:	1d23      	adds	r3, r4, #4
 80045b8:	f020 0007 	bic.w	r0, r0, #7
 80045bc:	1ac2      	subs	r2, r0, r3
 80045be:	bf1c      	itt	ne
 80045c0:	1a1b      	subne	r3, r3, r0
 80045c2:	50a3      	strne	r3, [r4, r2]
 80045c4:	e7af      	b.n	8004526 <_malloc_r+0x22>
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	42a3      	cmp	r3, r4
 80045ca:	bf0c      	ite	eq
 80045cc:	f8c8 2000 	streq.w	r2, [r8]
 80045d0:	605a      	strne	r2, [r3, #4]
 80045d2:	e7eb      	b.n	80045ac <_malloc_r+0xa8>
 80045d4:	4623      	mov	r3, r4
 80045d6:	6864      	ldr	r4, [r4, #4]
 80045d8:	e7ae      	b.n	8004538 <_malloc_r+0x34>
 80045da:	463c      	mov	r4, r7
 80045dc:	687f      	ldr	r7, [r7, #4]
 80045de:	e7b6      	b.n	800454e <_malloc_r+0x4a>
 80045e0:	461a      	mov	r2, r3
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	d1fb      	bne.n	80045e0 <_malloc_r+0xdc>
 80045e8:	2300      	movs	r3, #0
 80045ea:	6053      	str	r3, [r2, #4]
 80045ec:	e7de      	b.n	80045ac <_malloc_r+0xa8>
 80045ee:	230c      	movs	r3, #12
 80045f0:	6033      	str	r3, [r6, #0]
 80045f2:	4630      	mov	r0, r6
 80045f4:	f000 f80c 	bl	8004610 <__malloc_unlock>
 80045f8:	e794      	b.n	8004524 <_malloc_r+0x20>
 80045fa:	6005      	str	r5, [r0, #0]
 80045fc:	e7d6      	b.n	80045ac <_malloc_r+0xa8>
 80045fe:	bf00      	nop
 8004600:	20000378 	.word	0x20000378

08004604 <__malloc_lock>:
 8004604:	4801      	ldr	r0, [pc, #4]	@ (800460c <__malloc_lock+0x8>)
 8004606:	f7ff bf0f 	b.w	8004428 <__retarget_lock_acquire_recursive>
 800460a:	bf00      	nop
 800460c:	20000370 	.word	0x20000370

08004610 <__malloc_unlock>:
 8004610:	4801      	ldr	r0, [pc, #4]	@ (8004618 <__malloc_unlock+0x8>)
 8004612:	f7ff bf0a 	b.w	800442a <__retarget_lock_release_recursive>
 8004616:	bf00      	nop
 8004618:	20000370 	.word	0x20000370

0800461c <__ssputs_r>:
 800461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004620:	688e      	ldr	r6, [r1, #8]
 8004622:	461f      	mov	r7, r3
 8004624:	42be      	cmp	r6, r7
 8004626:	680b      	ldr	r3, [r1, #0]
 8004628:	4682      	mov	sl, r0
 800462a:	460c      	mov	r4, r1
 800462c:	4690      	mov	r8, r2
 800462e:	d82d      	bhi.n	800468c <__ssputs_r+0x70>
 8004630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004634:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004638:	d026      	beq.n	8004688 <__ssputs_r+0x6c>
 800463a:	6965      	ldr	r5, [r4, #20]
 800463c:	6909      	ldr	r1, [r1, #16]
 800463e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004642:	eba3 0901 	sub.w	r9, r3, r1
 8004646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800464a:	1c7b      	adds	r3, r7, #1
 800464c:	444b      	add	r3, r9
 800464e:	106d      	asrs	r5, r5, #1
 8004650:	429d      	cmp	r5, r3
 8004652:	bf38      	it	cc
 8004654:	461d      	movcc	r5, r3
 8004656:	0553      	lsls	r3, r2, #21
 8004658:	d527      	bpl.n	80046aa <__ssputs_r+0x8e>
 800465a:	4629      	mov	r1, r5
 800465c:	f7ff ff52 	bl	8004504 <_malloc_r>
 8004660:	4606      	mov	r6, r0
 8004662:	b360      	cbz	r0, 80046be <__ssputs_r+0xa2>
 8004664:	6921      	ldr	r1, [r4, #16]
 8004666:	464a      	mov	r2, r9
 8004668:	f000 fae8 	bl	8004c3c <memcpy>
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	6126      	str	r6, [r4, #16]
 800467a:	6165      	str	r5, [r4, #20]
 800467c:	444e      	add	r6, r9
 800467e:	eba5 0509 	sub.w	r5, r5, r9
 8004682:	6026      	str	r6, [r4, #0]
 8004684:	60a5      	str	r5, [r4, #8]
 8004686:	463e      	mov	r6, r7
 8004688:	42be      	cmp	r6, r7
 800468a:	d900      	bls.n	800468e <__ssputs_r+0x72>
 800468c:	463e      	mov	r6, r7
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	4632      	mov	r2, r6
 8004692:	4641      	mov	r1, r8
 8004694:	f000 faa8 	bl	8004be8 <memmove>
 8004698:	68a3      	ldr	r3, [r4, #8]
 800469a:	1b9b      	subs	r3, r3, r6
 800469c:	60a3      	str	r3, [r4, #8]
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	4433      	add	r3, r6
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	2000      	movs	r0, #0
 80046a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046aa:	462a      	mov	r2, r5
 80046ac:	f000 fad4 	bl	8004c58 <_realloc_r>
 80046b0:	4606      	mov	r6, r0
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d1e0      	bne.n	8004678 <__ssputs_r+0x5c>
 80046b6:	6921      	ldr	r1, [r4, #16]
 80046b8:	4650      	mov	r0, sl
 80046ba:	f7ff feb7 	bl	800442c <_free_r>
 80046be:	230c      	movs	r3, #12
 80046c0:	f8ca 3000 	str.w	r3, [sl]
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ca:	81a3      	strh	r3, [r4, #12]
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	e7e9      	b.n	80046a6 <__ssputs_r+0x8a>
	...

080046d4 <_svfiprintf_r>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	4698      	mov	r8, r3
 80046da:	898b      	ldrh	r3, [r1, #12]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	b09d      	sub	sp, #116	@ 0x74
 80046e0:	4607      	mov	r7, r0
 80046e2:	460d      	mov	r5, r1
 80046e4:	4614      	mov	r4, r2
 80046e6:	d510      	bpl.n	800470a <_svfiprintf_r+0x36>
 80046e8:	690b      	ldr	r3, [r1, #16]
 80046ea:	b973      	cbnz	r3, 800470a <_svfiprintf_r+0x36>
 80046ec:	2140      	movs	r1, #64	@ 0x40
 80046ee:	f7ff ff09 	bl	8004504 <_malloc_r>
 80046f2:	6028      	str	r0, [r5, #0]
 80046f4:	6128      	str	r0, [r5, #16]
 80046f6:	b930      	cbnz	r0, 8004706 <_svfiprintf_r+0x32>
 80046f8:	230c      	movs	r3, #12
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	b01d      	add	sp, #116	@ 0x74
 8004702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004706:	2340      	movs	r3, #64	@ 0x40
 8004708:	616b      	str	r3, [r5, #20]
 800470a:	2300      	movs	r3, #0
 800470c:	9309      	str	r3, [sp, #36]	@ 0x24
 800470e:	2320      	movs	r3, #32
 8004710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004714:	f8cd 800c 	str.w	r8, [sp, #12]
 8004718:	2330      	movs	r3, #48	@ 0x30
 800471a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80048b8 <_svfiprintf_r+0x1e4>
 800471e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004722:	f04f 0901 	mov.w	r9, #1
 8004726:	4623      	mov	r3, r4
 8004728:	469a      	mov	sl, r3
 800472a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800472e:	b10a      	cbz	r2, 8004734 <_svfiprintf_r+0x60>
 8004730:	2a25      	cmp	r2, #37	@ 0x25
 8004732:	d1f9      	bne.n	8004728 <_svfiprintf_r+0x54>
 8004734:	ebba 0b04 	subs.w	fp, sl, r4
 8004738:	d00b      	beq.n	8004752 <_svfiprintf_r+0x7e>
 800473a:	465b      	mov	r3, fp
 800473c:	4622      	mov	r2, r4
 800473e:	4629      	mov	r1, r5
 8004740:	4638      	mov	r0, r7
 8004742:	f7ff ff6b 	bl	800461c <__ssputs_r>
 8004746:	3001      	adds	r0, #1
 8004748:	f000 80a7 	beq.w	800489a <_svfiprintf_r+0x1c6>
 800474c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800474e:	445a      	add	r2, fp
 8004750:	9209      	str	r2, [sp, #36]	@ 0x24
 8004752:	f89a 3000 	ldrb.w	r3, [sl]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 809f 	beq.w	800489a <_svfiprintf_r+0x1c6>
 800475c:	2300      	movs	r3, #0
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004766:	f10a 0a01 	add.w	sl, sl, #1
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004772:	931a      	str	r3, [sp, #104]	@ 0x68
 8004774:	4654      	mov	r4, sl
 8004776:	2205      	movs	r2, #5
 8004778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477c:	484e      	ldr	r0, [pc, #312]	@ (80048b8 <_svfiprintf_r+0x1e4>)
 800477e:	f7fb fd2f 	bl	80001e0 <memchr>
 8004782:	9a04      	ldr	r2, [sp, #16]
 8004784:	b9d8      	cbnz	r0, 80047be <_svfiprintf_r+0xea>
 8004786:	06d0      	lsls	r0, r2, #27
 8004788:	bf44      	itt	mi
 800478a:	2320      	movmi	r3, #32
 800478c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004790:	0711      	lsls	r1, r2, #28
 8004792:	bf44      	itt	mi
 8004794:	232b      	movmi	r3, #43	@ 0x2b
 8004796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800479a:	f89a 3000 	ldrb.w	r3, [sl]
 800479e:	2b2a      	cmp	r3, #42	@ 0x2a
 80047a0:	d015      	beq.n	80047ce <_svfiprintf_r+0xfa>
 80047a2:	9a07      	ldr	r2, [sp, #28]
 80047a4:	4654      	mov	r4, sl
 80047a6:	2000      	movs	r0, #0
 80047a8:	f04f 0c0a 	mov.w	ip, #10
 80047ac:	4621      	mov	r1, r4
 80047ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b2:	3b30      	subs	r3, #48	@ 0x30
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d94b      	bls.n	8004850 <_svfiprintf_r+0x17c>
 80047b8:	b1b0      	cbz	r0, 80047e8 <_svfiprintf_r+0x114>
 80047ba:	9207      	str	r2, [sp, #28]
 80047bc:	e014      	b.n	80047e8 <_svfiprintf_r+0x114>
 80047be:	eba0 0308 	sub.w	r3, r0, r8
 80047c2:	fa09 f303 	lsl.w	r3, r9, r3
 80047c6:	4313      	orrs	r3, r2
 80047c8:	9304      	str	r3, [sp, #16]
 80047ca:	46a2      	mov	sl, r4
 80047cc:	e7d2      	b.n	8004774 <_svfiprintf_r+0xa0>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	1d19      	adds	r1, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9103      	str	r1, [sp, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bfbb      	ittet	lt
 80047da:	425b      	neglt	r3, r3
 80047dc:	f042 0202 	orrlt.w	r2, r2, #2
 80047e0:	9307      	strge	r3, [sp, #28]
 80047e2:	9307      	strlt	r3, [sp, #28]
 80047e4:	bfb8      	it	lt
 80047e6:	9204      	strlt	r2, [sp, #16]
 80047e8:	7823      	ldrb	r3, [r4, #0]
 80047ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80047ec:	d10a      	bne.n	8004804 <_svfiprintf_r+0x130>
 80047ee:	7863      	ldrb	r3, [r4, #1]
 80047f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80047f2:	d132      	bne.n	800485a <_svfiprintf_r+0x186>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	9203      	str	r2, [sp, #12]
 80047fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004800:	3402      	adds	r4, #2
 8004802:	9305      	str	r3, [sp, #20]
 8004804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048c8 <_svfiprintf_r+0x1f4>
 8004808:	7821      	ldrb	r1, [r4, #0]
 800480a:	2203      	movs	r2, #3
 800480c:	4650      	mov	r0, sl
 800480e:	f7fb fce7 	bl	80001e0 <memchr>
 8004812:	b138      	cbz	r0, 8004824 <_svfiprintf_r+0x150>
 8004814:	9b04      	ldr	r3, [sp, #16]
 8004816:	eba0 000a 	sub.w	r0, r0, sl
 800481a:	2240      	movs	r2, #64	@ 0x40
 800481c:	4082      	lsls	r2, r0
 800481e:	4313      	orrs	r3, r2
 8004820:	3401      	adds	r4, #1
 8004822:	9304      	str	r3, [sp, #16]
 8004824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004828:	4824      	ldr	r0, [pc, #144]	@ (80048bc <_svfiprintf_r+0x1e8>)
 800482a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800482e:	2206      	movs	r2, #6
 8004830:	f7fb fcd6 	bl	80001e0 <memchr>
 8004834:	2800      	cmp	r0, #0
 8004836:	d036      	beq.n	80048a6 <_svfiprintf_r+0x1d2>
 8004838:	4b21      	ldr	r3, [pc, #132]	@ (80048c0 <_svfiprintf_r+0x1ec>)
 800483a:	bb1b      	cbnz	r3, 8004884 <_svfiprintf_r+0x1b0>
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	3307      	adds	r3, #7
 8004840:	f023 0307 	bic.w	r3, r3, #7
 8004844:	3308      	adds	r3, #8
 8004846:	9303      	str	r3, [sp, #12]
 8004848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800484a:	4433      	add	r3, r6
 800484c:	9309      	str	r3, [sp, #36]	@ 0x24
 800484e:	e76a      	b.n	8004726 <_svfiprintf_r+0x52>
 8004850:	fb0c 3202 	mla	r2, ip, r2, r3
 8004854:	460c      	mov	r4, r1
 8004856:	2001      	movs	r0, #1
 8004858:	e7a8      	b.n	80047ac <_svfiprintf_r+0xd8>
 800485a:	2300      	movs	r3, #0
 800485c:	3401      	adds	r4, #1
 800485e:	9305      	str	r3, [sp, #20]
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 0c0a 	mov.w	ip, #10
 8004866:	4620      	mov	r0, r4
 8004868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800486c:	3a30      	subs	r2, #48	@ 0x30
 800486e:	2a09      	cmp	r2, #9
 8004870:	d903      	bls.n	800487a <_svfiprintf_r+0x1a6>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0c6      	beq.n	8004804 <_svfiprintf_r+0x130>
 8004876:	9105      	str	r1, [sp, #20]
 8004878:	e7c4      	b.n	8004804 <_svfiprintf_r+0x130>
 800487a:	fb0c 2101 	mla	r1, ip, r1, r2
 800487e:	4604      	mov	r4, r0
 8004880:	2301      	movs	r3, #1
 8004882:	e7f0      	b.n	8004866 <_svfiprintf_r+0x192>
 8004884:	ab03      	add	r3, sp, #12
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	462a      	mov	r2, r5
 800488a:	4b0e      	ldr	r3, [pc, #56]	@ (80048c4 <_svfiprintf_r+0x1f0>)
 800488c:	a904      	add	r1, sp, #16
 800488e:	4638      	mov	r0, r7
 8004890:	f3af 8000 	nop.w
 8004894:	1c42      	adds	r2, r0, #1
 8004896:	4606      	mov	r6, r0
 8004898:	d1d6      	bne.n	8004848 <_svfiprintf_r+0x174>
 800489a:	89ab      	ldrh	r3, [r5, #12]
 800489c:	065b      	lsls	r3, r3, #25
 800489e:	f53f af2d 	bmi.w	80046fc <_svfiprintf_r+0x28>
 80048a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048a4:	e72c      	b.n	8004700 <_svfiprintf_r+0x2c>
 80048a6:	ab03      	add	r3, sp, #12
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	462a      	mov	r2, r5
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <_svfiprintf_r+0x1f0>)
 80048ae:	a904      	add	r1, sp, #16
 80048b0:	4638      	mov	r0, r7
 80048b2:	f000 f879 	bl	80049a8 <_printf_i>
 80048b6:	e7ed      	b.n	8004894 <_svfiprintf_r+0x1c0>
 80048b8:	08004d10 	.word	0x08004d10
 80048bc:	08004d1a 	.word	0x08004d1a
 80048c0:	00000000 	.word	0x00000000
 80048c4:	0800461d 	.word	0x0800461d
 80048c8:	08004d16 	.word	0x08004d16

080048cc <_printf_common>:
 80048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	4616      	mov	r6, r2
 80048d2:	4698      	mov	r8, r3
 80048d4:	688a      	ldr	r2, [r1, #8]
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048dc:	4293      	cmp	r3, r2
 80048de:	bfb8      	it	lt
 80048e0:	4613      	movlt	r3, r2
 80048e2:	6033      	str	r3, [r6, #0]
 80048e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048e8:	4607      	mov	r7, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	b10a      	cbz	r2, 80048f2 <_printf_common+0x26>
 80048ee:	3301      	adds	r3, #1
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	0699      	lsls	r1, r3, #26
 80048f6:	bf42      	ittt	mi
 80048f8:	6833      	ldrmi	r3, [r6, #0]
 80048fa:	3302      	addmi	r3, #2
 80048fc:	6033      	strmi	r3, [r6, #0]
 80048fe:	6825      	ldr	r5, [r4, #0]
 8004900:	f015 0506 	ands.w	r5, r5, #6
 8004904:	d106      	bne.n	8004914 <_printf_common+0x48>
 8004906:	f104 0a19 	add.w	sl, r4, #25
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	6832      	ldr	r2, [r6, #0]
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	42ab      	cmp	r3, r5
 8004912:	dc26      	bgt.n	8004962 <_printf_common+0x96>
 8004914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004918:	6822      	ldr	r2, [r4, #0]
 800491a:	3b00      	subs	r3, #0
 800491c:	bf18      	it	ne
 800491e:	2301      	movne	r3, #1
 8004920:	0692      	lsls	r2, r2, #26
 8004922:	d42b      	bmi.n	800497c <_printf_common+0xb0>
 8004924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004928:	4641      	mov	r1, r8
 800492a:	4638      	mov	r0, r7
 800492c:	47c8      	blx	r9
 800492e:	3001      	adds	r0, #1
 8004930:	d01e      	beq.n	8004970 <_printf_common+0xa4>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	f003 0306 	and.w	r3, r3, #6
 800493a:	2b04      	cmp	r3, #4
 800493c:	bf02      	ittt	eq
 800493e:	68e5      	ldreq	r5, [r4, #12]
 8004940:	6833      	ldreq	r3, [r6, #0]
 8004942:	1aed      	subeq	r5, r5, r3
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	bf0c      	ite	eq
 8004948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800494c:	2500      	movne	r5, #0
 800494e:	4293      	cmp	r3, r2
 8004950:	bfc4      	itt	gt
 8004952:	1a9b      	subgt	r3, r3, r2
 8004954:	18ed      	addgt	r5, r5, r3
 8004956:	2600      	movs	r6, #0
 8004958:	341a      	adds	r4, #26
 800495a:	42b5      	cmp	r5, r6
 800495c:	d11a      	bne.n	8004994 <_printf_common+0xc8>
 800495e:	2000      	movs	r0, #0
 8004960:	e008      	b.n	8004974 <_printf_common+0xa8>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4641      	mov	r1, r8
 8004968:	4638      	mov	r0, r7
 800496a:	47c8      	blx	r9
 800496c:	3001      	adds	r0, #1
 800496e:	d103      	bne.n	8004978 <_printf_common+0xac>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	3501      	adds	r5, #1
 800497a:	e7c6      	b.n	800490a <_printf_common+0x3e>
 800497c:	18e1      	adds	r1, r4, r3
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	2030      	movs	r0, #48	@ 0x30
 8004982:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004986:	4422      	add	r2, r4
 8004988:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800498c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004990:	3302      	adds	r3, #2
 8004992:	e7c7      	b.n	8004924 <_printf_common+0x58>
 8004994:	2301      	movs	r3, #1
 8004996:	4622      	mov	r2, r4
 8004998:	4641      	mov	r1, r8
 800499a:	4638      	mov	r0, r7
 800499c:	47c8      	blx	r9
 800499e:	3001      	adds	r0, #1
 80049a0:	d0e6      	beq.n	8004970 <_printf_common+0xa4>
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7d9      	b.n	800495a <_printf_common+0x8e>
	...

080049a8 <_printf_i>:
 80049a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	7e0f      	ldrb	r7, [r1, #24]
 80049ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049b0:	2f78      	cmp	r7, #120	@ 0x78
 80049b2:	4691      	mov	r9, r2
 80049b4:	4680      	mov	r8, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	469a      	mov	sl, r3
 80049ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049be:	d807      	bhi.n	80049d0 <_printf_i+0x28>
 80049c0:	2f62      	cmp	r7, #98	@ 0x62
 80049c2:	d80a      	bhi.n	80049da <_printf_i+0x32>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	f000 80d2 	beq.w	8004b6e <_printf_i+0x1c6>
 80049ca:	2f58      	cmp	r7, #88	@ 0x58
 80049cc:	f000 80b9 	beq.w	8004b42 <_printf_i+0x19a>
 80049d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049d8:	e03a      	b.n	8004a50 <_printf_i+0xa8>
 80049da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049de:	2b15      	cmp	r3, #21
 80049e0:	d8f6      	bhi.n	80049d0 <_printf_i+0x28>
 80049e2:	a101      	add	r1, pc, #4	@ (adr r1, 80049e8 <_printf_i+0x40>)
 80049e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a55 	.word	0x08004a55
 80049f0:	080049d1 	.word	0x080049d1
 80049f4:	080049d1 	.word	0x080049d1
 80049f8:	080049d1 	.word	0x080049d1
 80049fc:	080049d1 	.word	0x080049d1
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	080049d1 	.word	0x080049d1
 8004a08:	080049d1 	.word	0x080049d1
 8004a0c:	080049d1 	.word	0x080049d1
 8004a10:	080049d1 	.word	0x080049d1
 8004a14:	08004b55 	.word	0x08004b55
 8004a18:	08004a7f 	.word	0x08004a7f
 8004a1c:	08004b0f 	.word	0x08004b0f
 8004a20:	080049d1 	.word	0x080049d1
 8004a24:	080049d1 	.word	0x080049d1
 8004a28:	08004b77 	.word	0x08004b77
 8004a2c:	080049d1 	.word	0x080049d1
 8004a30:	08004a7f 	.word	0x08004a7f
 8004a34:	080049d1 	.word	0x080049d1
 8004a38:	080049d1 	.word	0x080049d1
 8004a3c:	08004b17 	.word	0x08004b17
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6032      	str	r2, [r6, #0]
 8004a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a50:	2301      	movs	r3, #1
 8004a52:	e09d      	b.n	8004b90 <_printf_i+0x1e8>
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	6820      	ldr	r0, [r4, #0]
 8004a58:	1d19      	adds	r1, r3, #4
 8004a5a:	6031      	str	r1, [r6, #0]
 8004a5c:	0606      	lsls	r6, r0, #24
 8004a5e:	d501      	bpl.n	8004a64 <_printf_i+0xbc>
 8004a60:	681d      	ldr	r5, [r3, #0]
 8004a62:	e003      	b.n	8004a6c <_printf_i+0xc4>
 8004a64:	0645      	lsls	r5, r0, #25
 8004a66:	d5fb      	bpl.n	8004a60 <_printf_i+0xb8>
 8004a68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	da03      	bge.n	8004a78 <_printf_i+0xd0>
 8004a70:	232d      	movs	r3, #45	@ 0x2d
 8004a72:	426d      	negs	r5, r5
 8004a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a78:	4859      	ldr	r0, [pc, #356]	@ (8004be0 <_printf_i+0x238>)
 8004a7a:	230a      	movs	r3, #10
 8004a7c:	e011      	b.n	8004aa2 <_printf_i+0xfa>
 8004a7e:	6821      	ldr	r1, [r4, #0]
 8004a80:	6833      	ldr	r3, [r6, #0]
 8004a82:	0608      	lsls	r0, r1, #24
 8004a84:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a88:	d402      	bmi.n	8004a90 <_printf_i+0xe8>
 8004a8a:	0649      	lsls	r1, r1, #25
 8004a8c:	bf48      	it	mi
 8004a8e:	b2ad      	uxthmi	r5, r5
 8004a90:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a92:	4853      	ldr	r0, [pc, #332]	@ (8004be0 <_printf_i+0x238>)
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	bf14      	ite	ne
 8004a98:	230a      	movne	r3, #10
 8004a9a:	2308      	moveq	r3, #8
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aa2:	6866      	ldr	r6, [r4, #4]
 8004aa4:	60a6      	str	r6, [r4, #8]
 8004aa6:	2e00      	cmp	r6, #0
 8004aa8:	bfa2      	ittt	ge
 8004aaa:	6821      	ldrge	r1, [r4, #0]
 8004aac:	f021 0104 	bicge.w	r1, r1, #4
 8004ab0:	6021      	strge	r1, [r4, #0]
 8004ab2:	b90d      	cbnz	r5, 8004ab8 <_printf_i+0x110>
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	d04b      	beq.n	8004b50 <_printf_i+0x1a8>
 8004ab8:	4616      	mov	r6, r2
 8004aba:	fbb5 f1f3 	udiv	r1, r5, r3
 8004abe:	fb03 5711 	mls	r7, r3, r1, r5
 8004ac2:	5dc7      	ldrb	r7, [r0, r7]
 8004ac4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ac8:	462f      	mov	r7, r5
 8004aca:	42bb      	cmp	r3, r7
 8004acc:	460d      	mov	r5, r1
 8004ace:	d9f4      	bls.n	8004aba <_printf_i+0x112>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d10b      	bne.n	8004aec <_printf_i+0x144>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	07df      	lsls	r7, r3, #31
 8004ad8:	d508      	bpl.n	8004aec <_printf_i+0x144>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6861      	ldr	r1, [r4, #4]
 8004ade:	4299      	cmp	r1, r3
 8004ae0:	bfde      	ittt	le
 8004ae2:	2330      	movle	r3, #48	@ 0x30
 8004ae4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ae8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aec:	1b92      	subs	r2, r2, r6
 8004aee:	6122      	str	r2, [r4, #16]
 8004af0:	f8cd a000 	str.w	sl, [sp]
 8004af4:	464b      	mov	r3, r9
 8004af6:	aa03      	add	r2, sp, #12
 8004af8:	4621      	mov	r1, r4
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff fee6 	bl	80048cc <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d14a      	bne.n	8004b9a <_printf_i+0x1f2>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	b004      	add	sp, #16
 8004b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	f043 0320 	orr.w	r3, r3, #32
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	4833      	ldr	r0, [pc, #204]	@ (8004be4 <_printf_i+0x23c>)
 8004b18:	2778      	movs	r7, #120	@ 0x78
 8004b1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	6831      	ldr	r1, [r6, #0]
 8004b22:	061f      	lsls	r7, r3, #24
 8004b24:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b28:	d402      	bmi.n	8004b30 <_printf_i+0x188>
 8004b2a:	065f      	lsls	r7, r3, #25
 8004b2c:	bf48      	it	mi
 8004b2e:	b2ad      	uxthmi	r5, r5
 8004b30:	6031      	str	r1, [r6, #0]
 8004b32:	07d9      	lsls	r1, r3, #31
 8004b34:	bf44      	itt	mi
 8004b36:	f043 0320 	orrmi.w	r3, r3, #32
 8004b3a:	6023      	strmi	r3, [r4, #0]
 8004b3c:	b11d      	cbz	r5, 8004b46 <_printf_i+0x19e>
 8004b3e:	2310      	movs	r3, #16
 8004b40:	e7ac      	b.n	8004a9c <_printf_i+0xf4>
 8004b42:	4827      	ldr	r0, [pc, #156]	@ (8004be0 <_printf_i+0x238>)
 8004b44:	e7e9      	b.n	8004b1a <_printf_i+0x172>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f023 0320 	bic.w	r3, r3, #32
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	e7f6      	b.n	8004b3e <_printf_i+0x196>
 8004b50:	4616      	mov	r6, r2
 8004b52:	e7bd      	b.n	8004ad0 <_printf_i+0x128>
 8004b54:	6833      	ldr	r3, [r6, #0]
 8004b56:	6825      	ldr	r5, [r4, #0]
 8004b58:	6961      	ldr	r1, [r4, #20]
 8004b5a:	1d18      	adds	r0, r3, #4
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	062e      	lsls	r6, r5, #24
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	d501      	bpl.n	8004b68 <_printf_i+0x1c0>
 8004b64:	6019      	str	r1, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <_printf_i+0x1c6>
 8004b68:	0668      	lsls	r0, r5, #25
 8004b6a:	d5fb      	bpl.n	8004b64 <_printf_i+0x1bc>
 8004b6c:	8019      	strh	r1, [r3, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	4616      	mov	r6, r2
 8004b74:	e7bc      	b.n	8004af0 <_printf_i+0x148>
 8004b76:	6833      	ldr	r3, [r6, #0]
 8004b78:	1d1a      	adds	r2, r3, #4
 8004b7a:	6032      	str	r2, [r6, #0]
 8004b7c:	681e      	ldr	r6, [r3, #0]
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4630      	mov	r0, r6
 8004b84:	f7fb fb2c 	bl	80001e0 <memchr>
 8004b88:	b108      	cbz	r0, 8004b8e <_printf_i+0x1e6>
 8004b8a:	1b80      	subs	r0, r0, r6
 8004b8c:	6060      	str	r0, [r4, #4]
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	2300      	movs	r3, #0
 8004b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b98:	e7aa      	b.n	8004af0 <_printf_i+0x148>
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	47d0      	blx	sl
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d0ad      	beq.n	8004b04 <_printf_i+0x15c>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	d413      	bmi.n	8004bd6 <_printf_i+0x22e>
 8004bae:	68e0      	ldr	r0, [r4, #12]
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	bfb8      	it	lt
 8004bb6:	4618      	movlt	r0, r3
 8004bb8:	e7a6      	b.n	8004b08 <_printf_i+0x160>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	47d0      	blx	sl
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d09d      	beq.n	8004b04 <_printf_i+0x15c>
 8004bc8:	3501      	adds	r5, #1
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	9903      	ldr	r1, [sp, #12]
 8004bce:	1a5b      	subs	r3, r3, r1
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	dcf2      	bgt.n	8004bba <_printf_i+0x212>
 8004bd4:	e7eb      	b.n	8004bae <_printf_i+0x206>
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	f104 0619 	add.w	r6, r4, #25
 8004bdc:	e7f5      	b.n	8004bca <_printf_i+0x222>
 8004bde:	bf00      	nop
 8004be0:	08004d21 	.word	0x08004d21
 8004be4:	08004d32 	.word	0x08004d32

08004be8 <memmove>:
 8004be8:	4288      	cmp	r0, r1
 8004bea:	b510      	push	{r4, lr}
 8004bec:	eb01 0402 	add.w	r4, r1, r2
 8004bf0:	d902      	bls.n	8004bf8 <memmove+0x10>
 8004bf2:	4284      	cmp	r4, r0
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	d807      	bhi.n	8004c08 <memmove+0x20>
 8004bf8:	1e43      	subs	r3, r0, #1
 8004bfa:	42a1      	cmp	r1, r4
 8004bfc:	d008      	beq.n	8004c10 <memmove+0x28>
 8004bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c06:	e7f8      	b.n	8004bfa <memmove+0x12>
 8004c08:	4402      	add	r2, r0
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	428a      	cmp	r2, r1
 8004c0e:	d100      	bne.n	8004c12 <memmove+0x2a>
 8004c10:	bd10      	pop	{r4, pc}
 8004c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c1a:	e7f7      	b.n	8004c0c <memmove+0x24>

08004c1c <_sbrk_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4d06      	ldr	r5, [pc, #24]	@ (8004c38 <_sbrk_r+0x1c>)
 8004c20:	2300      	movs	r3, #0
 8004c22:	4604      	mov	r4, r0
 8004c24:	4608      	mov	r0, r1
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	f7fc fce4 	bl	80015f4 <_sbrk>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_sbrk_r+0x1a>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_sbrk_r+0x1a>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	2000036c 	.word	0x2000036c

08004c3c <memcpy>:
 8004c3c:	440a      	add	r2, r1
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c44:	d100      	bne.n	8004c48 <memcpy+0xc>
 8004c46:	4770      	bx	lr
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c52:	4291      	cmp	r1, r2
 8004c54:	d1f9      	bne.n	8004c4a <memcpy+0xe>
 8004c56:	bd10      	pop	{r4, pc}

08004c58 <_realloc_r>:
 8004c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	4615      	mov	r5, r2
 8004c60:	460c      	mov	r4, r1
 8004c62:	b921      	cbnz	r1, 8004c6e <_realloc_r+0x16>
 8004c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f7ff bc4b 	b.w	8004504 <_malloc_r>
 8004c6e:	b92a      	cbnz	r2, 8004c7c <_realloc_r+0x24>
 8004c70:	f7ff fbdc 	bl	800442c <_free_r>
 8004c74:	2400      	movs	r4, #0
 8004c76:	4620      	mov	r0, r4
 8004c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7c:	f000 f81a 	bl	8004cb4 <_malloc_usable_size_r>
 8004c80:	4285      	cmp	r5, r0
 8004c82:	4606      	mov	r6, r0
 8004c84:	d802      	bhi.n	8004c8c <_realloc_r+0x34>
 8004c86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c8a:	d8f4      	bhi.n	8004c76 <_realloc_r+0x1e>
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f7ff fc38 	bl	8004504 <_malloc_r>
 8004c94:	4607      	mov	r7, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0ec      	beq.n	8004c74 <_realloc_r+0x1c>
 8004c9a:	42b5      	cmp	r5, r6
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	bf28      	it	cs
 8004ca2:	4632      	movcs	r2, r6
 8004ca4:	f7ff ffca 	bl	8004c3c <memcpy>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4640      	mov	r0, r8
 8004cac:	f7ff fbbe 	bl	800442c <_free_r>
 8004cb0:	463c      	mov	r4, r7
 8004cb2:	e7e0      	b.n	8004c76 <_realloc_r+0x1e>

08004cb4 <_malloc_usable_size_r>:
 8004cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb8:	1f18      	subs	r0, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bfbc      	itt	lt
 8004cbe:	580b      	ldrlt	r3, [r1, r0]
 8004cc0:	18c0      	addlt	r0, r0, r3
 8004cc2:	4770      	bx	lr

08004cc4 <_init>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	bf00      	nop
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr

08004cd0 <_fini>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr
