
projekt_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005778  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005918  08005918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b4  080059b4  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  080059b4  080059b4  000069b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059bc  080059bc  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080059c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000078  08005a3c  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005a3c  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d52e  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001def  00000000  00000000  000145d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000163c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  00017098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016638  00000000  00000000  00017aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7ce  00000000  00000000  0002e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eab3  00000000  00000000  0003c8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb361  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b28  00000000  00000000  000cb3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ceecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005900 	.word	0x08005900

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005900 	.word	0x08005900

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <convert_to_cm>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t convert_to_cm(uint32_t distance_us)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	return (distance_us / 58);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <convert_to_cm+0x20>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	095b      	lsrs	r3, r3, #5
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	8d3dcb09 	.word	0x8d3dcb09

080005c4 <median_filter>:

/* HC-SR-04 AND SERVO */
uint32_t median_filter(uint32_t *array) {
 80005c4:	b480      	push	{r7}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	for (int i=0; i<2; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	e02e      	b.n	8000630 <median_filter+0x6c>
		for (int j=i+1; j<3; j++) {
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	e024      	b.n	8000624 <median_filter+0x60>
			if (array[j] < array[i])
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	440b      	add	r3, r1
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d215      	bcs.n	800061e <median_filter+0x5a>
			{
				temp = array[j];
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
				array[j] = array[i];
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	441a      	add	r2, r3
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	440b      	add	r3, r1
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	601a      	str	r2, [r3, #0]
				array[i] = temp;
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	601a      	str	r2, [r3, #0]
		for (int j=i+1; j<3; j++) {
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	3301      	adds	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	2b02      	cmp	r3, #2
 8000628:	ddd7      	ble.n	80005da <median_filter+0x16>
	for (int i=0; i<2; i++) {
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	2b01      	cmp	r3, #1
 8000634:	ddcd      	ble.n	80005d2 <median_filter+0xe>
			}
		}
	}
	return array[2];
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
}
 800063a:	4618      	mov	r0, r3
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <servo_scan_left>:



void servo_scan_left() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	servo_angle_ms += 10;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <servo_scan_left+0x24>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	330a      	adds	r3, #10
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <servo_scan_left+0x24>)
 8000656:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, servo_angle_ms);
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <servo_scan_left+0x24>)
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <servo_scan_left+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(20);
 8000662:	2014      	movs	r0, #20
 8000664:	f001 f9ec 	bl	8001a40 <HAL_Delay>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000002 	.word	0x20000002
 8000670:	20000124 	.word	0x20000124

08000674 <servo_scan_right>:

void servo_scan_right() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	servo_angle_ms -= 10;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <servo_scan_right+0x24>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	3b0a      	subs	r3, #10
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <servo_scan_right+0x24>)
 8000682:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, servo_angle_ms);
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <servo_scan_right+0x24>)
 8000686:	881a      	ldrh	r2, [r3, #0]
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <servo_scan_right+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(20);
 800068e:	2014      	movs	r0, #20
 8000690:	f001 f9d6 	bl	8001a40 <HAL_Delay>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000002 	.word	0x20000002
 800069c:	20000124 	.word	0x20000124

080006a0 <servo_center>:

void servo_center() {
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	servo_angle_ms = 1500;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <servo_center+0x20>)
 80006a6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80006aa:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, servo_angle_ms);
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <servo_center+0x20>)
 80006ae:	881a      	ldrh	r2, [r3, #0]
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <servo_center+0x24>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	20000002 	.word	0x20000002
 80006c4:	20000124 	.word	0x20000124

080006c8 <move>:
		HAL_Delay(30);
	}
	current_power = speed;
}

void move(uint16_t speed) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
	//if (current_power < speed)
	//	accelerate(speed);

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speed);
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <move+0x3c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, speed);
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <move+0x3c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, speed);
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <move+0x3c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	88fa      	ldrh	r2, [r7, #6]
 80006e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, speed);
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <move+0x3c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	88fa      	ldrh	r2, [r7, #6]
 80006f0:	641a      	str	r2, [r3, #64]	@ 0x40
	current_power = speed;
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <move+0x40>)
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	8013      	strh	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	2000016c 	.word	0x2000016c
 8000708:	20000244 	.word	0x20000244

0800070c <stop>:

void stop() {
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <stop+0x34>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <stop+0x34>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <stop+0x34>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <stop+0x34>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2200      	movs	r2, #0
 800072e:	641a      	str	r2, [r3, #64]	@ 0x40
	current_power = 0;
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <stop+0x38>)
 8000732:	2200      	movs	r2, #0
 8000734:	801a      	strh	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	2000016c 	.word	0x2000016c
 8000744:	20000244 	.word	0x20000244

08000748 <turn_forward>:

void turn_forward() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2102      	movs	r1, #2
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <turn_forward+0x58>)
 8000752:	f001 fcd9 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2110      	movs	r1, #16
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <turn_forward+0x58>)
 800075c:	f001 fcd4 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	480f      	ldr	r0, [pc, #60]	@ (80007a4 <turn_forward+0x5c>)
 8000766:	f001 fccf 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2102      	movs	r1, #2
 800076e:	480e      	ldr	r0, [pc, #56]	@ (80007a8 <turn_forward+0x60>)
 8000770:	f001 fcca 	bl	8002108 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <turn_forward+0x60>)
 800077a:	f001 fcc5 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <turn_forward+0x5c>)
 8000784:	f001 fcc0 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <turn_forward+0x5c>)
 800078e:	f001 fcbb 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <turn_forward+0x60>)
 8000798:	f001 fcb6 	bl	8002108 <HAL_GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800

080007ac <turn_backwards>:

void turn_backwards() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2102      	movs	r1, #2
 80007b4:	4813      	ldr	r0, [pc, #76]	@ (8000804 <turn_backwards+0x58>)
 80007b6:	f001 fca7 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2110      	movs	r1, #16
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <turn_backwards+0x58>)
 80007c0:	f001 fca2 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	480f      	ldr	r0, [pc, #60]	@ (8000808 <turn_backwards+0x5c>)
 80007ca:	f001 fc9d 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2102      	movs	r1, #2
 80007d2:	480e      	ldr	r0, [pc, #56]	@ (800080c <turn_backwards+0x60>)
 80007d4:	f001 fc98 	bl	8002108 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <turn_backwards+0x60>)
 80007de:	f001 fc93 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2120      	movs	r1, #32
 80007e6:	4808      	ldr	r0, [pc, #32]	@ (8000808 <turn_backwards+0x5c>)
 80007e8:	f001 fc8e 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <turn_backwards+0x5c>)
 80007f2:	f001 fc89 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2180      	movs	r1, #128	@ 0x80
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <turn_backwards+0x60>)
 80007fc:	f001 fc84 	bl	8002108 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40020000 	.word	0x40020000
 8000808:	40020400 	.word	0x40020400
 800080c:	40020800 	.word	0x40020800

08000810 <turn_left>:

void turn_left() {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2102      	movs	r1, #2
 8000818:	4813      	ldr	r0, [pc, #76]	@ (8000868 <turn_left+0x58>)
 800081a:	f001 fc75 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	2110      	movs	r1, #16
 8000822:	4811      	ldr	r0, [pc, #68]	@ (8000868 <turn_left+0x58>)
 8000824:	f001 fc70 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2101      	movs	r1, #1
 800082c:	480f      	ldr	r0, [pc, #60]	@ (800086c <turn_left+0x5c>)
 800082e:	f001 fc6b 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 1);
 8000832:	2201      	movs	r2, #1
 8000834:	2102      	movs	r1, #2
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <turn_left+0x60>)
 8000838:	f001 fc66 	bl	8002108 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2101      	movs	r1, #1
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <turn_left+0x60>)
 8000842:	f001 fc61 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	2120      	movs	r1, #32
 800084a:	4808      	ldr	r0, [pc, #32]	@ (800086c <turn_left+0x5c>)
 800084c:	f001 fc5c 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2110      	movs	r1, #16
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <turn_left+0x5c>)
 8000856:	f001 fc57 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	2180      	movs	r1, #128	@ 0x80
 800085e:	4804      	ldr	r0, [pc, #16]	@ (8000870 <turn_left+0x60>)
 8000860:	f001 fc52 	bl	8002108 <HAL_GPIO_WritePin>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020000 	.word	0x40020000
 800086c:	40020400 	.word	0x40020400
 8000870:	40020800 	.word	0x40020800

08000874 <turn_right>:

void turn_right() {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(F_IN1_GPIO_Port, F_IN1_Pin, 1);
 8000878:	2201      	movs	r2, #1
 800087a:	2102      	movs	r1, #2
 800087c:	4813      	ldr	r0, [pc, #76]	@ (80008cc <turn_right+0x58>)
 800087e:	f001 fc43 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN2_GPIO_Port, F_IN2_Pin, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2110      	movs	r1, #16
 8000886:	4811      	ldr	r0, [pc, #68]	@ (80008cc <turn_right+0x58>)
 8000888:	f001 fc3e 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN3_GPIO_Port, F_IN3_Pin, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	480f      	ldr	r0, [pc, #60]	@ (80008d0 <turn_right+0x5c>)
 8000892:	f001 fc39 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_IN4_GPIO_Port, F_IN4_Pin, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	480e      	ldr	r0, [pc, #56]	@ (80008d4 <turn_right+0x60>)
 800089c:	f001 fc34 	bl	8002108 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <turn_right+0x60>)
 80008a6:	f001 fc2f 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	4808      	ldr	r0, [pc, #32]	@ (80008d0 <turn_right+0x5c>)
 80008b0:	f001 fc2a 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN3_GPIO_Port, R_IN3_Pin, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <turn_right+0x5c>)
 80008ba:	f001 fc25 	bl	8002108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_IN4_GPIO_Port, R_IN4_Pin, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <turn_right+0x60>)
 80008c4:	f001 fc20 	bl	8002108 <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020800 	.word	0x40020800

080008d8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a37      	ldr	r2, [pc, #220]	@ (80009c4 <HAL_TIM_IC_CaptureCallback+0xec>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d167      	bne.n	80009ba <HAL_TIM_IC_CaptureCallback+0xe2>
	{

		uint32_t echo_value;
		echo_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80008ea:	2104      	movs	r1, #4
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f002 fdb7 	bl	8003460 <HAL_TIM_ReadCapturedValue>
 80008f2:	60f8      	str	r0, [r7, #12]
		echo_value = convert_to_cm(echo_value);
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe53 	bl	80005a0 <convert_to_cm>
 80008fa:	60f8      	str	r0, [r7, #12]

		captured_distances[number_of_measurements++] = echo_value;
 80008fc:	4b32      	ldr	r3, [pc, #200]	@ (80009c8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	b2d1      	uxtb	r1, r2
 8000904:	4a30      	ldr	r2, [pc, #192]	@ (80009c8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000906:	7011      	strb	r1, [r2, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4a30      	ldr	r2, [pc, #192]	@ (80009cc <HAL_TIM_IC_CaptureCallback+0xf4>)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if(number_of_measurements > 2 && continue_measuring) {
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d94f      	bls.n	80009ba <HAL_TIM_IC_CaptureCallback+0xe2>
 800091a:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d04b      	beq.n	80009ba <HAL_TIM_IC_CaptureCallback+0xe2>
			distance_cm = median_filter(captured_distances);
 8000922:	482a      	ldr	r0, [pc, #168]	@ (80009cc <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000924:	f7ff fe4e 	bl	80005c4 <median_filter>
 8000928:	4603      	mov	r3, r0
 800092a:	4a2a      	ldr	r2, [pc, #168]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800092c:	6013      	str	r3, [r2, #0]
			number_of_measurements = 0;
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
			size = sprintf(buffer, "value=%lu\n\r", distance_cm);
 8000934:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4927      	ldr	r1, [pc, #156]	@ (80009d8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800093c:	4827      	ldr	r0, [pc, #156]	@ (80009dc <HAL_TIM_IC_CaptureCallback+0x104>)
 800093e:	f004 fb3f 	bl	8004fc0 <siprintf>
 8000942:	4603      	mov	r3, r0
 8000944:	4a26      	ldr	r2, [pc, #152]	@ (80009e0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000946:	6013      	str	r3, [r2, #0]

			if (abs(last_distance - distance_cm) <= 25 && distance_cm < 100 && signal_start == 1) {
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	f113 0f19 	cmn.w	r3, #25
 8000956:	db1c      	blt.n	8000992 <HAL_TIM_IC_CaptureCallback+0xba>
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b19      	cmp	r3, #25
 8000964:	dc15      	bgt.n	8000992 <HAL_TIM_IC_CaptureCallback+0xba>
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b63      	cmp	r3, #99	@ 0x63
 800096c:	d811      	bhi.n	8000992 <HAL_TIM_IC_CaptureCallback+0xba>
 800096e:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10d      	bne.n	8000992 <HAL_TIM_IC_CaptureCallback+0xba>
				no_same_distances++;
 8000976:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8000980:	801a      	strh	r2, [r3, #0]
				if(no_same_distances >= 10) {
 8000982:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b09      	cmp	r3, #9
 8000988:	d906      	bls.n	8000998 <HAL_TIM_IC_CaptureCallback+0xc0>
					signal_stop = 1;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
				if(no_same_distances >= 10) {
 8000990:	e002      	b.n	8000998 <HAL_TIM_IC_CaptureCallback+0xc0>
				}

			}
			else {
				no_same_distances = 0;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8000994:	2200      	movs	r2, #0
 8000996:	801a      	strh	r2, [r3, #0]
			}

			//HAL_UART_Transmit(&huart2, (uint8_t*)&buffer, size, 500);
			if (distance_cm <= 30 && signal_start) {
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b1e      	cmp	r3, #30
 800099e:	d808      	bhi.n	80009b2 <HAL_TIM_IC_CaptureCallback+0xda>
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d004      	beq.n	80009b2 <HAL_TIM_IC_CaptureCallback+0xda>
				//continue_measuring = 0;
				signal_stop = 1;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
				stop();
 80009ae:	f7ff fead 	bl	800070c <stop>
				//HAL_UART_Transmit(&huart2, "STOP\n\r", 6, 500);
			}
			last_distance = distance_cm;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80009b8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010000 	.word	0x40010000
 80009c8:	20000258 	.word	0x20000258
 80009cc:	2000024c 	.word	0x2000024c
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000248 	.word	0x20000248
 80009d8:	0800594c 	.word	0x0800594c
 80009dc:	20000264 	.word	0x20000264
 80009e0:	20000284 	.word	0x20000284
 80009e4:	2000025c 	.word	0x2000025c
 80009e8:	20000288 	.word	0x20000288
 80009ec:	20000260 	.word	0x20000260
 80009f0:	20000259 	.word	0x20000259

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b089      	sub	sp, #36	@ 0x24
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fa:	f000 ffaf 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fe:	f000 f981 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a02:	f000 fbeb 	bl	80011dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a06:	f000 fbbf 	bl	8001188 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000a0a:	f000 fb19 	bl	8001040 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000a0e:	f000 f9e1 	bl	8000dd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a12:	f000 fa63 	bl	8000edc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a16:	f000 fab9 	bl	8000f8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a1a:	f000 fb8b 	bl	8001134 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	48a8      	ldr	r0, [pc, #672]	@ (8000cc4 <main+0x2d0>)
 8000a22:	f002 f873 	bl	8002b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a26:	2104      	movs	r1, #4
 8000a28:	48a6      	ldr	r0, [pc, #664]	@ (8000cc4 <main+0x2d0>)
 8000a2a:	f002 f86f 	bl	8002b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a2e:	2108      	movs	r1, #8
 8000a30:	48a4      	ldr	r0, [pc, #656]	@ (8000cc4 <main+0x2d0>)
 8000a32:	f002 f86b 	bl	8002b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a36:	210c      	movs	r1, #12
 8000a38:	48a2      	ldr	r0, [pc, #648]	@ (8000cc4 <main+0x2d0>)
 8000a3a:	f002 f867 	bl	8002b0c <HAL_TIM_PWM_Start>
  uint16_t time = 1500;
 8000a3e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a42:	813b      	strh	r3, [r7, #8]
  uint16_t power = 300;
 8000a44:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a48:	80fb      	strh	r3, [r7, #6]

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	489e      	ldr	r0, [pc, #632]	@ (8000cc8 <main+0x2d4>)
 8000a4e:	f002 f95d 	bl	8002d0c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a52:	2108      	movs	r1, #8
 8000a54:	489d      	ldr	r0, [pc, #628]	@ (8000ccc <main+0x2d8>)
 8000a56:	f002 f859 	bl	8002b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	489c      	ldr	r0, [pc, #624]	@ (8000cd0 <main+0x2dc>)
 8000a5e:	f002 f855 	bl	8002b0c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &recv_char, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	499b      	ldr	r1, [pc, #620]	@ (8000cd4 <main+0x2e0>)
 8000a66:	489c      	ldr	r0, [pc, #624]	@ (8000cd8 <main+0x2e4>)
 8000a68:	f003 fb2f 	bl	80040ca <HAL_UART_Receive_IT>

  HAL_Delay(1000);
 8000a6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a70:	f000 ffe6 	bl	8001a40 <HAL_Delay>
  uint8_t check_left = 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	77fb      	strb	r3, [r7, #31]
  uint32_t mean_value_left = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  uint32_t mean_value_right = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  uint32_t last_measured_value = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  uint16_t measures_while_scanning = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
  uint16_t max_left_value = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	81bb      	strh	r3, [r7, #12]
  uint16_t max_right_value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	817b      	strh	r3, [r7, #10]
  uint16_t servo_left_max = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	80bb      	strh	r3, [r7, #4]
  uint16_t servo_right_max = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	807b      	strh	r3, [r7, #2]
  //servo_scan_left();
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 1500);
 8000a98:	4b8d      	ldr	r3, [pc, #564]	@ (8000cd0 <main+0x2dc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000aa0:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_Delay(1250);
 8000aa2:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8000aa6:	f000 ffcb 	bl	8001a40 <HAL_Delay>
  //stop();


  HAL_UART_Transmit(&huart2, "LEFT\n\r", 6, 500); //go left
 8000aaa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000aae:	2206      	movs	r2, #6
 8000ab0:	498a      	ldr	r1, [pc, #552]	@ (8000cdc <main+0x2e8>)
 8000ab2:	488b      	ldr	r0, [pc, #556]	@ (8000ce0 <main+0x2ec>)
 8000ab4:	f003 fa7e 	bl	8003fb4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*)demo_string, strlen(demo_string), HAL_MAX_DELAY);
 8000ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8000ce4 <main+0x2f0>)
 8000aba:	681c      	ldr	r4, [r3, #0]
 8000abc:	4b89      	ldr	r3, [pc, #548]	@ (8000ce4 <main+0x2f0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fb97 	bl	80001f4 <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	4621      	mov	r1, r4
 8000ad0:	4881      	ldr	r0, [pc, #516]	@ (8000cd8 <main+0x2e4>)
 8000ad2:	f003 fa6f 	bl	8003fb4 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1, (uint8_t*)demo_string, strlen(demo_string), HAL_MAX_DELAY);

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000ad6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ada:	4883      	ldr	r0, [pc, #524]	@ (8000ce8 <main+0x2f4>)
 8000adc:	f001 fafc 	bl	80020d8 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d107      	bne.n	8000af6 <main+0x102>
		  signal_start = 1;
 8000ae6:	4b81      	ldr	r3, [pc, #516]	@ (8000cec <main+0x2f8>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2120      	movs	r1, #32
 8000af0:	487f      	ldr	r0, [pc, #508]	@ (8000cf0 <main+0x2fc>)
 8000af2:	f001 fb09 	bl	8002108 <HAL_GPIO_WritePin>
	  }


	  if (signal_stop && signal_start) {
 8000af6:	4b7f      	ldr	r3, [pc, #508]	@ (8000cf4 <main+0x300>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80c8 	beq.w	8000c90 <main+0x29c>
 8000b00:	4b7a      	ldr	r3, [pc, #488]	@ (8000cec <main+0x2f8>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80c3 	beq.w	8000c90 <main+0x29c>
		  stop();
 8000b0a:	f7ff fdff 	bl	800070c <stop>
		  if (check_left == 1) {
 8000b0e:	7ffb      	ldrb	r3, [r7, #31]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d130      	bne.n	8000b76 <main+0x182>
			  if (servo_angle_ms < 2500) {
 8000b14:	4b78      	ldr	r3, [pc, #480]	@ (8000cf8 <main+0x304>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d81c      	bhi.n	8000b5a <main+0x166>
				  servo_scan_left();
 8000b20:	f7ff fd92 	bl	8000648 <servo_scan_left>
				  if (last_measured_value != distance_cm)
 8000b24:	4b75      	ldr	r3, [pc, #468]	@ (8000cfc <main+0x308>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	f000 80c8 	beq.w	8000cc0 <main+0x2cc>
				  {
					  last_measured_value = distance_cm;
 8000b30:	4b72      	ldr	r3, [pc, #456]	@ (8000cfc <main+0x308>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	613b      	str	r3, [r7, #16]
					  if (last_measured_value > max_left_value) {
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d904      	bls.n	8000b48 <main+0x154>
						  max_left_value = last_measured_value;
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	81bb      	strh	r3, [r7, #12]
						  servo_left_max = servo_angle_ms;
 8000b42:	4b6d      	ldr	r3, [pc, #436]	@ (8000cf8 <main+0x304>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	80bb      	strh	r3, [r7, #4]
					  }
					  mean_value_left += distance_cm;
 8000b48:	4b6c      	ldr	r3, [pc, #432]	@ (8000cfc <main+0x308>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4413      	add	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
					  measures_while_scanning++;
 8000b52:	89fb      	ldrh	r3, [r7, #14]
 8000b54:	3301      	adds	r3, #1
 8000b56:	81fb      	strh	r3, [r7, #14]
		  if (check_left == 1) {
 8000b58:	e0b2      	b.n	8000cc0 <main+0x2cc>
				  }
			  }
			  else {
				  mean_value_left = mean_value_left / measures_while_scanning;
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	61bb      	str	r3, [r7, #24]
				  measures_while_scanning = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	81fb      	strh	r3, [r7, #14]
				  last_measured_value = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
				  check_left = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	77fb      	strb	r3, [r7, #31]
				  servo_center();
 8000b70:	f7ff fd96 	bl	80006a0 <servo_center>
		  if (check_left == 1) {
 8000b74:	e0a4      	b.n	8000cc0 <main+0x2cc>
			  }
		  }

		  else if (check_left == 0) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d12f      	bne.n	8000bdc <main+0x1e8>

			  if (servo_angle_ms > 500) {
 8000b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf8 <main+0x304>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b84:	d91c      	bls.n	8000bc0 <main+0x1cc>
				  servo_scan_right();
 8000b86:	f7ff fd75 	bl	8000674 <servo_scan_right>
				  if (last_measured_value != distance_cm)
 8000b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000cfc <main+0x308>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f000 8095 	beq.w	8000cc0 <main+0x2cc>
				  {
					  last_measured_value = distance_cm;
 8000b96:	4b59      	ldr	r3, [pc, #356]	@ (8000cfc <main+0x308>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	613b      	str	r3, [r7, #16]
					  if (last_measured_value > max_right_value) {
 8000b9c:	897b      	ldrh	r3, [r7, #10]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d904      	bls.n	8000bae <main+0x1ba>
						  max_right_value = last_measured_value;
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	817b      	strh	r3, [r7, #10]
						  servo_right_max = servo_angle_ms;
 8000ba8:	4b53      	ldr	r3, [pc, #332]	@ (8000cf8 <main+0x304>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	807b      	strh	r3, [r7, #2]
					  }
					  mean_value_right += distance_cm;
 8000bae:	4b53      	ldr	r3, [pc, #332]	@ (8000cfc <main+0x308>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
					  measures_while_scanning++;
 8000bb8:	89fb      	ldrh	r3, [r7, #14]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	81fb      	strh	r3, [r7, #14]
		  if (check_left == 1) {
 8000bbe:	e07f      	b.n	8000cc0 <main+0x2cc>
				  }
			  }
			  else {
				  mean_value_right = mean_value_right / measures_while_scanning;
 8000bc0:	89fb      	ldrh	r3, [r7, #14]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc8:	617b      	str	r3, [r7, #20]
				  measures_while_scanning = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	81fb      	strh	r3, [r7, #14]
				  last_measured_value = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
				  check_left = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	77fb      	strb	r3, [r7, #31]
				  servo_center();
 8000bd6:	f7ff fd63 	bl	80006a0 <servo_center>
		  if (check_left == 1) {
 8000bda:	e071      	b.n	8000cc0 <main+0x2cc>
			  }
		  }

		  else {
			  turn_backwards();
 8000bdc:	f7ff fde6 	bl	80007ac <turn_backwards>
			  move(300);
 8000be0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000be4:	f7ff fd70 	bl	80006c8 <move>
			  HAL_Delay(150);
 8000be8:	2096      	movs	r0, #150	@ 0x96
 8000bea:	f000 ff29 	bl	8001a40 <HAL_Delay>
			  if (mean_value_left > mean_value_right) {
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d919      	bls.n	8000c2a <main+0x236>
				  HAL_UART_Transmit(&huart2, "LEFT\n\r", 6, 500); //go left
 8000bf6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bfa:	2206      	movs	r2, #6
 8000bfc:	4937      	ldr	r1, [pc, #220]	@ (8000cdc <main+0x2e8>)
 8000bfe:	4838      	ldr	r0, [pc, #224]	@ (8000ce0 <main+0x2ec>)
 8000c00:	f003 f9d8 	bl	8003fb4 <HAL_UART_Transmit>
				  turn_left();
 8000c04:	f7ff fe04 	bl	8000810 <turn_left>
				  do {
					  move(450);
 8000c08:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000c0c:	f7ff fd5c 	bl	80006c8 <move>
					  HAL_Delay(250);
 8000c10:	20fa      	movs	r0, #250	@ 0xfa
 8000c12:	f000 ff15 	bl	8001a40 <HAL_Delay>
				  } while (distance_cm < max_right_value && distance_cm < 40);
 8000c16:	897a      	ldrh	r2, [r7, #10]
 8000c18:	4b38      	ldr	r3, [pc, #224]	@ (8000cfc <main+0x308>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d91d      	bls.n	8000c5c <main+0x268>
 8000c20:	4b36      	ldr	r3, [pc, #216]	@ (8000cfc <main+0x308>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b27      	cmp	r3, #39	@ 0x27
 8000c26:	d9ef      	bls.n	8000c08 <main+0x214>
 8000c28:	e018      	b.n	8000c5c <main+0x268>
			  }

			  else {
				  HAL_UART_Transmit(&huart2, "RIGHT\n\r", 7, 500); //go right
 8000c2a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c2e:	2207      	movs	r2, #7
 8000c30:	4933      	ldr	r1, [pc, #204]	@ (8000d00 <main+0x30c>)
 8000c32:	482b      	ldr	r0, [pc, #172]	@ (8000ce0 <main+0x2ec>)
 8000c34:	f003 f9be 	bl	8003fb4 <HAL_UART_Transmit>
				  turn_right();
 8000c38:	f7ff fe1c 	bl	8000874 <turn_right>
				  do {
					  move(450);
 8000c3c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000c40:	f7ff fd42 	bl	80006c8 <move>
					  HAL_Delay(250);
 8000c44:	20fa      	movs	r0, #250	@ 0xfa
 8000c46:	f000 fefb 	bl	8001a40 <HAL_Delay>

				  } while (distance_cm < max_right_value && distance_cm < 40);
 8000c4a:	897a      	ldrh	r2, [r7, #10]
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <main+0x308>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d903      	bls.n	8000c5c <main+0x268>
 8000c54:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <main+0x308>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b27      	cmp	r3, #39	@ 0x27
 8000c5a:	d9ef      	bls.n	8000c3c <main+0x248>
			  }
			  stop();
 8000c5c:	f7ff fd56 	bl	800070c <stop>

			  turn_forward();
 8000c60:	f7ff fd72 	bl	8000748 <turn_forward>

			  mean_value_right = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
			  mean_value_left = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
			  measures_while_scanning = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	81fb      	strh	r3, [r7, #14]
			  last_measured_value = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
			  check_left = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	77fb      	strb	r3, [r7, #31]
			  max_left_value = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	81bb      	strh	r3, [r7, #12]
			  max_right_value = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	817b      	strh	r3, [r7, #10]
			  servo_left_max = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	80bb      	strh	r3, [r7, #4]
			  servo_right_max = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	807b      	strh	r3, [r7, #2]
			  signal_stop = 0;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <main+0x300>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
		  if (check_left == 1) {
 8000c8e:	e017      	b.n	8000cc0 <main+0x2cc>

		  }

	  }

	  else if (signal_start){
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <main+0x2f8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f43f af1e 	beq.w	8000ad6 <main+0xe2>
		  turn_forward();
 8000c9a:	f7ff fd55 	bl	8000748 <turn_forward>
		  if (distance_cm < 40 && distance_cm > 25)
 8000c9e:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <main+0x308>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b27      	cmp	r3, #39	@ 0x27
 8000ca4:	d807      	bhi.n	8000cb6 <main+0x2c2>
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <main+0x308>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b19      	cmp	r3, #25
 8000cac:	d903      	bls.n	8000cb6 <main+0x2c2>
			  move(200);
 8000cae:	20c8      	movs	r0, #200	@ 0xc8
 8000cb0:	f7ff fd0a 	bl	80006c8 <move>
 8000cb4:	e005      	b.n	8000cc2 <main+0x2ce>
		  else
			  move(power);
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fd05 	bl	80006c8 <move>
 8000cbe:	e70a      	b.n	8000ad6 <main+0xe2>
		  if (check_left == 1) {
 8000cc0:	bf00      	nop
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000cc2:	e708      	b.n	8000ad6 <main+0xe2>
 8000cc4:	2000016c 	.word	0x2000016c
 8000cc8:	20000094 	.word	0x20000094
 8000ccc:	200000dc 	.word	0x200000dc
 8000cd0:	20000124 	.word	0x20000124
 8000cd4:	20000289 	.word	0x20000289
 8000cd8:	200001b4 	.word	0x200001b4
 8000cdc:	08005958 	.word	0x08005958
 8000ce0:	200001fc 	.word	0x200001fc
 8000ce4:	20000004 	.word	0x20000004
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	20000288 	.word	0x20000288
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	20000259 	.word	0x20000259
 8000cf8:	20000002 	.word	0x20000002
 8000cfc:	20000248 	.word	0x20000248
 8000d00:	08005960 	.word	0x08005960

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	@ 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2230      	movs	r2, #48	@ 0x30
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f004 f974 	bl	8005000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <SystemClock_Config+0xc8>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	4a26      	ldr	r2, [pc, #152]	@ (8000dcc <SystemClock_Config+0xc8>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d38:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <SystemClock_Config+0xc8>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <SystemClock_Config+0xcc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a20      	ldr	r2, [pc, #128]	@ (8000dd0 <SystemClock_Config+0xcc>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <SystemClock_Config+0xcc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d60:	2302      	movs	r3, #2
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d74:	2308      	movs	r3, #8
 8000d76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000d78:	2350      	movs	r3, #80	@ 0x50
 8000d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f9d7 	bl	800213c <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d94:	f000 fb56 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2102      	movs	r1, #2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fc39 	bl	800262c <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dc0:	f000 fb40 	bl	8001444 <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3750      	adds	r7, #80	@ 0x50
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e00:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e02:	4a35      	ldr	r2, [pc, #212]	@ (8000ed8 <MX_TIM1_Init+0x104>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e08:	224f      	movs	r2, #79	@ 0x4f
 8000e0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e12:	4b30      	ldr	r3, [pc, #192]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000e2c:	4829      	ldr	r0, [pc, #164]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e2e:	f001 ff1d 	bl	8002c6c <HAL_TIM_IC_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000e38:	f000 fb04 	bl	8001444 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e40:	2350      	movs	r3, #80	@ 0x50
 8000e42:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	481f      	ldr	r0, [pc, #124]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e58:	f002 fac0 	bl	80033dc <HAL_TIM_SlaveConfigSynchro>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e62:	f000 faef 	bl	8001444 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4815      	ldr	r0, [pc, #84]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000e80:	f002 f94e 	bl	8003120 <HAL_TIM_IC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000e8a:	f000 fadb 	bl	8001444 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e92:	2302      	movs	r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000ea0:	f002 f93e 	bl	8003120 <HAL_TIM_IC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000eaa:	f000 facb 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <MX_TIM1_Init+0x100>)
 8000ebc:	f002 ffa8 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ec6:	f000 fabd 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	@ 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000094 	.word	0x20000094
 8000ed8:	40010000 	.word	0x40010000

08000edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efe:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f08:	224f      	movs	r2, #79	@ 0x4f
 8000f0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f14:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000f18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f26:	4818      	ldr	r0, [pc, #96]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f28:	f001 fda0 	bl	8002a6c <HAL_TIM_PWM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f32:	f000 fa87 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f46:	f002 ff63 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f50:	f000 fa78 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f54:	2360      	movs	r3, #96	@ 0x60
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000f58:	230a      	movs	r3, #10
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2208      	movs	r2, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f6c:	f002 f974 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f76:	f000 fa65 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f7a:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <MX_TIM2_Init+0xac>)
 8000f7c:	f000 fb2c 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000dc 	.word	0x200000dc

08000f8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000fb0:	4a22      	ldr	r2, [pc, #136]	@ (800103c <MX_TIM3_Init+0xb0>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000fb6:	224f      	movs	r2, #79	@ 0x4f
 8000fb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000fc2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000fc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fd4:	4818      	ldr	r0, [pc, #96]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000fd6:	f001 fd49 	bl	8002a6c <HAL_TIM_PWM_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000fe0:	f000 fa30 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4811      	ldr	r0, [pc, #68]	@ (8001038 <MX_TIM3_Init+0xac>)
 8000ff4:	f002 ff0c 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ffe:	f000 fa21 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001002:	2360      	movs	r3, #96	@ 0x60
 8001004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2204      	movs	r2, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	@ (8001038 <MX_TIM3_Init+0xac>)
 800101a:	f002 f91d 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001024:	f000 fa0e 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001028:	4803      	ldr	r0, [pc, #12]	@ (8001038 <MX_TIM3_Init+0xac>)
 800102a:	f000 fad5 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000124 	.word	0x20000124
 800103c:	40000400 	.word	0x40000400

08001040 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001062:	4b32      	ldr	r3, [pc, #200]	@ (800112c <MX_TIM4_Init+0xec>)
 8001064:	4a32      	ldr	r2, [pc, #200]	@ (8001130 <MX_TIM4_Init+0xf0>)
 8001066:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001068:	4b30      	ldr	r3, [pc, #192]	@ (800112c <MX_TIM4_Init+0xec>)
 800106a:	2253      	movs	r2, #83	@ 0x53
 800106c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <MX_TIM4_Init+0xec>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8001074:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <MX_TIM4_Init+0xec>)
 8001076:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800107a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b2b      	ldr	r3, [pc, #172]	@ (800112c <MX_TIM4_Init+0xec>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <MX_TIM4_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001088:	4828      	ldr	r0, [pc, #160]	@ (800112c <MX_TIM4_Init+0xec>)
 800108a:	f001 fcef 	bl	8002a6c <HAL_TIM_PWM_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001094:	f000 f9d6 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4619      	mov	r1, r3
 80010a6:	4821      	ldr	r0, [pc, #132]	@ (800112c <MX_TIM4_Init+0xec>)
 80010a8:	f002 feb2 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80010b2:	f000 f9c7 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	@ 0x60
 80010b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4817      	ldr	r0, [pc, #92]	@ (800112c <MX_TIM4_Init+0xec>)
 80010ce:	f002 f8c3 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80010d8:	f000 f9b4 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2204      	movs	r2, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4812      	ldr	r0, [pc, #72]	@ (800112c <MX_TIM4_Init+0xec>)
 80010e4:	f002 f8b8 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010ee:	f000 f9a9 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <MX_TIM4_Init+0xec>)
 80010fa:	f002 f8ad 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001104:	f000 f99e 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	220c      	movs	r2, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <MX_TIM4_Init+0xec>)
 8001110:	f002 f8a2 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800111a:	f000 f993 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800111e:	4803      	ldr	r0, [pc, #12]	@ (800112c <MX_TIM4_Init+0xec>)
 8001120:	f000 fa5a 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000016c 	.word	0x2000016c
 8001130:	40000800 	.word	0x40000800

08001134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <MX_USART1_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 8001140:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_USART1_UART_Init+0x4c>)
 800116c:	f002 fed2 	bl	8003f14 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f000 f965 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001b4 	.word	0x200001b4
 8001184:	40011000 	.word	0x40011000

08001188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <MX_USART2_UART_Init+0x50>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 8001194:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f002 fea8 	bl	8003f14 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ca:	f000 f93b 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001fc 	.word	0x200001fc
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a3f      	ldr	r2, [pc, #252]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b3d      	ldr	r3, [pc, #244]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b39      	ldr	r3, [pc, #228]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a38      	ldr	r2, [pc, #224]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b36      	ldr	r3, [pc, #216]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a31      	ldr	r2, [pc, #196]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b2f      	ldr	r3, [pc, #188]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a2a      	ldr	r2, [pc, #168]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <MX_GPIO_Init+0x11c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_IN1_Pin|F_IN4_Pin|R_IN4_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2183      	movs	r1, #131	@ 0x83
 8001266:	4825      	ldr	r0, [pc, #148]	@ (80012fc <MX_GPIO_Init+0x120>)
 8001268:	f000 ff4e 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, F_IN1_Pin|F_IN2_Pin|LD2_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2132      	movs	r1, #50	@ 0x32
 8001270:	4823      	ldr	r0, [pc, #140]	@ (8001300 <MX_GPIO_Init+0x124>)
 8001272:	f000 ff49 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_IN3_Pin|R_IN3_Pin|R_IN2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2131      	movs	r1, #49	@ 0x31
 800127a:	4822      	ldr	r0, [pc, #136]	@ (8001304 <MX_GPIO_Init+0x128>)
 800127c:	f000 ff44 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001280:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4819      	ldr	r0, [pc, #100]	@ (80012fc <MX_GPIO_Init+0x120>)
 8001296:	f000 fd9b 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_IN1_Pin F_IN4_Pin R_IN4_Pin */
  GPIO_InitStruct.Pin = R_IN1_Pin|F_IN4_Pin|R_IN4_Pin;
 800129a:	2383      	movs	r3, #131	@ 0x83
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4812      	ldr	r0, [pc, #72]	@ (80012fc <MX_GPIO_Init+0x120>)
 80012b2:	f000 fd8d 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_IN1_Pin F_IN2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = F_IN1_Pin|F_IN2_Pin|LD2_Pin;
 80012b6:	2332      	movs	r3, #50	@ 0x32
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <MX_GPIO_Init+0x124>)
 80012ce:	f000 fd7f 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_IN3_Pin R_IN3_Pin R_IN2_Pin */
  GPIO_InitStruct.Pin = F_IN3_Pin|R_IN3_Pin|R_IN2_Pin;
 80012d2:	2331      	movs	r3, #49	@ 0x31
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <MX_GPIO_Init+0x128>)
 80012ea:	f000 fd71 	bl	8001dd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	@ 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1 ){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a3f      	ldr	r2, [pc, #252]	@ (8001414 <HAL_UART_RxCpltCallback+0x10c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d178      	bne.n	800140c <HAL_UART_RxCpltCallback+0x104>
        if(recv_char == '\r'){
 800131a:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <HAL_UART_RxCpltCallback+0x110>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b0d      	cmp	r3, #13
 8001320:	d15e      	bne.n	80013e0 <HAL_UART_RxCpltCallback+0xd8>

	    HAL_UART_Transmit(&huart2, recv_str, i, HAL_MAX_DELAY);
 8001322:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <HAL_UART_RxCpltCallback+0x114>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29a      	uxth	r2, r3
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	493c      	ldr	r1, [pc, #240]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 800132e:	483d      	ldr	r0, [pc, #244]	@ (8001424 <HAL_UART_RxCpltCallback+0x11c>)
 8001330:	f002 fe40 	bl	8003fb4 <HAL_UART_Transmit>

	    	if(!strcmp(recv_str, forward)) {
 8001334:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <HAL_UART_RxCpltCallback+0x120>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4839      	ldr	r0, [pc, #228]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 800133c:	f7fe ff50 	bl	80001e0 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <HAL_UART_RxCpltCallback+0x4a>
	    		turn_forward();
 8001346:	f7ff f9ff 	bl	8000748 <turn_forward>
	    		move(350);
 800134a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800134e:	f7ff f9bb 	bl	80006c8 <move>
	    		//HAL_Delay(500);
	    		//stop();
	    	}

	    	if(!strcmp(recv_str, backwards)) {
 8001352:	4b36      	ldr	r3, [pc, #216]	@ (800142c <HAL_UART_RxCpltCallback+0x124>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4831      	ldr	r0, [pc, #196]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 800135a:	f7fe ff41 	bl	80001e0 <strcmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <HAL_UART_RxCpltCallback+0x68>
	    		turn_backwards();
 8001364:	f7ff fa22 	bl	80007ac <turn_backwards>
	    		move(350);
 8001368:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800136c:	f7ff f9ac 	bl	80006c8 <move>
	    		//HAL_Delay(500);
	    		//stop();
	    	}

	    	if(!strcmp(recv_str, left)) {
 8001370:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <HAL_UART_RxCpltCallback+0x128>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	482a      	ldr	r0, [pc, #168]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 8001378:	f7fe ff32 	bl	80001e0 <strcmp>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <HAL_UART_RxCpltCallback+0x86>
	    		//sprintf(recv_str, "stop");
	    		turn_left();
 8001382:	f7ff fa45 	bl	8000810 <turn_left>
	    		move(450);
 8001386:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800138a:	f7ff f99d 	bl	80006c8 <move>
	    		//HAL_Delay(500);
	    		//stop();
	    		//sprintf(recv_str, "stop");
	    	}

	    	if(!strcmp(recv_str, right)) {
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <HAL_UART_RxCpltCallback+0x12c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4822      	ldr	r0, [pc, #136]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 8001396:	f7fe ff23 	bl	80001e0 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d105      	bne.n	80013ac <HAL_UART_RxCpltCallback+0xa4>
	    		//sprintf(recv_str, "stop");
	    		turn_right();
 80013a0:	f7ff fa68 	bl	8000874 <turn_right>
	    		move(450);
 80013a4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80013a8:	f7ff f98e 	bl	80006c8 <move>
	    		//HAL_Delay(500);
	    		//stop();

	    	}

	    	if(!strcmp(recv_str, ble_stop)) {
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <HAL_UART_RxCpltCallback+0x130>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	481b      	ldr	r0, [pc, #108]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 80013b4:	f7fe ff14 	bl	80001e0 <strcmp>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d105      	bne.n	80013ca <HAL_UART_RxCpltCallback+0xc2>
	    		stop();
 80013be:	f7ff f9a5 	bl	800070c <stop>
	    		sprintf(recv_str, "stop");
 80013c2:	491e      	ldr	r1, [pc, #120]	@ (800143c <HAL_UART_RxCpltCallback+0x134>)
 80013c4:	4816      	ldr	r0, [pc, #88]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 80013c6:	f003 fdfb 	bl	8004fc0 <siprintf>
	    	}


			memset(recv_str, 0, i);
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_UART_RxCpltCallback+0x114>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	4813      	ldr	r0, [pc, #76]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 80013d4:	f003 fe14 	bl	8005000 <memset>
			i=0;
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_UART_RxCpltCallback+0x114>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e010      	b.n	8001402 <HAL_UART_RxCpltCallback+0xfa>
		}
        else {
		    if(recv_char == '\r' || recv_char == '\n'){
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <HAL_UART_RxCpltCallback+0x110>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b0d      	cmp	r3, #13
 80013e6:	d00c      	beq.n	8001402 <HAL_UART_RxCpltCallback+0xfa>
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_UART_RxCpltCallback+0x110>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b0a      	cmp	r3, #10
 80013ee:	d008      	beq.n	8001402 <HAL_UART_RxCpltCallback+0xfa>
		}
		    else{
		    recv_str[i++] = recv_char;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_UART_RxCpltCallback+0x114>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	4909      	ldr	r1, [pc, #36]	@ (800141c <HAL_UART_RxCpltCallback+0x114>)
 80013f8:	600a      	str	r2, [r1, #0]
 80013fa:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <HAL_UART_RxCpltCallback+0x110>)
 80013fc:	7811      	ldrb	r1, [r2, #0]
 80013fe:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 8001400:	54d1      	strb	r1, [r2, r3]
		}
	 }
	 HAL_UART_Receive_IT(&huart1, &recv_char, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	4904      	ldr	r1, [pc, #16]	@ (8001418 <HAL_UART_RxCpltCallback+0x110>)
 8001406:	480e      	ldr	r0, [pc, #56]	@ (8001440 <HAL_UART_RxCpltCallback+0x138>)
 8001408:	f002 fe5f 	bl	80040ca <HAL_UART_Receive_IT>

    }
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40011000 	.word	0x40011000
 8001418:	20000289 	.word	0x20000289
 800141c:	200002a0 	.word	0x200002a0
 8001420:	2000028c 	.word	0x2000028c
 8001424:	200001fc 	.word	0x200001fc
 8001428:	20000008 	.word	0x20000008
 800142c:	2000000c 	.word	0x2000000c
 8001430:	20000010 	.word	0x20000010
 8001434:	20000014 	.word	0x20000014
 8001438:	20000018 	.word	0x20000018
 800143c:	08005944 	.word	0x08005944
 8001440:	200001b4 	.word	0x200001b4

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <Error_Handler+0x8>

08001450 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a0f      	ldr	r2, [pc, #60]	@ (800149c <HAL_MspInit+0x4c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800148e:	2007      	movs	r0, #7
 8001490:	f000 fbca 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <HAL_TIM_IC_MspInit+0x94>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d134      	bne.n	800152c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_TIM_IC_MspInit+0x98>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <HAL_TIM_IC_MspInit+0x98>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_TIM_IC_MspInit+0x98>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_TIM_IC_MspInit+0x98>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_TIM_IC_MspInit+0x98>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_TIM_IC_MspInit+0x98>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80014fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800150c:	2301      	movs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4809      	ldr	r0, [pc, #36]	@ (800153c <HAL_TIM_IC_MspInit+0x9c>)
 8001518:	f000 fc5a 	bl	8001dd0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	201b      	movs	r0, #27
 8001522:	f000 fb8c 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001526:	201b      	movs	r0, #27
 8001528:	f000 fba5 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	@ 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40010000 	.word	0x40010000
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001540:	b480      	push	{r7}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001550:	d10e      	bne.n	8001570 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800156e:	e026      	b.n	80015be <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a16      	ldr	r2, [pc, #88]	@ (80015d0 <HAL_TIM_PWM_MspInit+0x90>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10e      	bne.n	8001598 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
}
 8001596:	e012      	b.n	80015be <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <HAL_TIM_PWM_MspInit+0x94>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10d      	bne.n	80015be <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_TIM_PWM_MspInit+0x8c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40000800 	.word	0x40000800

080015d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f8:	d11f      	bne.n	800163a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a34      	ldr	r2, [pc, #208]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 8001616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4829      	ldr	r0, [pc, #164]	@ (80016d8 <HAL_TIM_MspPostInit+0x100>)
 8001634:	f000 fbcc 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001638:	e047      	b.n	80016ca <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <HAL_TIM_MspPostInit+0x104>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d11e      	bne.n	8001682 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164c:	4a21      	ldr	r2, [pc, #132]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6313      	str	r3, [r2, #48]	@ 0x30
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERWO_Pin;
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001670:	2302      	movs	r3, #2
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERWO_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4819      	ldr	r0, [pc, #100]	@ (80016e0 <HAL_TIM_MspPostInit+0x108>)
 800167c:	f000 fba8 	bl	8001dd0 <HAL_GPIO_Init>
}
 8001680:	e023      	b.n	80016ca <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_TIM_MspPostInit+0x10c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d11e      	bne.n	80016ca <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6313      	str	r3, [r2, #48]	@ 0x30
 800169c:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <HAL_TIM_MspPostInit+0xfc>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = F_ENA_Pin|F_ENB_Pin|R_ENA_Pin|R_ENB_Pin;
 80016a8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ba:	2302      	movs	r3, #2
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <HAL_TIM_MspPostInit+0x100>)
 80016c6:	f000 fb83 	bl	8001dd0 <HAL_GPIO_Init>
}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	@ 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40000800 	.word	0x40000800

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	@ 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a36      	ldr	r2, [pc, #216]	@ (80017e0 <HAL_UART_MspInit+0xf8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d135      	bne.n	8001776 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	4a34      	ldr	r2, [pc, #208]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6453      	str	r3, [r2, #68]	@ 0x44
 800171a:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b2e      	ldr	r3, [pc, #184]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a2d      	ldr	r2, [pc, #180]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b2b      	ldr	r3, [pc, #172]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001742:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001754:	2307      	movs	r3, #7
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4822      	ldr	r0, [pc, #136]	@ (80017e8 <HAL_UART_MspInit+0x100>)
 8001760:	f000 fb36 	bl	8001dd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2025      	movs	r0, #37	@ 0x25
 800176a:	f000 fa68 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800176e:	2025      	movs	r0, #37	@ 0x25
 8001770:	f000 fa81 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001774:	e030      	b.n	80017d8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <HAL_UART_MspInit+0x104>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d12b      	bne.n	80017d8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	4a16      	ldr	r2, [pc, #88]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 800178a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800178e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	4a0f      	ldr	r2, [pc, #60]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_UART_MspInit+0xfc>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017b8:	230c      	movs	r3, #12
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c8:	2307      	movs	r3, #7
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <HAL_UART_MspInit+0x100>)
 80017d4:	f000 fafc 	bl	8001dd0 <HAL_GPIO_Init>
}
 80017d8:	bf00      	nop
 80017da:	3730      	adds	r7, #48	@ 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40011000 	.word	0x40011000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40004400 	.word	0x40004400

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <NMI_Handler+0x4>

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <MemManage_Handler+0x4>

08001808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <UsageFault_Handler+0x4>

08001818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f000 f8db 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM1_CC_IRQHandler+0x10>)
 8001856:	f001 fb73 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000094 	.word	0x20000094

08001864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <USART1_IRQHandler+0x10>)
 800186a:	f002 fc53 	bl	8004114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200001b4 	.word	0x200001b4

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f003 fbb2 	bl	8005010 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20020000 	.word	0x20020000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	200002a4 	.word	0x200002a4
 80018e0:	200003f8 	.word	0x200003f8

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001940 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800190c:	f7ff ffea 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	@ (8001948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	@ (8001954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001936:	f003 fb71 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193a:	f7ff f85b 	bl	80009f4 <main>
  bx  lr    
 800193e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800194c:	080059c4 	.word	0x080059c4
  ldr r2, =_sbss
 8001950:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001954:	200003f4 	.word	0x200003f4

08001958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <HAL_Init+0x40>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_Init+0x40>)
 8001972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	@ (800199c <HAL_Init+0x40>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f94f 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fd5e 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f967 	bl	8001c92 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f92f 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	@ (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000001c 	.word	0x2000001c
 80019f8:	20000024 	.word	0x20000024
 80019fc:	20000020 	.word	0x20000020

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000024 	.word	0x20000024
 8001a24:	200002a8 	.word	0x200002a8

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200002a8 	.word	0x200002a8

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000024 	.word	0x20000024

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	@ (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	@ (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	@ (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	@ 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff feb6 	bl	8001a28 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d008      	beq.n	8001cdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2280      	movs	r2, #128	@ 0x80
 8001cce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e052      	b.n	8001d82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0216 	bic.w	r2, r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_DMA_Abort+0x62>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0208 	bic.w	r2, r2, #8
 8001d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2c:	e013      	b.n	8001d56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2e:	f7ff fe7b 	bl	8001a28 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d90c      	bls.n	8001d56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e015      	b.n	8001d82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e4      	bne.n	8001d2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	223f      	movs	r2, #63	@ 0x3f
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d004      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2280      	movs	r2, #128	@ 0x80
 8001da2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e00c      	b.n	8001dc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2205      	movs	r2, #5
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	@ 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e159      	b.n	80020a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8148 	bne.w	800209a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d005      	beq.n	8001e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d130      	bne.n	8001e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d017      	beq.n	8001ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d123      	bne.n	8001f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a2 	beq.w	800209a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b57      	ldr	r3, [pc, #348]	@ (80020b8 <HAL_GPIO_Init+0x2e8>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	4a56      	ldr	r2, [pc, #344]	@ (80020b8 <HAL_GPIO_Init+0x2e8>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f66:	4b54      	ldr	r3, [pc, #336]	@ (80020b8 <HAL_GPIO_Init+0x2e8>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f72:	4a52      	ldr	r2, [pc, #328]	@ (80020bc <HAL_GPIO_Init+0x2ec>)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a49      	ldr	r2, [pc, #292]	@ (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x202>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a48      	ldr	r2, [pc, #288]	@ (80020c4 <HAL_GPIO_Init+0x2f4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x1fe>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a47      	ldr	r2, [pc, #284]	@ (80020c8 <HAL_GPIO_Init+0x2f8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x1fa>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a46      	ldr	r2, [pc, #280]	@ (80020cc <HAL_GPIO_Init+0x2fc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x1f6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a45      	ldr	r2, [pc, #276]	@ (80020d0 <HAL_GPIO_Init+0x300>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x1f2>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe4:	4935      	ldr	r1, [pc, #212]	@ (80020bc <HAL_GPIO_Init+0x2ec>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b38      	ldr	r3, [pc, #224]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a2f      	ldr	r2, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a24      	ldr	r2, [pc, #144]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002046:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206a:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002070:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002094:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	f67f aea2 	bls.w	8001dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	@ 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e001      	b.n	80020fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002118:	787b      	ldrb	r3, [r7, #1]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002124:	e003      	b.n	800212e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	041a      	lsls	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	619a      	str	r2, [r3, #24]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e267      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d075      	beq.n	8002246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215a:	4b88      	ldr	r3, [pc, #544]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d00c      	beq.n	8002180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4b85      	ldr	r3, [pc, #532]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d112      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b82      	ldr	r3, [pc, #520]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b7e      	ldr	r3, [pc, #504]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05b      	beq.n	8002244 <HAL_RCC_OscConfig+0x108>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d157      	bne.n	8002244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e242      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x74>
 80021a2:	4b76      	ldr	r3, [pc, #472]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a75      	ldr	r2, [pc, #468]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x98>
 80021ba:	4b70      	ldr	r3, [pc, #448]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6f      	ldr	r2, [pc, #444]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b6d      	ldr	r3, [pc, #436]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6c      	ldr	r2, [pc, #432]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021d4:	4b69      	ldr	r3, [pc, #420]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a68      	ldr	r2, [pc, #416]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b66      	ldr	r3, [pc, #408]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a65      	ldr	r2, [pc, #404]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fc18 	bl	8001a28 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff fc14 	bl	8001a28 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e207      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b5b      	ldr	r3, [pc, #364]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xc0>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fc04 	bl	8001a28 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fc00 	bl	8001a28 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	@ 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1f3      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b51      	ldr	r3, [pc, #324]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0xe8>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002252:	4b4a      	ldr	r3, [pc, #296]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b47      	ldr	r3, [pc, #284]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226a:	4b44      	ldr	r3, [pc, #272]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b41      	ldr	r3, [pc, #260]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1c7      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b3b      	ldr	r3, [pc, #236]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4937      	ldr	r1, [pc, #220]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e03a      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <HAL_RCC_OscConfig+0x244>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7ff fbb9 	bl	8001a28 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ba:	f7ff fbb5 	bl	8001a28 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1a8      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4925      	ldr	r1, [pc, #148]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <HAL_RCC_OscConfig+0x244>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff fb98 	bl	8001a28 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7ff fb94 	bl	8001a28 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e187      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d036      	beq.n	8002394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_RCC_OscConfig+0x248>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7ff fb78 	bl	8001a28 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff fb74 	bl	8001a28 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e167      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x200>
 800235a:	e01b      	b.n	8002394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235c:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_RCC_OscConfig+0x248>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7ff fb61 	bl	8001a28 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	e00e      	b.n	8002388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236a:	f7ff fb5d 	bl	8001a28 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d907      	bls.n	8002388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e150      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
 800237c:	40023800 	.word	0x40023800
 8002380:	42470000 	.word	0x42470000
 8002384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	4b88      	ldr	r3, [pc, #544]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800238a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ea      	bne.n	800236a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8097 	beq.w	80024d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a6:	4b81      	ldr	r3, [pc, #516]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	4b7d      	ldr	r3, [pc, #500]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	4a7c      	ldr	r2, [pc, #496]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c2:	4b7a      	ldr	r3, [pc, #488]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b77      	ldr	r3, [pc, #476]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b74      	ldr	r3, [pc, #464]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a73      	ldr	r2, [pc, #460]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7ff fb1d 	bl	8001a28 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7ff fb19 	bl	8001a28 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e10c      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b6a      	ldr	r3, [pc, #424]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x2ea>
 8002418:	4b64      	ldr	r3, [pc, #400]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	4a63      	ldr	r2, [pc, #396]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6713      	str	r3, [r2, #112]	@ 0x70
 8002424:	e01c      	b.n	8002460 <HAL_RCC_OscConfig+0x324>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x30c>
 800242e:	4b5f      	ldr	r3, [pc, #380]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	4a5e      	ldr	r2, [pc, #376]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6713      	str	r3, [r2, #112]	@ 0x70
 800243a:	4b5c      	ldr	r3, [pc, #368]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	4a5b      	ldr	r2, [pc, #364]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	@ 0x70
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0x324>
 8002448:	4b58      	ldr	r3, [pc, #352]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244c:	4a57      	ldr	r2, [pc, #348]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	6713      	str	r3, [r2, #112]	@ 0x70
 8002454:	4b55      	ldr	r3, [pc, #340]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	4a54      	ldr	r2, [pc, #336]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800245a:	f023 0304 	bic.w	r3, r3, #4
 800245e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7ff fade 	bl	8001a28 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7ff fada 	bl	8001a28 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0cb      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ee      	beq.n	8002470 <HAL_RCC_OscConfig+0x334>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7ff fac8 	bl	8001a28 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7ff fac4 	bl	8001a28 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0b5      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ee      	bne.n	800249c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024be:	7dfb      	ldrb	r3, [r7, #23]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	4a38      	ldr	r2, [pc, #224]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a1 	beq.w	800261c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024da:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d05c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d141      	bne.n	8002572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b31      	ldr	r3, [pc, #196]	@ (80025b4 <HAL_RCC_OscConfig+0x478>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fa98 	bl	8001a28 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff fa94 	bl	8001a28 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e087      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69da      	ldr	r2, [r3, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	491b      	ldr	r1, [pc, #108]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <HAL_RCC_OscConfig+0x478>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fa6d 	bl	8001a28 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff fa69 	bl	8001a28 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e05c      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x416>
 8002570:	e054      	b.n	800261c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <HAL_RCC_OscConfig+0x478>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fa56 	bl	8001a28 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff fa52 	bl	8001a28 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e045      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x444>
 800259e:	e03d      	b.n	800261c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e038      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <HAL_RCC_OscConfig+0x4ec>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d028      	beq.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d121      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d11a      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d111      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	3b01      	subs	r3, #1
 8002602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0cc      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b68      	ldr	r3, [pc, #416]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d90c      	bls.n	8002668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b65      	ldr	r3, [pc, #404]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b63      	ldr	r3, [pc, #396]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0b8      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b59      	ldr	r3, [pc, #356]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a58      	ldr	r2, [pc, #352]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800268a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002698:	4b53      	ldr	r3, [pc, #332]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a52      	ldr	r2, [pc, #328]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b50      	ldr	r3, [pc, #320]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	494d      	ldr	r1, [pc, #308]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d044      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b47      	ldr	r3, [pc, #284]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d119      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e07f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b3f      	ldr	r3, [pc, #252]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3b      	ldr	r3, [pc, #236]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e067      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4934      	ldr	r1, [pc, #208]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7ff f984 	bl	8001a28 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7ff f980 	bl	8001a28 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2b      	ldr	r3, [pc, #172]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d20c      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e032      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4916      	ldr	r1, [pc, #88]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	490e      	ldr	r1, [pc, #56]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b2:	f000 f821 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	490a      	ldr	r1, [pc, #40]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a09      	ldr	r2, [pc, #36]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f8e4 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08005968 	.word	0x08005968
 80027f0:	2000001c 	.word	0x2000001c
 80027f4:	20000020 	.word	0x20000020

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027fc:	b094      	sub	sp, #80	@ 0x50
 80027fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	647b      	str	r3, [r7, #68]	@ 0x44
 8002804:	2300      	movs	r3, #0
 8002806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002808:	2300      	movs	r3, #0
 800280a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002810:	4b79      	ldr	r3, [pc, #484]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d00d      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x40>
 800281c:	2b08      	cmp	r3, #8
 800281e:	f200 80e1 	bhi.w	80029e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x34>
 8002826:	2b04      	cmp	r3, #4
 8002828:	d003      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0x3a>
 800282a:	e0db      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b73      	ldr	r3, [pc, #460]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x204>)
 800282e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002830:	e0db      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002832:	4b73      	ldr	r3, [pc, #460]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002836:	e0d8      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002838:	4b6f      	ldr	r3, [pc, #444]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002840:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002842:	4b6d      	ldr	r3, [pc, #436]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d063      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284e:	4b6a      	ldr	r3, [pc, #424]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	2200      	movs	r2, #0
 8002856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002858:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002860:	633b      	str	r3, [r7, #48]	@ 0x30
 8002862:	2300      	movs	r3, #0
 8002864:	637b      	str	r3, [r7, #52]	@ 0x34
 8002866:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800286a:	4622      	mov	r2, r4
 800286c:	462b      	mov	r3, r5
 800286e:	f04f 0000 	mov.w	r0, #0
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	0159      	lsls	r1, r3, #5
 8002878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800287c:	0150      	lsls	r0, r2, #5
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4621      	mov	r1, r4
 8002884:	1a51      	subs	r1, r2, r1
 8002886:	6139      	str	r1, [r7, #16]
 8002888:	4629      	mov	r1, r5
 800288a:	eb63 0301 	sbc.w	r3, r3, r1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800289c:	4659      	mov	r1, fp
 800289e:	018b      	lsls	r3, r1, #6
 80028a0:	4651      	mov	r1, sl
 80028a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a6:	4651      	mov	r1, sl
 80028a8:	018a      	lsls	r2, r1, #6
 80028aa:	4651      	mov	r1, sl
 80028ac:	ebb2 0801 	subs.w	r8, r2, r1
 80028b0:	4659      	mov	r1, fp
 80028b2:	eb63 0901 	sbc.w	r9, r3, r1
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ca:	4690      	mov	r8, r2
 80028cc:	4699      	mov	r9, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	eb18 0303 	adds.w	r3, r8, r3
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	462b      	mov	r3, r5
 80028d8:	eb49 0303 	adc.w	r3, r9, r3
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ea:	4629      	mov	r1, r5
 80028ec:	024b      	lsls	r3, r1, #9
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f4:	4621      	mov	r1, r4
 80028f6:	024a      	lsls	r2, r1, #9
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028fe:	2200      	movs	r2, #0
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002908:	f7fd fcd2 	bl	80002b0 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002914:	e058      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002916:	4b38      	ldr	r3, [pc, #224]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	2200      	movs	r2, #0
 800291e:	4618      	mov	r0, r3
 8002920:	4611      	mov	r1, r2
 8002922:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
 800292c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002930:	4642      	mov	r2, r8
 8002932:	464b      	mov	r3, r9
 8002934:	f04f 0000 	mov.w	r0, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	0159      	lsls	r1, r3, #5
 800293e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002942:	0150      	lsls	r0, r2, #5
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4641      	mov	r1, r8
 800294a:	ebb2 0a01 	subs.w	sl, r2, r1
 800294e:	4649      	mov	r1, r9
 8002950:	eb63 0b01 	sbc.w	fp, r3, r1
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002960:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002964:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002968:	ebb2 040a 	subs.w	r4, r2, sl
 800296c:	eb63 050b 	sbc.w	r5, r3, fp
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	00eb      	lsls	r3, r5, #3
 800297a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297e:	00e2      	lsls	r2, r4, #3
 8002980:	4614      	mov	r4, r2
 8002982:	461d      	mov	r5, r3
 8002984:	4643      	mov	r3, r8
 8002986:	18e3      	adds	r3, r4, r3
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	464b      	mov	r3, r9
 800298c:	eb45 0303 	adc.w	r3, r5, r3
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800299e:	4629      	mov	r1, r5
 80029a0:	028b      	lsls	r3, r1, #10
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a8:	4621      	mov	r1, r4
 80029aa:	028a      	lsls	r2, r1, #10
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	61fa      	str	r2, [r7, #28]
 80029b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029bc:	f7fd fc78 	bl	80002b0 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80029d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e2:	e002      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x204>)
 80029e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3750      	adds	r7, #80	@ 0x50
 80029f0:	46bd      	mov	sp, r7
 80029f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	007a1200 	.word	0x007a1200

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	2000001c 	.word	0x2000001c

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a20:	f7ff fff0 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0a9b      	lsrs	r3, r3, #10
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4903      	ldr	r1, [pc, #12]	@ (8002a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	08005978 	.word	0x08005978

08002a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a48:	f7ff ffdc 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0b5b      	lsrs	r3, r3, #13
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4903      	ldr	r1, [pc, #12]	@ (8002a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08005978 	.word	0x08005978

08002a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e041      	b.n	8002b02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fd54 	bl	8001540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fd44 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_TIM_PWM_Start+0x24>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e022      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d109      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x3e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e015      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x58>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e008      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e068      	b.n	8002c50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_PWM_Start+0x82>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b8c:	e013      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d104      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x92>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b9c:	e00b      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_PWM_Start+0xa2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bac:	e003      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f001 f901 	bl	8003dc6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	@ (8002c58 <HAL_TIM_PWM_Start+0x14c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <HAL_TIM_PWM_Start+0x14c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x10e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf0:	d013      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x10e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_TIM_PWM_Start+0x150>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x10e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a17      	ldr	r2, [pc, #92]	@ (8002c60 <HAL_TIM_PWM_Start+0x154>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x10e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	@ (8002c64 <HAL_TIM_PWM_Start+0x158>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x10e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <HAL_TIM_PWM_Start+0x15c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d111      	bne.n	8002c3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d010      	beq.n	8002c4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3c:	e007      	b.n	8002c4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40014000 	.word	0x40014000

08002c6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e041      	b.n	8002d02 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe fc04 	bl	80014a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 fc44 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_IC_Start_IT+0x1e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e013      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x46>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_IC_Start_IT+0x2e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e00b      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x46>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_IC_Start_IT+0x3e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e003      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x46>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_TIM_IC_Start_IT+0x58>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e013      	b.n	8002d8c <HAL_TIM_IC_Start_IT+0x80>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d104      	bne.n	8002d74 <HAL_TIM_IC_Start_IT+0x68>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e00b      	b.n	8002d8c <HAL_TIM_IC_Start_IT+0x80>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d104      	bne.n	8002d84 <HAL_TIM_IC_Start_IT+0x78>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e003      	b.n	8002d8c <HAL_TIM_IC_Start_IT+0x80>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d8e:	7bbb      	ldrb	r3, [r7, #14]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d102      	bne.n	8002d9a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d94:	7b7b      	ldrb	r3, [r7, #13]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d001      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0c2      	b.n	8002f24 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_IC_Start_IT+0xa2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dac:	e013      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0xca>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_IC_Start_IT+0xb2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dbc:	e00b      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0xca>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_IC_Start_IT+0xc2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dcc:	e003      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0xca>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_IC_Start_IT+0xda>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002de4:	e013      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x102>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_IC_Start_IT+0xea>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x102>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_IC_Start_IT+0xfa>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e04:	e003      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x102>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d841      	bhi.n	8002e98 <HAL_TIM_IC_Start_IT+0x18c>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <HAL_TIM_IC_Start_IT+0x110>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e99 	.word	0x08002e99
 8002e24:	08002e99 	.word	0x08002e99
 8002e28:	08002e99 	.word	0x08002e99
 8002e2c:	08002e63 	.word	0x08002e63
 8002e30:	08002e99 	.word	0x08002e99
 8002e34:	08002e99 	.word	0x08002e99
 8002e38:	08002e99 	.word	0x08002e99
 8002e3c:	08002e75 	.word	0x08002e75
 8002e40:	08002e99 	.word	0x08002e99
 8002e44:	08002e99 	.word	0x08002e99
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002e87 	.word	0x08002e87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0202 	orr.w	r2, r2, #2
 8002e5e:	60da      	str	r2, [r3, #12]
      break;
 8002e60:	e01d      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0204 	orr.w	r2, r2, #4
 8002e70:	60da      	str	r2, [r3, #12]
      break;
 8002e72:	e014      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	60da      	str	r2, [r3, #12]
      break;
 8002e84:	e00b      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0210 	orr.w	r2, r2, #16
 8002e94:	60da      	str	r2, [r3, #12]
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d13e      	bne.n	8002f22 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ff8a 	bl	8003dc6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f2c <HAL_TIM_IC_Start_IT+0x220>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d018      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec4:	d013      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <HAL_TIM_IC_Start_IT+0x224>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00e      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a17      	ldr	r2, [pc, #92]	@ (8002f34 <HAL_TIM_IC_Start_IT+0x228>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a16      	ldr	r2, [pc, #88]	@ (8002f38 <HAL_TIM_IC_Start_IT+0x22c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <HAL_TIM_IC_Start_IT+0x230>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d111      	bne.n	8002f12 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d010      	beq.n	8002f22 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	e007      	b.n	8002f22 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40000c00 	.word	0x40000c00
 8002f3c:	40014000 	.word	0x40014000

08002f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d020      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01b      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0202 	mvn.w	r2, #2
 8002f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fca4 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fab2 	bl	80034fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fab9 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d020      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0204 	mvn.w	r2, #4
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fc7e 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa8c 	bl	80034fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fa93 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d020      	beq.n	800303c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0208 	mvn.w	r2, #8
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fc58 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa66 	bl	80034fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa6d 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d020      	beq.n	8003088 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0210 	mvn.w	r2, #16
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2208      	movs	r2, #8
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fc32 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa40 	bl	80034fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fa47 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0201 	mvn.w	r2, #1
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa1e 	bl	80034e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 ff18 	bl	8003f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa18 	bl	8003524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0220 	mvn.w	r2, #32
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 feea 	bl	8003eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_TIM_IC_ConfigChannel+0x1e>
 800313a:	2302      	movs	r3, #2
 800313c:	e088      	b.n	8003250 <HAL_TIM_IC_ConfigChannel+0x130>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800315c:	f000 fc96 	bl	8003a8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020c 	bic.w	r2, r2, #12
 800316e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6999      	ldr	r1, [r3, #24]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	619a      	str	r2, [r3, #24]
 8003182:	e060      	b.n	8003246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b04      	cmp	r3, #4
 8003188:	d11c      	bne.n	80031c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800319a:	f000 fd0e 	bl	8003bba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80031ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6999      	ldr	r1, [r3, #24]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	021a      	lsls	r2, r3, #8
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	619a      	str	r2, [r3, #24]
 80031c2:	e040      	b.n	8003246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11b      	bne.n	8003202 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031da:	f000 fd5b 	bl	8003c94 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 020c 	bic.w	r2, r2, #12
 80031ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69d9      	ldr	r1, [r3, #28]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	61da      	str	r2, [r3, #28]
 8003200:	e021      	b.n	8003246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0c      	cmp	r3, #12
 8003206:	d11c      	bne.n	8003242 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003218:	f000 fd78 	bl	8003d0c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800322a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69d9      	ldr	r1, [r3, #28]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	021a      	lsls	r2, r3, #8
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
 8003240:	e001      	b.n	8003246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800324e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003272:	2302      	movs	r3, #2
 8003274:	e0ae      	b.n	80033d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	f200 809f 	bhi.w	80033c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032c1 	.word	0x080032c1
 8003290:	080033c5 	.word	0x080033c5
 8003294:	080033c5 	.word	0x080033c5
 8003298:	080033c5 	.word	0x080033c5
 800329c:	08003301 	.word	0x08003301
 80032a0:	080033c5 	.word	0x080033c5
 80032a4:	080033c5 	.word	0x080033c5
 80032a8:	080033c5 	.word	0x080033c5
 80032ac:	08003343 	.word	0x08003343
 80032b0:	080033c5 	.word	0x080033c5
 80032b4:	080033c5 	.word	0x080033c5
 80032b8:	080033c5 	.word	0x080033c5
 80032bc:	08003383 	.word	0x08003383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f9c2 	bl	8003650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0208 	orr.w	r2, r2, #8
 80032da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0204 	bic.w	r2, r2, #4
 80032ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6999      	ldr	r1, [r3, #24]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	619a      	str	r2, [r3, #24]
      break;
 80032fe:	e064      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fa08 	bl	800371c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800331a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800332a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6999      	ldr	r1, [r3, #24]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	619a      	str	r2, [r3, #24]
      break;
 8003340:	e043      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fa53 	bl	80037f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0208 	orr.w	r2, r2, #8
 800335c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0204 	bic.w	r2, r2, #4
 800336c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69d9      	ldr	r1, [r3, #28]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	61da      	str	r2, [r3, #28]
      break;
 8003380:	e023      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fa9d 	bl	80038c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69d9      	ldr	r1, [r3, #28]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	021a      	lsls	r2, r3, #8
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	61da      	str	r2, [r3, #28]
      break;
 80033c2:	e002      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
      break;
 80033c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e031      	b.n	8003458 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 faae 	bl	8003968 <TIM_SlaveTimer_SetConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e018      	b.n	8003458 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003434:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003444:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d831      	bhi.n	80034d8 <HAL_TIM_ReadCapturedValue+0x78>
 8003474:	a201      	add	r2, pc, #4	@ (adr r2, 800347c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034b1 	.word	0x080034b1
 8003480:	080034d9 	.word	0x080034d9
 8003484:	080034d9 	.word	0x080034d9
 8003488:	080034d9 	.word	0x080034d9
 800348c:	080034bb 	.word	0x080034bb
 8003490:	080034d9 	.word	0x080034d9
 8003494:	080034d9 	.word	0x080034d9
 8003498:	080034d9 	.word	0x080034d9
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	080034d9 	.word	0x080034d9
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080034d9 	.word	0x080034d9
 80034ac:	080034cf 	.word	0x080034cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b6:	60fb      	str	r3, [r7, #12]

      break;
 80034b8:	e00f      	b.n	80034da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	60fb      	str	r3, [r7, #12]

      break;
 80034c2:	e00a      	b.n	80034da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ca:	60fb      	str	r3, [r7, #12]

      break;
 80034cc:	e005      	b.n	80034da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	60fb      	str	r3, [r7, #12]

      break;
 80034d6:	e000      	b.n	80034da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80034d8:	bf00      	nop
  }

  return tmpreg;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a3a      	ldr	r2, [pc, #232]	@ (8003634 <TIM_Base_SetConfig+0xfc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a37      	ldr	r2, [pc, #220]	@ (8003638 <TIM_Base_SetConfig+0x100>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a36      	ldr	r2, [pc, #216]	@ (800363c <TIM_Base_SetConfig+0x104>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a35      	ldr	r2, [pc, #212]	@ (8003640 <TIM_Base_SetConfig+0x108>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2b      	ldr	r2, [pc, #172]	@ (8003634 <TIM_Base_SetConfig+0xfc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01b      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003590:	d017      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a28      	ldr	r2, [pc, #160]	@ (8003638 <TIM_Base_SetConfig+0x100>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a27      	ldr	r2, [pc, #156]	@ (800363c <TIM_Base_SetConfig+0x104>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00f      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a26      	ldr	r2, [pc, #152]	@ (8003640 <TIM_Base_SetConfig+0x108>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a25      	ldr	r2, [pc, #148]	@ (8003644 <TIM_Base_SetConfig+0x10c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a24      	ldr	r2, [pc, #144]	@ (8003648 <TIM_Base_SetConfig+0x110>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a23      	ldr	r2, [pc, #140]	@ (800364c <TIM_Base_SetConfig+0x114>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <TIM_Base_SetConfig+0xfc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d103      	bne.n	8003608 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]
  }
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800
 8003640:	40000c00 	.word	0x40000c00
 8003644:	40014000 	.word	0x40014000
 8003648:	40014400 	.word	0x40014400
 800364c:	40014800 	.word	0x40014800

08003650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f023 0201 	bic.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 0302 	bic.w	r3, r3, #2
 8003698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <TIM_OC1_SetConfig+0xc8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10c      	bne.n	80036c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0308 	bic.w	r3, r3, #8
 80036b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a13      	ldr	r2, [pc, #76]	@ (8003718 <TIM_OC1_SetConfig+0xc8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d111      	bne.n	80036f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40010000 	.word	0x40010000

0800371c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f023 0210 	bic.w	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0320 	bic.w	r3, r3, #32
 8003766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1e      	ldr	r2, [pc, #120]	@ (80037f0 <TIM_OC2_SetConfig+0xd4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10d      	bne.n	8003798 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003796:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a15      	ldr	r2, [pc, #84]	@ (80037f0 <TIM_OC2_SetConfig+0xd4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d113      	bne.n	80037c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000

080037f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800383c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a1d      	ldr	r2, [pc, #116]	@ (80038c4 <TIM_OC3_SetConfig+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10d      	bne.n	800386e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800386c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <TIM_OC3_SetConfig+0xd0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d113      	bne.n	800389e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800387c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40010000 	.word	0x40010000

080038c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	031b      	lsls	r3, r3, #12
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a10      	ldr	r2, [pc, #64]	@ (8003964 <TIM_OC4_SetConfig+0x9c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800392e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000

08003968 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003984:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 0307 	bic.w	r3, r3, #7
 8003996:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b70      	cmp	r3, #112	@ 0x70
 80039b0:	d01a      	beq.n	80039e8 <TIM_SlaveTimer_SetConfig+0x80>
 80039b2:	2b70      	cmp	r3, #112	@ 0x70
 80039b4:	d860      	bhi.n	8003a78 <TIM_SlaveTimer_SetConfig+0x110>
 80039b6:	2b60      	cmp	r3, #96	@ 0x60
 80039b8:	d054      	beq.n	8003a64 <TIM_SlaveTimer_SetConfig+0xfc>
 80039ba:	2b60      	cmp	r3, #96	@ 0x60
 80039bc:	d85c      	bhi.n	8003a78 <TIM_SlaveTimer_SetConfig+0x110>
 80039be:	2b50      	cmp	r3, #80	@ 0x50
 80039c0:	d046      	beq.n	8003a50 <TIM_SlaveTimer_SetConfig+0xe8>
 80039c2:	2b50      	cmp	r3, #80	@ 0x50
 80039c4:	d858      	bhi.n	8003a78 <TIM_SlaveTimer_SetConfig+0x110>
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d019      	beq.n	80039fe <TIM_SlaveTimer_SetConfig+0x96>
 80039ca:	2b40      	cmp	r3, #64	@ 0x40
 80039cc:	d854      	bhi.n	8003a78 <TIM_SlaveTimer_SetConfig+0x110>
 80039ce:	2b30      	cmp	r3, #48	@ 0x30
 80039d0:	d055      	beq.n	8003a7e <TIM_SlaveTimer_SetConfig+0x116>
 80039d2:	2b30      	cmp	r3, #48	@ 0x30
 80039d4:	d850      	bhi.n	8003a78 <TIM_SlaveTimer_SetConfig+0x110>
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d051      	beq.n	8003a7e <TIM_SlaveTimer_SetConfig+0x116>
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d84c      	bhi.n	8003a78 <TIM_SlaveTimer_SetConfig+0x110>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d04d      	beq.n	8003a7e <TIM_SlaveTimer_SetConfig+0x116>
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d04b      	beq.n	8003a7e <TIM_SlaveTimer_SetConfig+0x116>
 80039e6:	e047      	b.n	8003a78 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80039f8:	f000 f9c5 	bl	8003d86 <TIM_ETR_SetConfig>
      break;
 80039fc:	e040      	b.n	8003a80 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d101      	bne.n	8003a0a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e03b      	b.n	8003a82 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a30:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]
      break;
 8003a4e:	e017      	b.n	8003a80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f000 f87d 	bl	8003b5c <TIM_TI1_ConfigInputStage>
      break;
 8003a62:	e00d      	b.n	8003a80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a70:	461a      	mov	r2, r3
 8003a72:	f000 f8df 	bl	8003c34 <TIM_TI2_ConfigInputStage>
      break;
 8003a76:	e003      	b.n	8003a80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7c:	e000      	b.n	8003a80 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003a7e:	bf00      	nop
  }

  return status;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f023 0201 	bic.w	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	@ (8003b48 <TIM_TI1_SetConfig+0xbc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac0:	d00f      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <TIM_TI1_SetConfig+0xc0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a20      	ldr	r2, [pc, #128]	@ (8003b50 <TIM_TI1_SetConfig+0xc4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <TIM_TI1_SetConfig+0xc8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b58 <TIM_TI1_SetConfig+0xcc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <TIM_TI1_SetConfig+0x5a>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <TIM_TI1_SetConfig+0x5c>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e003      	b.n	8003b06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f023 030a 	bic.w	r3, r3, #10
 8003b20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 030a 	and.w	r3, r3, #10
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	40014000 	.word	0x40014000

08003b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0201 	bic.w	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 030a 	bic.w	r3, r3, #10
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b087      	sub	sp, #28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0210 	bic.w	r2, r3, #16
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	031b      	lsls	r3, r3, #12
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f023 0303 	bic.w	r3, r3, #3
 8003cc0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	031b      	lsls	r3, r3, #12
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	031b      	lsls	r3, r3, #12
 8003d64:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b087      	sub	sp, #28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003da0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	021a      	lsls	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	609a      	str	r2, [r3, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2201      	movs	r2, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	401a      	ands	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e050      	b.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e74:	d013      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40014000 	.word	0x40014000

08003eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e042      	b.n	8003fac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fbd4 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	@ 0x24
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fdbd 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	@ 0x28
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d175      	bne.n	80040c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Transmit+0x2c>
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e06e      	b.n	80040c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2221      	movs	r2, #33	@ 0x21
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ff2:	f7fd fd19 	bl	8001a28 <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	88fa      	ldrh	r2, [r7, #6]
 8003ffc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d108      	bne.n	8004020 <HAL_UART_Transmit+0x6c>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e003      	b.n	8004028 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004028:	e02e      	b.n	8004088 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fb1f 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e03a      	b.n	80040c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	3302      	adds	r3, #2
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	e007      	b.n	800407a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	3301      	adds	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1cb      	bne.n	800402a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2200      	movs	r2, #0
 800409a:	2140      	movs	r1, #64	@ 0x40
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 faeb 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e006      	b.n	80040c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d112      	bne.n	800410a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_UART_Receive_IT+0x26>
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e00b      	b.n	800410c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	461a      	mov	r2, r3
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fb12 	bl	800472a <UART_Start_Receive_IT>
 8004106:	4603      	mov	r3, r0
 8004108:	e000      	b.n	800410c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0ba      	sub	sp, #232	@ 0xe8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_UART_IRQHandler+0x66>
 8004166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fbf2 	bl	800495c <UART_Receive_IT>
      return;
 8004178:	e25b      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800417a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80de 	beq.w	8004340 <HAL_UART_IRQHandler+0x22c>
 8004184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004194:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80d1 	beq.w	8004340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_UART_IRQHandler+0xae>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ba:	f043 0201 	orr.w	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_UART_IRQHandler+0xd2>
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f043 0202 	orr.w	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_UART_IRQHandler+0xf6>
 80041f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d011      	beq.n	800423a <HAL_UART_IRQHandler+0x126>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d105      	bne.n	800422e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	f043 0208 	orr.w	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 81f2 	beq.w	8004628 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_UART_IRQHandler+0x14e>
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fb7d 	bl	800495c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426c:	2b40      	cmp	r3, #64	@ 0x40
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <HAL_UART_IRQHandler+0x17a>
 8004286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04f      	beq.n	800432e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa85 	bl	800479e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429e:	2b40      	cmp	r3, #64	@ 0x40
 80042a0:	d141      	bne.n	8004326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1d9      	bne.n	80042a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d013      	beq.n	800431e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fa:	4a7e      	ldr	r2, [pc, #504]	@ (80044f4 <HAL_UART_IRQHandler+0x3e0>)
 80042fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd fd41 	bl	8001d8a <HAL_DMA_Abort_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004318:	4610      	mov	r0, r2
 800431a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	e00e      	b.n	800433c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f994 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004324:	e00a      	b.n	800433c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f990 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	e006      	b.n	800433c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f98c 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800433a:	e175      	b.n	8004628 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	bf00      	nop
    return;
 800433e:	e173      	b.n	8004628 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	2b01      	cmp	r3, #1
 8004346:	f040 814f 	bne.w	80045e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8148 	beq.w	80045e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8141 	beq.w	80045e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004386:	2b40      	cmp	r3, #64	@ 0x40
 8004388:	f040 80b6 	bne.w	80044f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8145 	beq.w	800462c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043aa:	429a      	cmp	r2, r3
 80043ac:	f080 813e 	bcs.w	800462c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c2:	f000 8088 	beq.w	80044d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800440a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1d9      	bne.n	80043c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3314      	adds	r3, #20
 8004418:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3314      	adds	r3, #20
 8004432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004436:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800443a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800443e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e1      	bne.n	8004412 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3314      	adds	r3, #20
 8004454:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800445e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004472:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004474:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004478:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e3      	bne.n	800444e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a6:	f023 0310 	bic.w	r3, r3, #16
 80044aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80044b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e3      	bne.n	8004494 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fd fbea 	bl	8001caa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8b7 	bl	8004660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044f2:	e09b      	b.n	800462c <HAL_UART_IRQHandler+0x518>
 80044f4:	08004865 	.word	0x08004865
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004500:	b29b      	uxth	r3, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 808e 	beq.w	8004630 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8089 	beq.w	8004630 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800452e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004542:	647a      	str	r2, [r7, #68]	@ 0x44
 8004544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e3      	bne.n	800451e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	623b      	str	r3, [r7, #32]
   return(result);
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800457a:	633a      	str	r2, [r7, #48]	@ 0x30
 800457c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e3      	bne.n	8004556 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045c0:	61fa      	str	r2, [r7, #28]
 80045c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	617b      	str	r3, [r7, #20]
   return(result);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e3      	bne.n	800459c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f83d 	bl	8004660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045e6:	e023      	b.n	8004630 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <HAL_UART_IRQHandler+0x4f4>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f943 	bl	800488c <UART_Transmit_IT>
    return;
 8004606:	e014      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <HAL_UART_IRQHandler+0x51e>
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f983 	bl	800492c <UART_EndTransmit_IT>
    return;
 8004626:	e004      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
    return;
 8004628:	bf00      	nop
 800462a:	e002      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
      return;
 800462c:	bf00      	nop
 800462e:	e000      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
      return;
 8004630:	bf00      	nop
  }
}
 8004632:	37e8      	adds	r7, #232	@ 0xe8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004688:	e03b      	b.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d037      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004692:	f7fd f9c9 	bl	8001a28 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e03a      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d023      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b80      	cmp	r3, #128	@ 0x80
 80046be:	d020      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b40      	cmp	r3, #64	@ 0x40
 80046c4:	d01d      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d116      	bne.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f857 	bl	800479e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2208      	movs	r2, #8
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d0b4      	beq.n	800468a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	4613      	mov	r3, r2
 8004736:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2222      	movs	r2, #34	@ 0x22
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800476e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0220 	orr.w	r2, r2, #32
 800478e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800479e:	b480      	push	{r7}
 80047a0:	b095      	sub	sp, #84	@ 0x54
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80047c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	2b01      	cmp	r3, #1
 8004814:	d119      	bne.n	800484a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	60bb      	str	r3, [r7, #8]
   return(result);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 0310 	bic.w	r3, r3, #16
 800482c:	647b      	str	r3, [r7, #68]	@ 0x44
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004836:	61ba      	str	r2, [r7, #24]
 8004838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6979      	ldr	r1, [r7, #20]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	613b      	str	r3, [r7, #16]
   return(result);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004858:	bf00      	nop
 800485a:	3754      	adds	r7, #84	@ 0x54
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fee4 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b21      	cmp	r3, #33	@ 0x21
 800489e:	d13e      	bne.n	800491e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a8:	d114      	bne.n	80048d4 <UART_Transmit_IT+0x48>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d110      	bne.n	80048d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]
 80048d2:	e008      	b.n	80048e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	1c59      	adds	r1, r3, #1
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6211      	str	r1, [r2, #32]
 80048de:	781a      	ldrb	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4619      	mov	r1, r3
 80048f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004908:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004918:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	e000      	b.n	8004920 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004942:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fe73 	bl	8004638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	@ 0x30
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b22      	cmp	r3, #34	@ 0x22
 800496e:	f040 80ae 	bne.w	8004ace <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497a:	d117      	bne.n	80049ac <UART_Receive_IT+0x50>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d113      	bne.n	80049ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	b29a      	uxth	r2, r3
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80049aa:	e026      	b.n	80049fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049be:	d007      	beq.n	80049d0 <UART_Receive_IT+0x74>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <UART_Receive_IT+0x82>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e008      	b.n	80049f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4619      	mov	r1, r3
 8004a08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d15d      	bne.n	8004aca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0220 	bic.w	r2, r2, #32
 8004a1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d135      	bne.n	8004ac0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7a:	623a      	str	r2, [r7, #32]
 8004a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d10a      	bne.n	8004ab2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fdd1 	bl	8004660 <HAL_UARTEx_RxEventCallback>
 8004abe:	e002      	b.n	8004ac6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc fc21 	bl	8001308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e002      	b.n	8004ad0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3730      	adds	r7, #48	@ 0x30
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b0c0      	sub	sp, #256	@ 0x100
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	ea40 0301 	orr.w	r3, r0, r1
 8004b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b30:	f021 010c 	bic.w	r1, r1, #12
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b52:	6999      	ldr	r1, [r3, #24]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	ea40 0301 	orr.w	r3, r0, r1
 8004b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8f      	ldr	r3, [pc, #572]	@ (8004da4 <UART_SetConfig+0x2cc>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <UART_SetConfig+0xa0>
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b8d      	ldr	r3, [pc, #564]	@ (8004da8 <UART_SetConfig+0x2d0>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d104      	bne.n	8004b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7fd ff64 	bl	8002a44 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b80:	e003      	b.n	8004b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b82:	f7fd ff4b 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8004b86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b94:	f040 810c 	bne.w	8004db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bba:	4621      	mov	r1, r4
 8004bbc:	eb12 0801 	adds.w	r8, r2, r1
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb43 0901 	adc.w	r9, r3, r1
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bda:	4690      	mov	r8, r2
 8004bdc:	4699      	mov	r9, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	eb18 0303 	adds.w	r3, r8, r3
 8004be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004be8:	462b      	mov	r3, r5
 8004bea:	eb49 0303 	adc.w	r3, r9, r3
 8004bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c06:	460b      	mov	r3, r1
 8004c08:	18db      	adds	r3, r3, r3
 8004c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	eb42 0303 	adc.w	r3, r2, r3
 8004c12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c1c:	f7fb fb48 	bl	80002b0 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b61      	ldr	r3, [pc, #388]	@ (8004dac <UART_SetConfig+0x2d4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	011c      	lsls	r4, r3, #4
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c50:	4641      	mov	r1, r8
 8004c52:	eb12 0a01 	adds.w	sl, r2, r1
 8004c56:	4649      	mov	r1, r9
 8004c58:	eb43 0b01 	adc.w	fp, r3, r1
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c70:	4692      	mov	sl, r2
 8004c72:	469b      	mov	fp, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	eb4b 0303 	adc.w	r3, fp, r3
 8004c84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	18db      	adds	r3, r3, r3
 8004ca0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cb2:	f7fb fafd 	bl	80002b0 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2264      	movs	r2, #100	@ 0x64
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cd2:	4b36      	ldr	r3, [pc, #216]	@ (8004dac <UART_SetConfig+0x2d4>)
 8004cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ce0:	441c      	add	r4, r3
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d38:	464b      	mov	r3, r9
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d6e:	f7fb fa9f 	bl	80002b0 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <UART_SetConfig+0x2d4>)
 8004d78:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	2164      	movs	r1, #100	@ 0x64
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	3332      	adds	r3, #50	@ 0x32
 8004d8a:	4a08      	ldr	r2, [pc, #32]	@ (8004dac <UART_SetConfig+0x2d4>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	f003 0207 	and.w	r2, r3, #7
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4422      	add	r2, r4
 8004d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da0:	e106      	b.n	8004fb0 <UART_SetConfig+0x4d8>
 8004da2:	bf00      	nop
 8004da4:	40011000 	.word	0x40011000
 8004da8:	40011400 	.word	0x40011400
 8004dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	6239      	str	r1, [r7, #32]
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	1854      	adds	r4, r2, r1
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	eb43 0501 	adc.w	r5, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	00eb      	lsls	r3, r5, #3
 8004de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dea:	00e2      	lsls	r2, r4, #3
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	18e3      	adds	r3, r4, r3
 8004df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004df8:	464b      	mov	r3, r9
 8004dfa:	eb45 0303 	adc.w	r3, r5, r3
 8004dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e1e:	4629      	mov	r1, r5
 8004e20:	008b      	lsls	r3, r1, #2
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e28:	4621      	mov	r1, r4
 8004e2a:	008a      	lsls	r2, r1, #2
 8004e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e30:	f7fb fa3e 	bl	80002b0 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b60      	ldr	r3, [pc, #384]	@ (8004fbc <UART_SetConfig+0x4e4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	61b9      	str	r1, [r7, #24]
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6139      	str	r1, [r7, #16]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e98:	464b      	mov	r3, r9
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	008b      	lsls	r3, r1, #2
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	008a      	lsls	r2, r1, #2
 8004eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ece:	f7fb f9ef 	bl	80002b0 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4b38      	ldr	r3, [pc, #224]	@ (8004fbc <UART_SetConfig+0x4e4>)
 8004eda:	fba3 2301 	umull	r2, r3, r3, r1
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2264      	movs	r2, #100	@ 0x64
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	1acb      	subs	r3, r1, r3
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	3332      	adds	r3, #50	@ 0x32
 8004eec:	4a33      	ldr	r2, [pc, #204]	@ (8004fbc <UART_SetConfig+0x4e4>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ef8:	441c      	add	r4, r3
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	415b      	adcs	r3, r3
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	eb42 0303 	adc.w	r3, r2, r3
 8004f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	008b      	lsls	r3, r1, #2
 8004f70:	4641      	mov	r1, r8
 8004f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f76:	4641      	mov	r1, r8
 8004f78:	008a      	lsls	r2, r1, #2
 8004f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f7e:	f7fb f997 	bl	80002b0 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b0d      	ldr	r3, [pc, #52]	@ (8004fbc <UART_SetConfig+0x4e4>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	@ 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	3332      	adds	r3, #50	@ 0x32
 8004f9a:	4a08      	ldr	r2, [pc, #32]	@ (8004fbc <UART_SetConfig+0x4e4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f003 020f 	and.w	r2, r3, #15
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4422      	add	r2, r4
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbc:	51eb851f 	.word	0x51eb851f

08004fc0 <siprintf>:
 8004fc0:	b40e      	push	{r1, r2, r3}
 8004fc2:	b500      	push	{lr}
 8004fc4:	b09c      	sub	sp, #112	@ 0x70
 8004fc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fc8:	9002      	str	r0, [sp, #8]
 8004fca:	9006      	str	r0, [sp, #24]
 8004fcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fd0:	4809      	ldr	r0, [pc, #36]	@ (8004ff8 <siprintf+0x38>)
 8004fd2:	9107      	str	r1, [sp, #28]
 8004fd4:	9104      	str	r1, [sp, #16]
 8004fd6:	4909      	ldr	r1, [pc, #36]	@ (8004ffc <siprintf+0x3c>)
 8004fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	a902      	add	r1, sp, #8
 8004fe4:	f000 f994 	bl	8005310 <_svfiprintf_r>
 8004fe8:	9b02      	ldr	r3, [sp, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	b01c      	add	sp, #112	@ 0x70
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	20000028 	.word	0x20000028
 8004ffc:	ffff0208 	.word	0xffff0208

08005000 <memset>:
 8005000:	4402      	add	r2, r0
 8005002:	4603      	mov	r3, r0
 8005004:	4293      	cmp	r3, r2
 8005006:	d100      	bne.n	800500a <memset+0xa>
 8005008:	4770      	bx	lr
 800500a:	f803 1b01 	strb.w	r1, [r3], #1
 800500e:	e7f9      	b.n	8005004 <memset+0x4>

08005010 <__errno>:
 8005010:	4b01      	ldr	r3, [pc, #4]	@ (8005018 <__errno+0x8>)
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000028 	.word	0x20000028

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4d0d      	ldr	r5, [pc, #52]	@ (8005054 <__libc_init_array+0x38>)
 8005020:	4c0d      	ldr	r4, [pc, #52]	@ (8005058 <__libc_init_array+0x3c>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	2600      	movs	r6, #0
 8005028:	42a6      	cmp	r6, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	4d0b      	ldr	r5, [pc, #44]	@ (800505c <__libc_init_array+0x40>)
 800502e:	4c0c      	ldr	r4, [pc, #48]	@ (8005060 <__libc_init_array+0x44>)
 8005030:	f000 fc66 	bl	8005900 <_init>
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	2600      	movs	r6, #0
 800503a:	42a6      	cmp	r6, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f855 3b04 	ldr.w	r3, [r5], #4
 8005044:	4798      	blx	r3
 8005046:	3601      	adds	r6, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f855 3b04 	ldr.w	r3, [r5], #4
 800504e:	4798      	blx	r3
 8005050:	3601      	adds	r6, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	080059bc 	.word	0x080059bc
 8005058:	080059bc 	.word	0x080059bc
 800505c:	080059bc 	.word	0x080059bc
 8005060:	080059c0 	.word	0x080059c0

08005064 <__retarget_lock_acquire_recursive>:
 8005064:	4770      	bx	lr

08005066 <__retarget_lock_release_recursive>:
 8005066:	4770      	bx	lr

08005068 <_free_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4605      	mov	r5, r0
 800506c:	2900      	cmp	r1, #0
 800506e:	d041      	beq.n	80050f4 <_free_r+0x8c>
 8005070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005074:	1f0c      	subs	r4, r1, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfb8      	it	lt
 800507a:	18e4      	addlt	r4, r4, r3
 800507c:	f000 f8e0 	bl	8005240 <__malloc_lock>
 8005080:	4a1d      	ldr	r2, [pc, #116]	@ (80050f8 <_free_r+0x90>)
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	b933      	cbnz	r3, 8005094 <_free_r+0x2c>
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	6014      	str	r4, [r2, #0]
 800508a:	4628      	mov	r0, r5
 800508c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005090:	f000 b8dc 	b.w	800524c <__malloc_unlock>
 8005094:	42a3      	cmp	r3, r4
 8005096:	d908      	bls.n	80050aa <_free_r+0x42>
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	1821      	adds	r1, r4, r0
 800509c:	428b      	cmp	r3, r1
 800509e:	bf01      	itttt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	1809      	addeq	r1, r1, r0
 80050a6:	6021      	streq	r1, [r4, #0]
 80050a8:	e7ed      	b.n	8005086 <_free_r+0x1e>
 80050aa:	461a      	mov	r2, r3
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b10b      	cbz	r3, 80050b4 <_free_r+0x4c>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d9fa      	bls.n	80050aa <_free_r+0x42>
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	1850      	adds	r0, r2, r1
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d10b      	bne.n	80050d4 <_free_r+0x6c>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	4401      	add	r1, r0
 80050c0:	1850      	adds	r0, r2, r1
 80050c2:	4283      	cmp	r3, r0
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	d1e0      	bne.n	800508a <_free_r+0x22>
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6053      	str	r3, [r2, #4]
 80050ce:	4408      	add	r0, r1
 80050d0:	6010      	str	r0, [r2, #0]
 80050d2:	e7da      	b.n	800508a <_free_r+0x22>
 80050d4:	d902      	bls.n	80050dc <_free_r+0x74>
 80050d6:	230c      	movs	r3, #12
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	e7d6      	b.n	800508a <_free_r+0x22>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	1821      	adds	r1, r4, r0
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf04      	itt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	6063      	str	r3, [r4, #4]
 80050ea:	bf04      	itt	eq
 80050ec:	1809      	addeq	r1, r1, r0
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	6054      	str	r4, [r2, #4]
 80050f2:	e7ca      	b.n	800508a <_free_r+0x22>
 80050f4:	bd38      	pop	{r3, r4, r5, pc}
 80050f6:	bf00      	nop
 80050f8:	200003f0 	.word	0x200003f0

080050fc <sbrk_aligned>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	4e0f      	ldr	r6, [pc, #60]	@ (800513c <sbrk_aligned+0x40>)
 8005100:	460c      	mov	r4, r1
 8005102:	6831      	ldr	r1, [r6, #0]
 8005104:	4605      	mov	r5, r0
 8005106:	b911      	cbnz	r1, 800510e <sbrk_aligned+0x12>
 8005108:	f000 fba6 	bl	8005858 <_sbrk_r>
 800510c:	6030      	str	r0, [r6, #0]
 800510e:	4621      	mov	r1, r4
 8005110:	4628      	mov	r0, r5
 8005112:	f000 fba1 	bl	8005858 <_sbrk_r>
 8005116:	1c43      	adds	r3, r0, #1
 8005118:	d103      	bne.n	8005122 <sbrk_aligned+0x26>
 800511a:	f04f 34ff 	mov.w	r4, #4294967295
 800511e:	4620      	mov	r0, r4
 8005120:	bd70      	pop	{r4, r5, r6, pc}
 8005122:	1cc4      	adds	r4, r0, #3
 8005124:	f024 0403 	bic.w	r4, r4, #3
 8005128:	42a0      	cmp	r0, r4
 800512a:	d0f8      	beq.n	800511e <sbrk_aligned+0x22>
 800512c:	1a21      	subs	r1, r4, r0
 800512e:	4628      	mov	r0, r5
 8005130:	f000 fb92 	bl	8005858 <_sbrk_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d1f2      	bne.n	800511e <sbrk_aligned+0x22>
 8005138:	e7ef      	b.n	800511a <sbrk_aligned+0x1e>
 800513a:	bf00      	nop
 800513c:	200003ec 	.word	0x200003ec

08005140 <_malloc_r>:
 8005140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005144:	1ccd      	adds	r5, r1, #3
 8005146:	f025 0503 	bic.w	r5, r5, #3
 800514a:	3508      	adds	r5, #8
 800514c:	2d0c      	cmp	r5, #12
 800514e:	bf38      	it	cc
 8005150:	250c      	movcc	r5, #12
 8005152:	2d00      	cmp	r5, #0
 8005154:	4606      	mov	r6, r0
 8005156:	db01      	blt.n	800515c <_malloc_r+0x1c>
 8005158:	42a9      	cmp	r1, r5
 800515a:	d904      	bls.n	8005166 <_malloc_r+0x26>
 800515c:	230c      	movs	r3, #12
 800515e:	6033      	str	r3, [r6, #0]
 8005160:	2000      	movs	r0, #0
 8005162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800523c <_malloc_r+0xfc>
 800516a:	f000 f869 	bl	8005240 <__malloc_lock>
 800516e:	f8d8 3000 	ldr.w	r3, [r8]
 8005172:	461c      	mov	r4, r3
 8005174:	bb44      	cbnz	r4, 80051c8 <_malloc_r+0x88>
 8005176:	4629      	mov	r1, r5
 8005178:	4630      	mov	r0, r6
 800517a:	f7ff ffbf 	bl	80050fc <sbrk_aligned>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	4604      	mov	r4, r0
 8005182:	d158      	bne.n	8005236 <_malloc_r+0xf6>
 8005184:	f8d8 4000 	ldr.w	r4, [r8]
 8005188:	4627      	mov	r7, r4
 800518a:	2f00      	cmp	r7, #0
 800518c:	d143      	bne.n	8005216 <_malloc_r+0xd6>
 800518e:	2c00      	cmp	r4, #0
 8005190:	d04b      	beq.n	800522a <_malloc_r+0xea>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	4639      	mov	r1, r7
 8005196:	4630      	mov	r0, r6
 8005198:	eb04 0903 	add.w	r9, r4, r3
 800519c:	f000 fb5c 	bl	8005858 <_sbrk_r>
 80051a0:	4581      	cmp	r9, r0
 80051a2:	d142      	bne.n	800522a <_malloc_r+0xea>
 80051a4:	6821      	ldr	r1, [r4, #0]
 80051a6:	1a6d      	subs	r5, r5, r1
 80051a8:	4629      	mov	r1, r5
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7ff ffa6 	bl	80050fc <sbrk_aligned>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d03a      	beq.n	800522a <_malloc_r+0xea>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	442b      	add	r3, r5
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	f8d8 3000 	ldr.w	r3, [r8]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	bb62      	cbnz	r2, 800521c <_malloc_r+0xdc>
 80051c2:	f8c8 7000 	str.w	r7, [r8]
 80051c6:	e00f      	b.n	80051e8 <_malloc_r+0xa8>
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	1b52      	subs	r2, r2, r5
 80051cc:	d420      	bmi.n	8005210 <_malloc_r+0xd0>
 80051ce:	2a0b      	cmp	r2, #11
 80051d0:	d917      	bls.n	8005202 <_malloc_r+0xc2>
 80051d2:	1961      	adds	r1, r4, r5
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	6025      	str	r5, [r4, #0]
 80051d8:	bf18      	it	ne
 80051da:	6059      	strne	r1, [r3, #4]
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	bf08      	it	eq
 80051e0:	f8c8 1000 	streq.w	r1, [r8]
 80051e4:	5162      	str	r2, [r4, r5]
 80051e6:	604b      	str	r3, [r1, #4]
 80051e8:	4630      	mov	r0, r6
 80051ea:	f000 f82f 	bl	800524c <__malloc_unlock>
 80051ee:	f104 000b 	add.w	r0, r4, #11
 80051f2:	1d23      	adds	r3, r4, #4
 80051f4:	f020 0007 	bic.w	r0, r0, #7
 80051f8:	1ac2      	subs	r2, r0, r3
 80051fa:	bf1c      	itt	ne
 80051fc:	1a1b      	subne	r3, r3, r0
 80051fe:	50a3      	strne	r3, [r4, r2]
 8005200:	e7af      	b.n	8005162 <_malloc_r+0x22>
 8005202:	6862      	ldr	r2, [r4, #4]
 8005204:	42a3      	cmp	r3, r4
 8005206:	bf0c      	ite	eq
 8005208:	f8c8 2000 	streq.w	r2, [r8]
 800520c:	605a      	strne	r2, [r3, #4]
 800520e:	e7eb      	b.n	80051e8 <_malloc_r+0xa8>
 8005210:	4623      	mov	r3, r4
 8005212:	6864      	ldr	r4, [r4, #4]
 8005214:	e7ae      	b.n	8005174 <_malloc_r+0x34>
 8005216:	463c      	mov	r4, r7
 8005218:	687f      	ldr	r7, [r7, #4]
 800521a:	e7b6      	b.n	800518a <_malloc_r+0x4a>
 800521c:	461a      	mov	r2, r3
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	42a3      	cmp	r3, r4
 8005222:	d1fb      	bne.n	800521c <_malloc_r+0xdc>
 8005224:	2300      	movs	r3, #0
 8005226:	6053      	str	r3, [r2, #4]
 8005228:	e7de      	b.n	80051e8 <_malloc_r+0xa8>
 800522a:	230c      	movs	r3, #12
 800522c:	6033      	str	r3, [r6, #0]
 800522e:	4630      	mov	r0, r6
 8005230:	f000 f80c 	bl	800524c <__malloc_unlock>
 8005234:	e794      	b.n	8005160 <_malloc_r+0x20>
 8005236:	6005      	str	r5, [r0, #0]
 8005238:	e7d6      	b.n	80051e8 <_malloc_r+0xa8>
 800523a:	bf00      	nop
 800523c:	200003f0 	.word	0x200003f0

08005240 <__malloc_lock>:
 8005240:	4801      	ldr	r0, [pc, #4]	@ (8005248 <__malloc_lock+0x8>)
 8005242:	f7ff bf0f 	b.w	8005064 <__retarget_lock_acquire_recursive>
 8005246:	bf00      	nop
 8005248:	200003e8 	.word	0x200003e8

0800524c <__malloc_unlock>:
 800524c:	4801      	ldr	r0, [pc, #4]	@ (8005254 <__malloc_unlock+0x8>)
 800524e:	f7ff bf0a 	b.w	8005066 <__retarget_lock_release_recursive>
 8005252:	bf00      	nop
 8005254:	200003e8 	.word	0x200003e8

08005258 <__ssputs_r>:
 8005258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	688e      	ldr	r6, [r1, #8]
 800525e:	461f      	mov	r7, r3
 8005260:	42be      	cmp	r6, r7
 8005262:	680b      	ldr	r3, [r1, #0]
 8005264:	4682      	mov	sl, r0
 8005266:	460c      	mov	r4, r1
 8005268:	4690      	mov	r8, r2
 800526a:	d82d      	bhi.n	80052c8 <__ssputs_r+0x70>
 800526c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005274:	d026      	beq.n	80052c4 <__ssputs_r+0x6c>
 8005276:	6965      	ldr	r5, [r4, #20]
 8005278:	6909      	ldr	r1, [r1, #16]
 800527a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800527e:	eba3 0901 	sub.w	r9, r3, r1
 8005282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005286:	1c7b      	adds	r3, r7, #1
 8005288:	444b      	add	r3, r9
 800528a:	106d      	asrs	r5, r5, #1
 800528c:	429d      	cmp	r5, r3
 800528e:	bf38      	it	cc
 8005290:	461d      	movcc	r5, r3
 8005292:	0553      	lsls	r3, r2, #21
 8005294:	d527      	bpl.n	80052e6 <__ssputs_r+0x8e>
 8005296:	4629      	mov	r1, r5
 8005298:	f7ff ff52 	bl	8005140 <_malloc_r>
 800529c:	4606      	mov	r6, r0
 800529e:	b360      	cbz	r0, 80052fa <__ssputs_r+0xa2>
 80052a0:	6921      	ldr	r1, [r4, #16]
 80052a2:	464a      	mov	r2, r9
 80052a4:	f000 fae8 	bl	8005878 <memcpy>
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80052ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	6126      	str	r6, [r4, #16]
 80052b6:	6165      	str	r5, [r4, #20]
 80052b8:	444e      	add	r6, r9
 80052ba:	eba5 0509 	sub.w	r5, r5, r9
 80052be:	6026      	str	r6, [r4, #0]
 80052c0:	60a5      	str	r5, [r4, #8]
 80052c2:	463e      	mov	r6, r7
 80052c4:	42be      	cmp	r6, r7
 80052c6:	d900      	bls.n	80052ca <__ssputs_r+0x72>
 80052c8:	463e      	mov	r6, r7
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	4632      	mov	r2, r6
 80052ce:	4641      	mov	r1, r8
 80052d0:	f000 faa8 	bl	8005824 <memmove>
 80052d4:	68a3      	ldr	r3, [r4, #8]
 80052d6:	1b9b      	subs	r3, r3, r6
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4433      	add	r3, r6
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	2000      	movs	r0, #0
 80052e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e6:	462a      	mov	r2, r5
 80052e8:	f000 fad4 	bl	8005894 <_realloc_r>
 80052ec:	4606      	mov	r6, r0
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d1e0      	bne.n	80052b4 <__ssputs_r+0x5c>
 80052f2:	6921      	ldr	r1, [r4, #16]
 80052f4:	4650      	mov	r0, sl
 80052f6:	f7ff feb7 	bl	8005068 <_free_r>
 80052fa:	230c      	movs	r3, #12
 80052fc:	f8ca 3000 	str.w	r3, [sl]
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005306:	81a3      	strh	r3, [r4, #12]
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	e7e9      	b.n	80052e2 <__ssputs_r+0x8a>
	...

08005310 <_svfiprintf_r>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	4698      	mov	r8, r3
 8005316:	898b      	ldrh	r3, [r1, #12]
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	b09d      	sub	sp, #116	@ 0x74
 800531c:	4607      	mov	r7, r0
 800531e:	460d      	mov	r5, r1
 8005320:	4614      	mov	r4, r2
 8005322:	d510      	bpl.n	8005346 <_svfiprintf_r+0x36>
 8005324:	690b      	ldr	r3, [r1, #16]
 8005326:	b973      	cbnz	r3, 8005346 <_svfiprintf_r+0x36>
 8005328:	2140      	movs	r1, #64	@ 0x40
 800532a:	f7ff ff09 	bl	8005140 <_malloc_r>
 800532e:	6028      	str	r0, [r5, #0]
 8005330:	6128      	str	r0, [r5, #16]
 8005332:	b930      	cbnz	r0, 8005342 <_svfiprintf_r+0x32>
 8005334:	230c      	movs	r3, #12
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	b01d      	add	sp, #116	@ 0x74
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005342:	2340      	movs	r3, #64	@ 0x40
 8005344:	616b      	str	r3, [r5, #20]
 8005346:	2300      	movs	r3, #0
 8005348:	9309      	str	r3, [sp, #36]	@ 0x24
 800534a:	2320      	movs	r3, #32
 800534c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005350:	f8cd 800c 	str.w	r8, [sp, #12]
 8005354:	2330      	movs	r3, #48	@ 0x30
 8005356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054f4 <_svfiprintf_r+0x1e4>
 800535a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800535e:	f04f 0901 	mov.w	r9, #1
 8005362:	4623      	mov	r3, r4
 8005364:	469a      	mov	sl, r3
 8005366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800536a:	b10a      	cbz	r2, 8005370 <_svfiprintf_r+0x60>
 800536c:	2a25      	cmp	r2, #37	@ 0x25
 800536e:	d1f9      	bne.n	8005364 <_svfiprintf_r+0x54>
 8005370:	ebba 0b04 	subs.w	fp, sl, r4
 8005374:	d00b      	beq.n	800538e <_svfiprintf_r+0x7e>
 8005376:	465b      	mov	r3, fp
 8005378:	4622      	mov	r2, r4
 800537a:	4629      	mov	r1, r5
 800537c:	4638      	mov	r0, r7
 800537e:	f7ff ff6b 	bl	8005258 <__ssputs_r>
 8005382:	3001      	adds	r0, #1
 8005384:	f000 80a7 	beq.w	80054d6 <_svfiprintf_r+0x1c6>
 8005388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800538a:	445a      	add	r2, fp
 800538c:	9209      	str	r2, [sp, #36]	@ 0x24
 800538e:	f89a 3000 	ldrb.w	r3, [sl]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 809f 	beq.w	80054d6 <_svfiprintf_r+0x1c6>
 8005398:	2300      	movs	r3, #0
 800539a:	f04f 32ff 	mov.w	r2, #4294967295
 800539e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a2:	f10a 0a01 	add.w	sl, sl, #1
 80053a6:	9304      	str	r3, [sp, #16]
 80053a8:	9307      	str	r3, [sp, #28]
 80053aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80053b0:	4654      	mov	r4, sl
 80053b2:	2205      	movs	r2, #5
 80053b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b8:	484e      	ldr	r0, [pc, #312]	@ (80054f4 <_svfiprintf_r+0x1e4>)
 80053ba:	f7fa ff29 	bl	8000210 <memchr>
 80053be:	9a04      	ldr	r2, [sp, #16]
 80053c0:	b9d8      	cbnz	r0, 80053fa <_svfiprintf_r+0xea>
 80053c2:	06d0      	lsls	r0, r2, #27
 80053c4:	bf44      	itt	mi
 80053c6:	2320      	movmi	r3, #32
 80053c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053cc:	0711      	lsls	r1, r2, #28
 80053ce:	bf44      	itt	mi
 80053d0:	232b      	movmi	r3, #43	@ 0x2b
 80053d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053d6:	f89a 3000 	ldrb.w	r3, [sl]
 80053da:	2b2a      	cmp	r3, #42	@ 0x2a
 80053dc:	d015      	beq.n	800540a <_svfiprintf_r+0xfa>
 80053de:	9a07      	ldr	r2, [sp, #28]
 80053e0:	4654      	mov	r4, sl
 80053e2:	2000      	movs	r0, #0
 80053e4:	f04f 0c0a 	mov.w	ip, #10
 80053e8:	4621      	mov	r1, r4
 80053ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ee:	3b30      	subs	r3, #48	@ 0x30
 80053f0:	2b09      	cmp	r3, #9
 80053f2:	d94b      	bls.n	800548c <_svfiprintf_r+0x17c>
 80053f4:	b1b0      	cbz	r0, 8005424 <_svfiprintf_r+0x114>
 80053f6:	9207      	str	r2, [sp, #28]
 80053f8:	e014      	b.n	8005424 <_svfiprintf_r+0x114>
 80053fa:	eba0 0308 	sub.w	r3, r0, r8
 80053fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	46a2      	mov	sl, r4
 8005408:	e7d2      	b.n	80053b0 <_svfiprintf_r+0xa0>
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	1d19      	adds	r1, r3, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	9103      	str	r1, [sp, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	bfbb      	ittet	lt
 8005416:	425b      	neglt	r3, r3
 8005418:	f042 0202 	orrlt.w	r2, r2, #2
 800541c:	9307      	strge	r3, [sp, #28]
 800541e:	9307      	strlt	r3, [sp, #28]
 8005420:	bfb8      	it	lt
 8005422:	9204      	strlt	r2, [sp, #16]
 8005424:	7823      	ldrb	r3, [r4, #0]
 8005426:	2b2e      	cmp	r3, #46	@ 0x2e
 8005428:	d10a      	bne.n	8005440 <_svfiprintf_r+0x130>
 800542a:	7863      	ldrb	r3, [r4, #1]
 800542c:	2b2a      	cmp	r3, #42	@ 0x2a
 800542e:	d132      	bne.n	8005496 <_svfiprintf_r+0x186>
 8005430:	9b03      	ldr	r3, [sp, #12]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	9203      	str	r2, [sp, #12]
 8005438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800543c:	3402      	adds	r4, #2
 800543e:	9305      	str	r3, [sp, #20]
 8005440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005504 <_svfiprintf_r+0x1f4>
 8005444:	7821      	ldrb	r1, [r4, #0]
 8005446:	2203      	movs	r2, #3
 8005448:	4650      	mov	r0, sl
 800544a:	f7fa fee1 	bl	8000210 <memchr>
 800544e:	b138      	cbz	r0, 8005460 <_svfiprintf_r+0x150>
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	eba0 000a 	sub.w	r0, r0, sl
 8005456:	2240      	movs	r2, #64	@ 0x40
 8005458:	4082      	lsls	r2, r0
 800545a:	4313      	orrs	r3, r2
 800545c:	3401      	adds	r4, #1
 800545e:	9304      	str	r3, [sp, #16]
 8005460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005464:	4824      	ldr	r0, [pc, #144]	@ (80054f8 <_svfiprintf_r+0x1e8>)
 8005466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800546a:	2206      	movs	r2, #6
 800546c:	f7fa fed0 	bl	8000210 <memchr>
 8005470:	2800      	cmp	r0, #0
 8005472:	d036      	beq.n	80054e2 <_svfiprintf_r+0x1d2>
 8005474:	4b21      	ldr	r3, [pc, #132]	@ (80054fc <_svfiprintf_r+0x1ec>)
 8005476:	bb1b      	cbnz	r3, 80054c0 <_svfiprintf_r+0x1b0>
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	3307      	adds	r3, #7
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	3308      	adds	r3, #8
 8005482:	9303      	str	r3, [sp, #12]
 8005484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005486:	4433      	add	r3, r6
 8005488:	9309      	str	r3, [sp, #36]	@ 0x24
 800548a:	e76a      	b.n	8005362 <_svfiprintf_r+0x52>
 800548c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005490:	460c      	mov	r4, r1
 8005492:	2001      	movs	r0, #1
 8005494:	e7a8      	b.n	80053e8 <_svfiprintf_r+0xd8>
 8005496:	2300      	movs	r3, #0
 8005498:	3401      	adds	r4, #1
 800549a:	9305      	str	r3, [sp, #20]
 800549c:	4619      	mov	r1, r3
 800549e:	f04f 0c0a 	mov.w	ip, #10
 80054a2:	4620      	mov	r0, r4
 80054a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a8:	3a30      	subs	r2, #48	@ 0x30
 80054aa:	2a09      	cmp	r2, #9
 80054ac:	d903      	bls.n	80054b6 <_svfiprintf_r+0x1a6>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0c6      	beq.n	8005440 <_svfiprintf_r+0x130>
 80054b2:	9105      	str	r1, [sp, #20]
 80054b4:	e7c4      	b.n	8005440 <_svfiprintf_r+0x130>
 80054b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ba:	4604      	mov	r4, r0
 80054bc:	2301      	movs	r3, #1
 80054be:	e7f0      	b.n	80054a2 <_svfiprintf_r+0x192>
 80054c0:	ab03      	add	r3, sp, #12
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	462a      	mov	r2, r5
 80054c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005500 <_svfiprintf_r+0x1f0>)
 80054c8:	a904      	add	r1, sp, #16
 80054ca:	4638      	mov	r0, r7
 80054cc:	f3af 8000 	nop.w
 80054d0:	1c42      	adds	r2, r0, #1
 80054d2:	4606      	mov	r6, r0
 80054d4:	d1d6      	bne.n	8005484 <_svfiprintf_r+0x174>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	065b      	lsls	r3, r3, #25
 80054da:	f53f af2d 	bmi.w	8005338 <_svfiprintf_r+0x28>
 80054de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054e0:	e72c      	b.n	800533c <_svfiprintf_r+0x2c>
 80054e2:	ab03      	add	r3, sp, #12
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	462a      	mov	r2, r5
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <_svfiprintf_r+0x1f0>)
 80054ea:	a904      	add	r1, sp, #16
 80054ec:	4638      	mov	r0, r7
 80054ee:	f000 f879 	bl	80055e4 <_printf_i>
 80054f2:	e7ed      	b.n	80054d0 <_svfiprintf_r+0x1c0>
 80054f4:	08005980 	.word	0x08005980
 80054f8:	0800598a 	.word	0x0800598a
 80054fc:	00000000 	.word	0x00000000
 8005500:	08005259 	.word	0x08005259
 8005504:	08005986 	.word	0x08005986

08005508 <_printf_common>:
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	4616      	mov	r6, r2
 800550e:	4698      	mov	r8, r3
 8005510:	688a      	ldr	r2, [r1, #8]
 8005512:	690b      	ldr	r3, [r1, #16]
 8005514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005518:	4293      	cmp	r3, r2
 800551a:	bfb8      	it	lt
 800551c:	4613      	movlt	r3, r2
 800551e:	6033      	str	r3, [r6, #0]
 8005520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005524:	4607      	mov	r7, r0
 8005526:	460c      	mov	r4, r1
 8005528:	b10a      	cbz	r2, 800552e <_printf_common+0x26>
 800552a:	3301      	adds	r3, #1
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	0699      	lsls	r1, r3, #26
 8005532:	bf42      	ittt	mi
 8005534:	6833      	ldrmi	r3, [r6, #0]
 8005536:	3302      	addmi	r3, #2
 8005538:	6033      	strmi	r3, [r6, #0]
 800553a:	6825      	ldr	r5, [r4, #0]
 800553c:	f015 0506 	ands.w	r5, r5, #6
 8005540:	d106      	bne.n	8005550 <_printf_common+0x48>
 8005542:	f104 0a19 	add.w	sl, r4, #25
 8005546:	68e3      	ldr	r3, [r4, #12]
 8005548:	6832      	ldr	r2, [r6, #0]
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	42ab      	cmp	r3, r5
 800554e:	dc26      	bgt.n	800559e <_printf_common+0x96>
 8005550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	3b00      	subs	r3, #0
 8005558:	bf18      	it	ne
 800555a:	2301      	movne	r3, #1
 800555c:	0692      	lsls	r2, r2, #26
 800555e:	d42b      	bmi.n	80055b8 <_printf_common+0xb0>
 8005560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005564:	4641      	mov	r1, r8
 8005566:	4638      	mov	r0, r7
 8005568:	47c8      	blx	r9
 800556a:	3001      	adds	r0, #1
 800556c:	d01e      	beq.n	80055ac <_printf_common+0xa4>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	6922      	ldr	r2, [r4, #16]
 8005572:	f003 0306 	and.w	r3, r3, #6
 8005576:	2b04      	cmp	r3, #4
 8005578:	bf02      	ittt	eq
 800557a:	68e5      	ldreq	r5, [r4, #12]
 800557c:	6833      	ldreq	r3, [r6, #0]
 800557e:	1aed      	subeq	r5, r5, r3
 8005580:	68a3      	ldr	r3, [r4, #8]
 8005582:	bf0c      	ite	eq
 8005584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005588:	2500      	movne	r5, #0
 800558a:	4293      	cmp	r3, r2
 800558c:	bfc4      	itt	gt
 800558e:	1a9b      	subgt	r3, r3, r2
 8005590:	18ed      	addgt	r5, r5, r3
 8005592:	2600      	movs	r6, #0
 8005594:	341a      	adds	r4, #26
 8005596:	42b5      	cmp	r5, r6
 8005598:	d11a      	bne.n	80055d0 <_printf_common+0xc8>
 800559a:	2000      	movs	r0, #0
 800559c:	e008      	b.n	80055b0 <_printf_common+0xa8>
 800559e:	2301      	movs	r3, #1
 80055a0:	4652      	mov	r2, sl
 80055a2:	4641      	mov	r1, r8
 80055a4:	4638      	mov	r0, r7
 80055a6:	47c8      	blx	r9
 80055a8:	3001      	adds	r0, #1
 80055aa:	d103      	bne.n	80055b4 <_printf_common+0xac>
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	3501      	adds	r5, #1
 80055b6:	e7c6      	b.n	8005546 <_printf_common+0x3e>
 80055b8:	18e1      	adds	r1, r4, r3
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	2030      	movs	r0, #48	@ 0x30
 80055be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055c2:	4422      	add	r2, r4
 80055c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055cc:	3302      	adds	r3, #2
 80055ce:	e7c7      	b.n	8005560 <_printf_common+0x58>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4622      	mov	r2, r4
 80055d4:	4641      	mov	r1, r8
 80055d6:	4638      	mov	r0, r7
 80055d8:	47c8      	blx	r9
 80055da:	3001      	adds	r0, #1
 80055dc:	d0e6      	beq.n	80055ac <_printf_common+0xa4>
 80055de:	3601      	adds	r6, #1
 80055e0:	e7d9      	b.n	8005596 <_printf_common+0x8e>
	...

080055e4 <_printf_i>:
 80055e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	7e0f      	ldrb	r7, [r1, #24]
 80055ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055ec:	2f78      	cmp	r7, #120	@ 0x78
 80055ee:	4691      	mov	r9, r2
 80055f0:	4680      	mov	r8, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	469a      	mov	sl, r3
 80055f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055fa:	d807      	bhi.n	800560c <_printf_i+0x28>
 80055fc:	2f62      	cmp	r7, #98	@ 0x62
 80055fe:	d80a      	bhi.n	8005616 <_printf_i+0x32>
 8005600:	2f00      	cmp	r7, #0
 8005602:	f000 80d2 	beq.w	80057aa <_printf_i+0x1c6>
 8005606:	2f58      	cmp	r7, #88	@ 0x58
 8005608:	f000 80b9 	beq.w	800577e <_printf_i+0x19a>
 800560c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005614:	e03a      	b.n	800568c <_printf_i+0xa8>
 8005616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800561a:	2b15      	cmp	r3, #21
 800561c:	d8f6      	bhi.n	800560c <_printf_i+0x28>
 800561e:	a101      	add	r1, pc, #4	@ (adr r1, 8005624 <_printf_i+0x40>)
 8005620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005624:	0800567d 	.word	0x0800567d
 8005628:	08005691 	.word	0x08005691
 800562c:	0800560d 	.word	0x0800560d
 8005630:	0800560d 	.word	0x0800560d
 8005634:	0800560d 	.word	0x0800560d
 8005638:	0800560d 	.word	0x0800560d
 800563c:	08005691 	.word	0x08005691
 8005640:	0800560d 	.word	0x0800560d
 8005644:	0800560d 	.word	0x0800560d
 8005648:	0800560d 	.word	0x0800560d
 800564c:	0800560d 	.word	0x0800560d
 8005650:	08005791 	.word	0x08005791
 8005654:	080056bb 	.word	0x080056bb
 8005658:	0800574b 	.word	0x0800574b
 800565c:	0800560d 	.word	0x0800560d
 8005660:	0800560d 	.word	0x0800560d
 8005664:	080057b3 	.word	0x080057b3
 8005668:	0800560d 	.word	0x0800560d
 800566c:	080056bb 	.word	0x080056bb
 8005670:	0800560d 	.word	0x0800560d
 8005674:	0800560d 	.word	0x0800560d
 8005678:	08005753 	.word	0x08005753
 800567c:	6833      	ldr	r3, [r6, #0]
 800567e:	1d1a      	adds	r2, r3, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6032      	str	r2, [r6, #0]
 8005684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800568c:	2301      	movs	r3, #1
 800568e:	e09d      	b.n	80057cc <_printf_i+0x1e8>
 8005690:	6833      	ldr	r3, [r6, #0]
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	1d19      	adds	r1, r3, #4
 8005696:	6031      	str	r1, [r6, #0]
 8005698:	0606      	lsls	r6, r0, #24
 800569a:	d501      	bpl.n	80056a0 <_printf_i+0xbc>
 800569c:	681d      	ldr	r5, [r3, #0]
 800569e:	e003      	b.n	80056a8 <_printf_i+0xc4>
 80056a0:	0645      	lsls	r5, r0, #25
 80056a2:	d5fb      	bpl.n	800569c <_printf_i+0xb8>
 80056a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	da03      	bge.n	80056b4 <_printf_i+0xd0>
 80056ac:	232d      	movs	r3, #45	@ 0x2d
 80056ae:	426d      	negs	r5, r5
 80056b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056b4:	4859      	ldr	r0, [pc, #356]	@ (800581c <_printf_i+0x238>)
 80056b6:	230a      	movs	r3, #10
 80056b8:	e011      	b.n	80056de <_printf_i+0xfa>
 80056ba:	6821      	ldr	r1, [r4, #0]
 80056bc:	6833      	ldr	r3, [r6, #0]
 80056be:	0608      	lsls	r0, r1, #24
 80056c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80056c4:	d402      	bmi.n	80056cc <_printf_i+0xe8>
 80056c6:	0649      	lsls	r1, r1, #25
 80056c8:	bf48      	it	mi
 80056ca:	b2ad      	uxthmi	r5, r5
 80056cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80056ce:	4853      	ldr	r0, [pc, #332]	@ (800581c <_printf_i+0x238>)
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	bf14      	ite	ne
 80056d4:	230a      	movne	r3, #10
 80056d6:	2308      	moveq	r3, #8
 80056d8:	2100      	movs	r1, #0
 80056da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056de:	6866      	ldr	r6, [r4, #4]
 80056e0:	60a6      	str	r6, [r4, #8]
 80056e2:	2e00      	cmp	r6, #0
 80056e4:	bfa2      	ittt	ge
 80056e6:	6821      	ldrge	r1, [r4, #0]
 80056e8:	f021 0104 	bicge.w	r1, r1, #4
 80056ec:	6021      	strge	r1, [r4, #0]
 80056ee:	b90d      	cbnz	r5, 80056f4 <_printf_i+0x110>
 80056f0:	2e00      	cmp	r6, #0
 80056f2:	d04b      	beq.n	800578c <_printf_i+0x1a8>
 80056f4:	4616      	mov	r6, r2
 80056f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80056fa:	fb03 5711 	mls	r7, r3, r1, r5
 80056fe:	5dc7      	ldrb	r7, [r0, r7]
 8005700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005704:	462f      	mov	r7, r5
 8005706:	42bb      	cmp	r3, r7
 8005708:	460d      	mov	r5, r1
 800570a:	d9f4      	bls.n	80056f6 <_printf_i+0x112>
 800570c:	2b08      	cmp	r3, #8
 800570e:	d10b      	bne.n	8005728 <_printf_i+0x144>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	07df      	lsls	r7, r3, #31
 8005714:	d508      	bpl.n	8005728 <_printf_i+0x144>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	6861      	ldr	r1, [r4, #4]
 800571a:	4299      	cmp	r1, r3
 800571c:	bfde      	ittt	le
 800571e:	2330      	movle	r3, #48	@ 0x30
 8005720:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005724:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005728:	1b92      	subs	r2, r2, r6
 800572a:	6122      	str	r2, [r4, #16]
 800572c:	f8cd a000 	str.w	sl, [sp]
 8005730:	464b      	mov	r3, r9
 8005732:	aa03      	add	r2, sp, #12
 8005734:	4621      	mov	r1, r4
 8005736:	4640      	mov	r0, r8
 8005738:	f7ff fee6 	bl	8005508 <_printf_common>
 800573c:	3001      	adds	r0, #1
 800573e:	d14a      	bne.n	80057d6 <_printf_i+0x1f2>
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	b004      	add	sp, #16
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	f043 0320 	orr.w	r3, r3, #32
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	4833      	ldr	r0, [pc, #204]	@ (8005820 <_printf_i+0x23c>)
 8005754:	2778      	movs	r7, #120	@ 0x78
 8005756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	6831      	ldr	r1, [r6, #0]
 800575e:	061f      	lsls	r7, r3, #24
 8005760:	f851 5b04 	ldr.w	r5, [r1], #4
 8005764:	d402      	bmi.n	800576c <_printf_i+0x188>
 8005766:	065f      	lsls	r7, r3, #25
 8005768:	bf48      	it	mi
 800576a:	b2ad      	uxthmi	r5, r5
 800576c:	6031      	str	r1, [r6, #0]
 800576e:	07d9      	lsls	r1, r3, #31
 8005770:	bf44      	itt	mi
 8005772:	f043 0320 	orrmi.w	r3, r3, #32
 8005776:	6023      	strmi	r3, [r4, #0]
 8005778:	b11d      	cbz	r5, 8005782 <_printf_i+0x19e>
 800577a:	2310      	movs	r3, #16
 800577c:	e7ac      	b.n	80056d8 <_printf_i+0xf4>
 800577e:	4827      	ldr	r0, [pc, #156]	@ (800581c <_printf_i+0x238>)
 8005780:	e7e9      	b.n	8005756 <_printf_i+0x172>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	f023 0320 	bic.w	r3, r3, #32
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	e7f6      	b.n	800577a <_printf_i+0x196>
 800578c:	4616      	mov	r6, r2
 800578e:	e7bd      	b.n	800570c <_printf_i+0x128>
 8005790:	6833      	ldr	r3, [r6, #0]
 8005792:	6825      	ldr	r5, [r4, #0]
 8005794:	6961      	ldr	r1, [r4, #20]
 8005796:	1d18      	adds	r0, r3, #4
 8005798:	6030      	str	r0, [r6, #0]
 800579a:	062e      	lsls	r6, r5, #24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	d501      	bpl.n	80057a4 <_printf_i+0x1c0>
 80057a0:	6019      	str	r1, [r3, #0]
 80057a2:	e002      	b.n	80057aa <_printf_i+0x1c6>
 80057a4:	0668      	lsls	r0, r5, #25
 80057a6:	d5fb      	bpl.n	80057a0 <_printf_i+0x1bc>
 80057a8:	8019      	strh	r1, [r3, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	4616      	mov	r6, r2
 80057b0:	e7bc      	b.n	800572c <_printf_i+0x148>
 80057b2:	6833      	ldr	r3, [r6, #0]
 80057b4:	1d1a      	adds	r2, r3, #4
 80057b6:	6032      	str	r2, [r6, #0]
 80057b8:	681e      	ldr	r6, [r3, #0]
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	2100      	movs	r1, #0
 80057be:	4630      	mov	r0, r6
 80057c0:	f7fa fd26 	bl	8000210 <memchr>
 80057c4:	b108      	cbz	r0, 80057ca <_printf_i+0x1e6>
 80057c6:	1b80      	subs	r0, r0, r6
 80057c8:	6060      	str	r0, [r4, #4]
 80057ca:	6863      	ldr	r3, [r4, #4]
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	2300      	movs	r3, #0
 80057d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057d4:	e7aa      	b.n	800572c <_printf_i+0x148>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	4632      	mov	r2, r6
 80057da:	4649      	mov	r1, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	47d0      	blx	sl
 80057e0:	3001      	adds	r0, #1
 80057e2:	d0ad      	beq.n	8005740 <_printf_i+0x15c>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	079b      	lsls	r3, r3, #30
 80057e8:	d413      	bmi.n	8005812 <_printf_i+0x22e>
 80057ea:	68e0      	ldr	r0, [r4, #12]
 80057ec:	9b03      	ldr	r3, [sp, #12]
 80057ee:	4298      	cmp	r0, r3
 80057f0:	bfb8      	it	lt
 80057f2:	4618      	movlt	r0, r3
 80057f4:	e7a6      	b.n	8005744 <_printf_i+0x160>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4632      	mov	r2, r6
 80057fa:	4649      	mov	r1, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	47d0      	blx	sl
 8005800:	3001      	adds	r0, #1
 8005802:	d09d      	beq.n	8005740 <_printf_i+0x15c>
 8005804:	3501      	adds	r5, #1
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	9903      	ldr	r1, [sp, #12]
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	42ab      	cmp	r3, r5
 800580e:	dcf2      	bgt.n	80057f6 <_printf_i+0x212>
 8005810:	e7eb      	b.n	80057ea <_printf_i+0x206>
 8005812:	2500      	movs	r5, #0
 8005814:	f104 0619 	add.w	r6, r4, #25
 8005818:	e7f5      	b.n	8005806 <_printf_i+0x222>
 800581a:	bf00      	nop
 800581c:	08005991 	.word	0x08005991
 8005820:	080059a2 	.word	0x080059a2

08005824 <memmove>:
 8005824:	4288      	cmp	r0, r1
 8005826:	b510      	push	{r4, lr}
 8005828:	eb01 0402 	add.w	r4, r1, r2
 800582c:	d902      	bls.n	8005834 <memmove+0x10>
 800582e:	4284      	cmp	r4, r0
 8005830:	4623      	mov	r3, r4
 8005832:	d807      	bhi.n	8005844 <memmove+0x20>
 8005834:	1e43      	subs	r3, r0, #1
 8005836:	42a1      	cmp	r1, r4
 8005838:	d008      	beq.n	800584c <memmove+0x28>
 800583a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800583e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005842:	e7f8      	b.n	8005836 <memmove+0x12>
 8005844:	4402      	add	r2, r0
 8005846:	4601      	mov	r1, r0
 8005848:	428a      	cmp	r2, r1
 800584a:	d100      	bne.n	800584e <memmove+0x2a>
 800584c:	bd10      	pop	{r4, pc}
 800584e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005856:	e7f7      	b.n	8005848 <memmove+0x24>

08005858 <_sbrk_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d06      	ldr	r5, [pc, #24]	@ (8005874 <_sbrk_r+0x1c>)
 800585c:	2300      	movs	r3, #0
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	f7fc f808 	bl	8001878 <_sbrk>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_sbrk_r+0x1a>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_sbrk_r+0x1a>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	200003e4 	.word	0x200003e4

08005878 <memcpy>:
 8005878:	440a      	add	r2, r1
 800587a:	4291      	cmp	r1, r2
 800587c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005880:	d100      	bne.n	8005884 <memcpy+0xc>
 8005882:	4770      	bx	lr
 8005884:	b510      	push	{r4, lr}
 8005886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800588a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800588e:	4291      	cmp	r1, r2
 8005890:	d1f9      	bne.n	8005886 <memcpy+0xe>
 8005892:	bd10      	pop	{r4, pc}

08005894 <_realloc_r>:
 8005894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005898:	4680      	mov	r8, r0
 800589a:	4615      	mov	r5, r2
 800589c:	460c      	mov	r4, r1
 800589e:	b921      	cbnz	r1, 80058aa <_realloc_r+0x16>
 80058a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	4611      	mov	r1, r2
 80058a6:	f7ff bc4b 	b.w	8005140 <_malloc_r>
 80058aa:	b92a      	cbnz	r2, 80058b8 <_realloc_r+0x24>
 80058ac:	f7ff fbdc 	bl	8005068 <_free_r>
 80058b0:	2400      	movs	r4, #0
 80058b2:	4620      	mov	r0, r4
 80058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b8:	f000 f81a 	bl	80058f0 <_malloc_usable_size_r>
 80058bc:	4285      	cmp	r5, r0
 80058be:	4606      	mov	r6, r0
 80058c0:	d802      	bhi.n	80058c8 <_realloc_r+0x34>
 80058c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80058c6:	d8f4      	bhi.n	80058b2 <_realloc_r+0x1e>
 80058c8:	4629      	mov	r1, r5
 80058ca:	4640      	mov	r0, r8
 80058cc:	f7ff fc38 	bl	8005140 <_malloc_r>
 80058d0:	4607      	mov	r7, r0
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d0ec      	beq.n	80058b0 <_realloc_r+0x1c>
 80058d6:	42b5      	cmp	r5, r6
 80058d8:	462a      	mov	r2, r5
 80058da:	4621      	mov	r1, r4
 80058dc:	bf28      	it	cs
 80058de:	4632      	movcs	r2, r6
 80058e0:	f7ff ffca 	bl	8005878 <memcpy>
 80058e4:	4621      	mov	r1, r4
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7ff fbbe 	bl	8005068 <_free_r>
 80058ec:	463c      	mov	r4, r7
 80058ee:	e7e0      	b.n	80058b2 <_realloc_r+0x1e>

080058f0 <_malloc_usable_size_r>:
 80058f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f4:	1f18      	subs	r0, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bfbc      	itt	lt
 80058fa:	580b      	ldrlt	r3, [r1, r0]
 80058fc:	18c0      	addlt	r0, r0, r3
 80058fe:	4770      	bx	lr

08005900 <_init>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr

0800590c <_fini>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr
